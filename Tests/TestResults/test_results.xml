<?xml version="1.0" encoding="utf-8"?>
<TestRun id="1c05c4f8-c6b3-4a90-a5ed-48690463ab22" name="reday@BRUNO 2024-04-30 15:10:41" runUser="BRUNO\reday" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2024-04-30T15:10:41.2814034-04:00" queuing="2024-04-30T15:10:41.2814035-04:00" start="2024-04-30T15:10:40.1273791-04:00" finish="2024-04-30T15:10:41.4747666-04:00" />
  <TestSettings name="default" id="3c1b335b-6a53-4ad5-b5df-dc194776e3c5">
    <Deployment runDeploymentRoot="reday_BRUNO_2024-04-30_15_10_41" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="168e878c-dfa1-4b15-ba48-95fe9dae667e" testId="f3d9dc50-2a62-4d82-9747-7c42d8d895a0" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IdentifierToken)" computerName="BRUNO" duration="00:00:00.0000018" startTime="2024-04-30T15:10:41.2538164-04:00" endTime="2024-04-30T15:10:41.2538165-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="168e878c-dfa1-4b15-ba48-95fe9dae667e" />
    <UnitTestResult executionId="d8dc6536-a571-4981-816a-0504e368f4ae" testId="8a636c7b-9a0e-f99f-86b1-40253fe8a20e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3183740-04:00" endTime="2024-04-30T15:10:41.3183741-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8dc6536-a571-4981-816a-0504e368f4ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b11f29e4-52eb-41ca-9dc1-29217924d78c" testId="88ec2b88-f2ed-1c00-e3eb-b0c071f11979" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2657050-04:00" endTime="2024-04-30T15:10:41.2657050-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b11f29e4-52eb-41ca-9dc1-29217924d78c" />
    <UnitTestResult executionId="c39f6063-8e68-41e1-a218-bf005ef8655f" testId="262f77c8-5d41-3525-c84a-ab44befeedf4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2921687-04:00" endTime="2024-04-30T15:10:41.2921687-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c39f6063-8e68-41e1-a218-bf005ef8655f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06f5ee62-9181-4875-b871-9a0b9a484aac" testId="60e313ad-329f-cf40-c5ae-d37f9c91c3c7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3250162-04:00" endTime="2024-04-30T15:10:41.3250162-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06f5ee62-9181-4875-b871-9a0b9a484aac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a503444-cc9d-4caa-96a8-3d8ac00610c8" testId="5494b3fe-5f66-a158-28fd-d9f8982fa2e4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000183" startTime="2024-04-30T15:10:41.2973016-04:00" endTime="2024-04-30T15:10:41.2973017-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a503444-cc9d-4caa-96a8-3d8ac00610c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8be3004-bd61-4930-bbf4-9ac9aff19b93" testId="8431fad6-3402-4cce-98fb-9016c711451c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.3822408-04:00" endTime="2024-04-30T15:10:41.3822409-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8be3004-bd61-4930-bbf4-9ac9aff19b93">
      <Output>
        <StdOut>Testing pair: '=-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c37a29e-9f7f-4ef9-97c0-90db29673918" testId="4a812d2f-7051-a9d5-0c04-3f6d3141b7e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3204785-04:00" endTime="2024-04-30T15:10:41.3204786-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c37a29e-9f7f-4ef9-97c0-90db29673918">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef73687d-fa29-4b0b-bd5d-29dbaf86900b" testId="d133efdf-c2f0-276d-c870-784bd756c438" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3803304-04:00" endTime="2024-04-30T15:10:41.3803305-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef73687d-fa29-4b0b-bd5d-29dbaf86900b">
      <Output>
        <StdOut>Testing pair: '*and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56359220-3481-424c-af10-1d4a54eba49a" testId="a480d80d-abf1-5208-24d4-fb53b008ab79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3757155-04:00" endTime="2024-04-30T15:10:41.3757155-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56359220-3481-424c-af10-1d4a54eba49a">
      <Output>
        <StdOut>Testing pair: '=*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93153866-0bce-4195-a4c8-b787bcd4e4be" testId="f9419445-c7bc-bd0e-edde-daf3fb346002" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3129219-04:00" endTime="2024-04-30T15:10:41.3129220-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93153866-0bce-4195-a4c8-b787bcd4e4be">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="044a9bcd-1c63-4499-83c8-7baa014ac4a9" testId="0f5b43f2-bd1c-51f7-b937-2b7a6d72646c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000261" startTime="2024-04-30T15:10:41.3047657-04:00" endTime="2024-04-30T15:10:41.3047657-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="044a9bcd-1c63-4499-83c8-7baa014ac4a9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2fcd2f06-bdb1-4410-9d96-c63e3aaa3df3" testId="8df2ac41-3169-dc1d-ca3c-a2c3cf53f1c7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3747262-04:00" endTime="2024-04-30T15:10:41.3747263-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fcd2f06-bdb1-4410-9d96-c63e3aaa3df3">
      <Output>
        <StdOut>Testing pair: '*reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45141588-95cd-41db-a821-3edcedb8b00a" testId="481e09cb-ea8e-6299-f675-550baf99fa1f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2846422-04:00" endTime="2024-04-30T15:10:41.2846422-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45141588-95cd-41db-a821-3edcedb8b00a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa4a513f-5c9b-47a8-a7ab-fc705e053102" testId="eb28a732-7c20-85d0-2717-7553dd1b18ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3178690-04:00" endTime="2024-04-30T15:10:41.3178690-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa4a513f-5c9b-47a8-a7ab-fc705e053102">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5656cac4-dce6-4ec5-b2c3-bf84260587b2" testId="69e4a161-d4c1-6d8e-ef67-746f44271bbe" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2670978-04:00" endTime="2024-04-30T15:10:41.2670978-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5656cac4-dce6-4ec5-b2c3-bf84260587b2" />
    <UnitTestResult executionId="23e875db-87cc-46fa-95e6-4eaad66cea7e" testId="1ddc7dd4-7644-0681-53cc-6eaf7a50ab74" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3124037-04:00" endTime="2024-04-30T15:10:41.3124038-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23e875db-87cc-46fa-95e6-4eaad66cea7e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abc176ae-c21e-4bb0-aee3-5c4421847e1e" testId="114b4529-4400-f8bf-b571-dd394abdc720" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.3022770-04:00" endTime="2024-04-30T15:10:41.3022770-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abc176ae-c21e-4bb0-aee3-5c4421847e1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1040588d-734d-4939-b743-66134a1ed0a4" testId="e4b714dc-1764-a355-8d55-f74348bff8a2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3482784-04:00" endTime="2024-04-30T15:10:41.3482785-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1040588d-734d-4939-b743-66134a1ed0a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52e36515-bcce-4f8c-8aae-9880effde0c1" testId="07aef847-d0ed-4f9b-dc78-586030530964" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000222" startTime="2024-04-30T15:10:41.2678390-04:00" endTime="2024-04-30T15:10:41.2678390-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52e36515-bcce-4f8c-8aae-9880effde0c1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22541276-d8c1-4b82-aff5-ed3e772a8288" testId="56d29d17-6198-7751-3344-8e738ff58fc4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3369375-04:00" endTime="2024-04-30T15:10:41.3369376-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22541276-d8c1-4b82-aff5-ed3e772a8288">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="499f5234-52b2-400e-bd28-6e3bd960ea5c" testId="a8d4c231-c004-9147-067a-455bf39a88ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3204251-04:00" endTime="2024-04-30T15:10:41.3204251-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="499f5234-52b2-400e-bd28-6e3bd960ea5c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ceb4003-d53f-4363-946b-c5c2c6a82f21" testId="ddb5cdbd-de0f-2b49-2754-724ad0d65a4b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3599440-04:00" endTime="2024-04-30T15:10:41.3599441-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ceb4003-d53f-4363-946b-c5c2c6a82f21">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4771b96f-09a0-4179-95ff-219b9cfefb36" testId="6262b297-fd7b-04ca-34a0-a72d272fef08" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3470601-04:00" endTime="2024-04-30T15:10:41.3470602-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4771b96f-09a0-4179-95ff-219b9cfefb36">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c05f5ea8-166a-426c-b68a-e787fc3f0653" testId="625a8520-0f7a-f525-58e9-af1f8eb23dbb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000147" startTime="2024-04-30T15:10:41.2733127-04:00" endTime="2024-04-30T15:10:41.2733128-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c05f5ea8-166a-426c-b68a-e787fc3f0653">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa0ac773-7268-44aa-bedd-7629b2dc74f1" testId="1c4ca1b5-fc67-9560-ab21-189a9af07180" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0038003" startTime="2024-04-30T15:10:41.2938781-04:00" endTime="2024-04-30T15:10:41.2938781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa0ac773-7268-44aa-bedd-7629b2dc74f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b58fe8cc-65cb-4ebd-adda-f1547d4de577" testId="f279bb56-26a0-1f9a-2654-8ee7faae7551" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000184" startTime="2024-04-30T15:10:41.2554152-04:00" endTime="2024-04-30T15:10:41.2554153-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b58fe8cc-65cb-4ebd-adda-f1547d4de577">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e61b0e43-89f7-4ec2-a577-f4789f6585a1" testId="44cc864c-c7a1-e2a0-6c60-2d46344ad365" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2856065-04:00" endTime="2024-04-30T15:10:41.2856065-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e61b0e43-89f7-4ec2-a577-f4789f6585a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bae706a9-ceed-49c4-a674-d21dec5961f8" testId="6d09990b-fb3a-137b-6b4f-cd71517ff384" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.2831431-04:00" endTime="2024-04-30T15:10:41.2831432-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bae706a9-ceed-49c4-a674-d21dec5961f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e77c9f2-40fa-4d57-9632-66bb00802f8a" testId="1d6e6b64-215d-278a-b5d2-ba87784c2865" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3738709-04:00" endTime="2024-04-30T15:10:41.3738710-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e77c9f2-40fa-4d57-9632-66bb00802f8a">
      <Output>
        <StdOut>Testing pair: '/='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="71f4ea1d-c79a-4f07-a6fa-0dfb6a1e3697" testId="0ebfb59e-4d50-c23c-3fe4-54001fba7b92" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3656421-04:00" endTime="2024-04-30T15:10:41.3656421-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71f4ea1d-c79a-4f07-a6fa-0dfb6a1e3697">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ab320255-4102-4328-a323-27efe44e0edb" testId="627327bf-75f2-71e2-ec61-0b0751191811" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3049452-04:00" endTime="2024-04-30T15:10:41.3049453-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab320255-4102-4328-a323-27efe44e0edb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4afb3d7f-0b4d-46df-adb7-602dbb2bda38" testId="9563a5e8-edc3-01d8-67e4-c497c8ee3283" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2616724-04:00" endTime="2024-04-30T15:10:41.2616724-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4afb3d7f-0b4d-46df-adb7-602dbb2bda38">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="091a650b-b694-4cb4-9f83-a609110d60e7" testId="101e169a-b910-aa6d-481e-d04a99bcf24f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3400422-04:00" endTime="2024-04-30T15:10:41.3400423-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="091a650b-b694-4cb4-9f83-a609110d60e7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4599475c-6f39-4262-affd-e1bb83b117cb" testId="9f9df33a-15d8-9363-fa15-d829c22c7631" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2772120-04:00" endTime="2024-04-30T15:10:41.2772120-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4599475c-6f39-4262-affd-e1bb83b117cb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8bf95a02-c753-4f54-a8ce-f20aa2cf0f16" testId="c2df2d92-05ed-6b98-3118-e9ad3e95bfc7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.3008245-04:00" endTime="2024-04-30T15:10:41.3008245-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bf95a02-c753-4f54-a8ce-f20aa2cf0f16">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5ed6ae7-2ea4-4d73-83bb-f66c48eaa447" testId="5e1da831-283e-c51d-73e4-c8b3b7762473" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.3816037-04:00" endTime="2024-04-30T15:10:41.3816038-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5ed6ae7-2ea4-4d73-83bb-f66c48eaa447">
      <Output>
        <StdOut>Testing pair: '==and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb5b771c-2816-474f-af2b-ffa42bf4cf3f" testId="a93da7a6-b15c-a772-d3e4-f2e00d18236b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.3014391-04:00" endTime="2024-04-30T15:10:41.3014392-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb5b771c-2816-474f-af2b-ffa42bf4cf3f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddb0ff1c-2c1e-4748-b7be-ab9f8631c195" testId="42791c29-344d-2068-00fa-c7ade30915d9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3433582-04:00" endTime="2024-04-30T15:10:41.3433583-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddb0ff1c-2c1e-4748-b7be-ab9f8631c195">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8a52c20-9542-4820-b761-c1a2cc88c141" testId="86c330b5-9d10-0731-3f25-7f6cd8f61e9b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3184010-04:00" endTime="2024-04-30T15:10:41.3184010-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8a52c20-9542-4820-b761-c1a2cc88c141">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce5636da-bd3a-471b-8ae2-4b4dbf038aba" testId="d82a51e6-211f-b58e-b28a-8aa3bbbe7d32" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3527644-04:00" endTime="2024-04-30T15:10:41.3527644-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce5636da-bd3a-471b-8ae2-4b4dbf038aba">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e7f5817a-232a-4cce-96ff-c843a9ebe03b" testId="566657be-9a21-ffeb-e2fc-d50069bdb6e2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.3019035-04:00" endTime="2024-04-30T15:10:41.3019036-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7f5817a-232a-4cce-96ff-c843a9ebe03b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bb69088-b189-430d-9020-2a8c695bf22a" testId="56826720-405e-3aba-98d4-21fb65e5b5ca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3313408-04:00" endTime="2024-04-30T15:10:41.3313409-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bb69088-b189-430d-9020-2a8c695bf22a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4eab7c3-d4c6-4e98-a2e6-4f82cf022d6c" testId="ab233116-e669-53e8-8fc6-0275258c322b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3301736-04:00" endTime="2024-04-30T15:10:41.3301736-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4eab7c3-d4c6-4e98-a2e6-4f82cf022d6c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66dbf4ac-5dcf-46e4-a9ee-ee90832956a9" testId="fe24ef45-09fc-753a-529a-135dae94ef06" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3827493-04:00" endTime="2024-04-30T15:10:41.3827493-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66dbf4ac-5dcf-46e4-a9ee-ee90832956a9">
      <Output>
        <StdOut>Testing pair: '/and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e83e492-75e0-4636-8d4b-dd265edb400b" testId="977f00cf-b737-ba6a-64a9-c7458a124c3f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.2825359-04:00" endTime="2024-04-30T15:10:41.2825359-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e83e492-75e0-4636-8d4b-dd265edb400b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c8477f5-56f0-45f5-9a8f-b1cde91ab604" testId="c8ea2707-02d9-4b6a-eeae-4c63c1b98208" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2926343-04:00" endTime="2024-04-30T15:10:41.2926343-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c8477f5-56f0-45f5-9a8f-b1cde91ab604">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0b0743e-df7b-47c7-a1b9-67448ac8fc79" testId="73030872-9fe5-78a3-e123-137d72e47a68" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.2874412-04:00" endTime="2024-04-30T15:10:41.2874413-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0b0743e-df7b-47c7-a1b9-67448ac8fc79">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d5d3c9f-89ee-4d94-b161-56f9667fb7c4" testId="5730365b-4a4f-4c55-6a4b-a8b5381ee021" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3407985-04:00" endTime="2024-04-30T15:10:41.3407985-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d5d3c9f-89ee-4d94-b161-56f9667fb7c4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9edecbc-f577-489f-9af1-cd55d15a478f" testId="641a7b3c-8dbe-59e5-25cf-666fe8d16544" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3109591-04:00" endTime="2024-04-30T15:10:41.3109591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9edecbc-f577-489f-9af1-cd55d15a478f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59151b93-4456-4b88-a4f4-9f42d866050e" testId="c649c0c6-420d-384a-d82e-29175b911cb1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3434164-04:00" endTime="2024-04-30T15:10:41.3434164-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59151b93-4456-4b88-a4f4-9f42d866050e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5f97539-6863-40bf-a970-3d07153aac1c" testId="75a4b8ae-8d50-1ee7-aaa8-5bca8a21ed8e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3367366-04:00" endTime="2024-04-30T15:10:41.3367367-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5f97539-6863-40bf-a970-3d07153aac1c">
      <Output>
        <StdOut>Testing pair with explicit separator: '123 a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c979234c-07ce-48c7-ad9c-ec9c0214a53f" testId="cea2b52f-1881-7260-794c-706088d868c5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.3159429-04:00" endTime="2024-04-30T15:10:41.3159429-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c979234c-07ce-48c7-ad9c-ec9c0214a53f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d9e98b9d-8509-4c7c-80e4-5135705b52d0" testId="7790d118-6bb8-107c-aaaa-8b02de5e0897" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EqualsToken)" computerName="BRUNO" duration="00:00:00.0000038" startTime="2024-04-30T15:10:41.2511166-04:00" endTime="2024-04-30T15:10:41.2511166-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9e98b9d-8509-4c7c-80e4-5135705b52d0" />
    <UnitTestResult executionId="5d6b4c00-4723-4a63-ac6e-5a91bec3c6c6" testId="23deb1fc-2e8e-b1fc-c13a-ce2d7255f9b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3655625-04:00" endTime="2024-04-30T15:10:41.3655625-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d6b4c00-4723-4a63-ac6e-5a91bec3c6c6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b367a2e5-46d0-4a6d-af64-713bc4b855c8" testId="ddf005a1-7a61-5a8b-b241-b6033981e872" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3028031-04:00" endTime="2024-04-30T15:10:41.3028032-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b367a2e5-46d0-4a6d-af64-713bc4b855c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a54f2371-25f3-4ead-897f-476daddb1e69" testId="3fdd6d21-2bc2-306b-1ea8-83738a286047" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3347078-04:00" endTime="2024-04-30T15:10:41.3347078-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a54f2371-25f3-4ead-897f-476daddb1e69">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50665f1d-84b3-4440-b01f-e08475f5ee59" testId="f2462922-1185-3094-4672-836f2a428f42" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000124" startTime="2024-04-30T15:10:41.2809880-04:00" endTime="2024-04-30T15:10:41.2809880-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50665f1d-84b3-4440-b01f-e08475f5ee59">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88786c8e-9284-4490-8255-4df4b799911d" testId="bc59fed2-e4f0-09e5-283c-beb1ad2d89c3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2895678-04:00" endTime="2024-04-30T15:10:41.2895678-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88786c8e-9284-4490-8255-4df4b799911d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a387e36-64cf-4b95-b8cd-ef4f96e51b2a" testId="6bcea128-aa38-b86a-de84-24399800363d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3139321-04:00" endTime="2024-04-30T15:10:41.3139321-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a387e36-64cf-4b95-b8cd-ef4f96e51b2a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2990e55c-a238-4623-bac5-9b21040f8fe9" testId="89ebda0b-9627-b6ce-1fba-d765f98f5e22" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3758231-04:00" endTime="2024-04-30T15:10:41.3758232-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2990e55c-a238-4623-bac5-9b21040f8fe9">
      <Output>
        <StdOut>Testing pair: '==True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54f844e5-bc36-4f02-821c-81372be69cac" testId="6c3fc3d5-03f6-d947-cb4f-8ab0b4c8df9a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000105" startTime="2024-04-30T15:10:41.3510776-04:00" endTime="2024-04-30T15:10:41.3510777-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54f844e5-bc36-4f02-821c-81372be69cac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee46ae38-1766-46bc-8ab2-c44311fff409" testId="bca85e89-b229-2eeb-4f39-28130b9b10f6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000188" startTime="2024-04-30T15:10:41.2974370-04:00" endTime="2024-04-30T15:10:41.2974370-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee46ae38-1766-46bc-8ab2-c44311fff409">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1824a70d-c118-4874-bda8-52651220239a" testId="96423b6f-6772-8c83-9a94-77ab2204c5de" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3687531-04:00" endTime="2024-04-30T15:10:41.3687532-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1824a70d-c118-4874-bda8-52651220239a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f6b5e04-837f-45d4-beed-121e0b022776" testId="a7c9d2bc-5edd-4cd4-1c50-ecf8e09afb27" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3123760-04:00" endTime="2024-04-30T15:10:41.3123760-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f6b5e04-837f-45d4-beed-121e0b022776">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="230facec-3b41-4498-9ee6-29aeedd35911" testId="f5d9ceb9-d44c-f81b-3648-57132569fa6b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000123" startTime="2024-04-30T15:10:41.3455457-04:00" endTime="2024-04-30T15:10:41.3455458-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="230facec-3b41-4498-9ee6-29aeedd35911">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6587847-19e2-471f-a0b6-fad2e51fe326" testId="c809a6cb-086a-3572-a2d4-a7a9a30ffff2" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 4) + 2&quot;, expectedValue: 6)" computerName="BRUNO" duration="00:00:00.0000223" startTime="2024-04-30T15:10:41.2751013-04:00" endTime="2024-04-30T15:10:41.2751014-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6587847-19e2-471f-a0b6-fad2e51fe326" />
    <UnitTestResult executionId="1ca7d21f-c640-43ad-99ca-0868b73e88cf" testId="be3feab5-257d-694e-1353-572af9f1cb0c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3710569-04:00" endTime="2024-04-30T15:10:41.3710569-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ca7d21f-c640-43ad-99ca-0868b73e88cf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="714877f3-35ba-4734-a000-6be833cc86b5" testId="5bb271d9-6599-f129-6caa-befb58d5e417" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3452829-04:00" endTime="2024-04-30T15:10:41.3452829-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="714877f3-35ba-4734-a000-6be833cc86b5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9202330-f11a-493a-997b-beacb5e7bb96" testId="dc8159fa-efaf-bbaf-76ba-587cba99aebc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3306035-04:00" endTime="2024-04-30T15:10:41.3306035-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9202330-f11a-493a-997b-beacb5e7bb96">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b14d708c-1425-43b4-a3be-6b05502e9e5e" testId="c87d3e8f-d9a4-e676-9f17-6d68c48380ca" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2725244-04:00" endTime="2024-04-30T15:10:41.2725245-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b14d708c-1425-43b4-a3be-6b05502e9e5e" />
    <UnitTestResult executionId="f159c021-4aa9-4d81-a9ee-28485ac85e0d" testId="74210cf2-2bec-8653-8d79-91caa831e31d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.3049126-04:00" endTime="2024-04-30T15:10:41.3049127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f159c021-4aa9-4d81-a9ee-28485ac85e0d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bad7383c-7ae4-426a-9f53-be5ec857bcb4" testId="f1ff199b-7d6f-93a9-2f75-007f5b886c7f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3084737-04:00" endTime="2024-04-30T15:10:41.3084738-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bad7383c-7ae4-426a-9f53-be5ec857bcb4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3d4b533-acfa-4f5c-8f20-a71a0cfedcfd" testId="d4612ba2-91e2-17c4-d940-d1ebd09dc16f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3733317-04:00" endTime="2024-04-30T15:10:41.3733317-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3d4b533-acfa-4f5c-8f20-a71a0cfedcfd">
      <Output>
        <StdOut>Testing pair: '!=/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="090b0e66-0652-46f3-8ca6-830c71342451" testId="b489d305-0b59-98cd-dfec-481ac3164301" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;8 * 2&quot;, expectedValue: 16)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2709438-04:00" endTime="2024-04-30T15:10:41.2709438-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="090b0e66-0652-46f3-8ca6-830c71342451" />
    <UnitTestResult executionId="021148c8-4aa6-4498-811c-c27ff7a14fdc" testId="cd26a307-e0ac-1c6d-82e4-dd491b9195a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2917178-04:00" endTime="2024-04-30T15:10:41.2917179-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="021148c8-4aa6-4498-811c-c27ff7a14fdc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95015eaf-0278-4aa6-8849-0580bb074644" testId="3c3b3aca-130e-ce79-ac21-f8d1e8a689d8" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000133" startTime="2024-04-30T15:10:41.2712591-04:00" endTime="2024-04-30T15:10:41.2712592-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95015eaf-0278-4aa6-8849-0580bb074644" />
    <UnitTestResult executionId="29c3ea1e-e281-498e-8482-71b751d856ce" testId="13d8651c-47b2-cc66-8112-0d5ce8366308" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3279869-04:00" endTime="2024-04-30T15:10:41.3279870-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29c3ea1e-e281-498e-8482-71b751d856ce">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="868eca14-8b6b-42a9-a8f9-cab0afd895b5" testId="ff745070-d32b-b5b2-fc63-e863b1ba90ed" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3285924-04:00" endTime="2024-04-30T15:10:41.3285925-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="868eca14-8b6b-42a9-a8f9-cab0afd895b5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6dfbe033-2228-49d7-8c56-4ed288bc7ad1" testId="d3558819-576c-8c39-7e22-ae9fcdd69aec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3719917-04:00" endTime="2024-04-30T15:10:41.3719917-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6dfbe033-2228-49d7-8c56-4ed288bc7ad1">
      <Output>
        <StdOut>Testing pair: '*('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb799368-655f-445e-b53f-6c56fb2f7dca" testId="31dd3e22-2f4e-1a7c-734b-be4e15f090f3" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;a = (x = 12)&quot;, expectedValue: 12)" computerName="BRUNO" duration="00:00:00.0001196" startTime="2024-04-30T15:10:41.2721464-04:00" endTime="2024-04-30T15:10:41.2721465-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb799368-655f-445e-b53f-6c56fb2f7dca" />
    <UnitTestResult executionId="0f013244-dcd3-4834-9358-2b60a61e48ca" testId="dcd6b635-689f-8e95-18f6-1b75d8e71214" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.3794323-04:00" endTime="2024-04-30T15:10:41.3794324-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f013244-dcd3-4834-9358-2b60a61e48ca">
      <Output>
        <StdOut>Testing pair: '/loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ec31103-2a28-437f-a09a-a83b3e8682b5" testId="603d33c8-84ee-1096-4481-3e4534b36ac6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000147" startTime="2024-04-30T15:10:41.2762602-04:00" endTime="2024-04-30T15:10:41.2762602-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ec31103-2a28-437f-a09a-a83b3e8682b5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3ea443a9-62b5-411b-a52d-51eca9b984b4" testId="ce2eef36-7d75-7b9d-cacf-5f7e6d3f1df1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3728080-04:00" endTime="2024-04-30T15:10:41.3728080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ea443a9-62b5-411b-a52d-51eca9b984b4">
      <Output>
        <StdOut>Testing pair: '==/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bbcab57e-913e-4f94-bfee-f9aa72e25d2d" testId="47cee45b-2205-9030-50bc-e2b972f36765" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3832853-04:00" endTime="2024-04-30T15:10:41.3832853-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbcab57e-913e-4f94-bfee-f9aa72e25d2d">
      <Output>
        <StdOut>Testing pair: '==or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9699ec2-f66d-4b88-b7d9-352015bb7478" testId="b0feccda-2425-3568-d557-c9e790e35e6b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3610094-04:00" endTime="2024-04-30T15:10:41.3610094-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9699ec2-f66d-4b88-b7d9-352015bb7478">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ad2d7ec3-c144-4190-8417-65474178f888" testId="3f3935e0-5e80-7863-6f72-7bb51fafe025" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3337983-04:00" endTime="2024-04-30T15:10:41.3337984-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad2d7ec3-c144-4190-8417-65474178f888">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="652d38e8-35bb-4e8a-982e-5d19d31fe3ad" testId="6a3413bd-4701-e4a3-0b1a-434c3bb62f23" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3088344-04:00" endTime="2024-04-30T15:10:41.3088344-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="652d38e8-35bb-4e8a-982e-5d19d31fe3ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef2143e8-6169-40ef-86c9-fd9c81454d0e" testId="f4d7ad08-e374-59cf-add0-3b3dfcb42154" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: PlusToken)" computerName="BRUNO" duration="00:00:00.0000040" startTime="2024-04-30T15:10:41.2537425-04:00" endTime="2024-04-30T15:10:41.2537425-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef2143e8-6169-40ef-86c9-fd9c81454d0e" />
    <UnitTestResult executionId="18a14eec-a410-4ffd-a83b-d6364cee6965" testId="3abc950b-35f6-2fdb-1885-6727b1ef844f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000208" startTime="2024-04-30T15:10:41.2683535-04:00" endTime="2024-04-30T15:10:41.2683535-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18a14eec-a410-4ffd-a83b-d6364cee6965">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3584de8e-0bfb-445c-9bdb-db88f9e1cee2" testId="34fc7beb-c521-a483-312d-58441beb1bf4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.2871138-04:00" endTime="2024-04-30T15:10:41.2871139-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3584de8e-0bfb-445c-9bdb-db88f9e1cee2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8296f352-a3ba-4f4c-ab2c-e80ff31e4683" testId="94da6f41-4f40-b8f2-d2d3-62479f2af42d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3280188-04:00" endTime="2024-04-30T15:10:41.3280189-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8296f352-a3ba-4f4c-ab2c-e80ff31e4683">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6db068c-eaf0-4cc4-9305-bff7bd16e250" testId="e3486540-0af0-cfc9-8e6d-799b23b0122f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3358224-04:00" endTime="2024-04-30T15:10:41.3358224-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6db068c-eaf0-4cc4-9305-bff7bd16e250">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e80f874-7a9a-4b41-b9b2-9724a5f26fa9" testId="b0b6b962-025e-af6d-70f6-0adc0d585d13" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3321679-04:00" endTime="2024-04-30T15:10:41.3321680-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e80f874-7a9a-4b41-b9b2-9724a5f26fa9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6d3c944-be4c-443b-b896-71dfdf341dbe" testId="475ca5da-3572-deda-fe26-b17a160e440e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3725044-04:00" endTime="2024-04-30T15:10:41.3725044-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6d3c944-be4c-443b-b896-71dfdf341dbe">
      <Output>
        <StdOut>Testing pair: '+-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="237fc2e6-7114-436d-8465-fcafd22cf89d" testId="778228be-94e4-115e-9f90-b5810ba9f7be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3844561-04:00" endTime="2024-04-30T15:10:41.3844561-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="237fc2e6-7114-436d-8465-fcafd22cf89d">
      <Output>
        <StdOut>Testing pair: '*)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d21b06f1-378c-4125-b304-8df835377384" testId="4769181a-5e3c-cedf-d36c-7328cf7af390" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3557047-04:00" endTime="2024-04-30T15:10:41.3557048-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d21b06f1-378c-4125-b304-8df835377384">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5524d542-c324-41cf-b82a-31619fc3825b" testId="3a4a4463-b091-d7da-153c-173264ff2240" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.2896561-04:00" endTime="2024-04-30T15:10:41.2896561-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5524d542-c324-41cf-b82a-31619fc3825b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4c14d7d8-e274-4e1a-a853-369d4ef85190" testId="87f5185d-4b3e-bf18-7b43-7d1cc0ffba54" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3331536-04:00" endTime="2024-04-30T15:10:41.3331537-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c14d7d8-e274-4e1a-a853-369d4ef85190">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d227e90-7660-47f2-a029-8b924d2fbe93" testId="5c45d074-387b-573b-2e0a-51a2f7385612" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NotEqualsToken, text: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0007829" startTime="2024-04-30T15:10:41.3845780-04:00" endTime="2024-04-30T15:10:41.3845781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d227e90-7660-47f2-a029-8b924d2fbe93">
      <Output>
        <StdOut>Expected kind: NotEqualsToken, Actual kind: NotEqualsToken&#xD;
Expected text: '!=', Actual text: '!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="72d4a877-eef7-41fe-aa28-df22b796ad59" testId="ab4501f8-6b42-73c4-3329-ded45257416f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3606287-04:00" endTime="2024-04-30T15:10:41.3606288-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72d4a877-eef7-41fe-aa28-df22b796ad59">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81d34ed8-d54d-4125-8031-cc820fc831f9" testId="02d979d9-f5d5-4ebb-6257-416210f1d06a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000130" startTime="2024-04-30T15:10:41.3666126-04:00" endTime="2024-04-30T15:10:41.3666127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81d34ed8-d54d-4125-8031-cc820fc831f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f87a48ac-92dd-488d-a20d-95e36d45e4f8" testId="b25ebda1-4b3c-28c9-1391-287108f504d3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3589721-04:00" endTime="2024-04-30T15:10:41.3589722-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f87a48ac-92dd-488d-a20d-95e36d45e4f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="738fac98-59ac-41ca-b321-44772b2833e3" testId="169bf705-1531-8bca-9199-1d46e1ec91be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3671685-04:00" endTime="2024-04-30T15:10:41.3671686-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="738fac98-59ac-41ca-b321-44772b2833e3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5edd46d-311a-4c0a-b3d4-2e82a0e191aa" testId="197ebdfc-76e5-dfeb-06e3-1b0a7c3659ad" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3381229-04:00" endTime="2024-04-30T15:10:41.3381230-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5edd46d-311a-4c0a-b3d4-2e82a0e191aa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e767a8a-5c87-41ad-be6a-84a2f42b9ba6" testId="9358d858-0d07-2f3f-113a-093c5e394e23" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3105517-04:00" endTime="2024-04-30T15:10:41.3105517-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e767a8a-5c87-41ad-be6a-84a2f42b9ba6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="752d41e1-50b5-47c4-9959-607ddb444153" testId="726ca4fb-3893-04da-0600-871c1729012b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3645109-04:00" endTime="2024-04-30T15:10:41.3645110-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="752d41e1-50b5-47c4-9959-607ddb444153">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86a8bc82-f6ac-482c-a42a-c7abcf69bd61" testId="4a2e63ad-0b13-48be-aeee-82ae3969b847" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3665586-04:00" endTime="2024-04-30T15:10:41.3665586-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86a8bc82-f6ac-482c-a42a-c7abcf69bd61">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6047576-aa88-4ece-9654-4b56dff9a70d" testId="29c35deb-75a2-534f-343f-33dc1c8f67f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.3676343-04:00" endTime="2024-04-30T15:10:41.3676343-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6047576-aa88-4ece-9654-4b56dff9a70d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e425744-092b-4359-89e6-4e55fcf715f9" testId="9d887c0e-5a96-2997-eb6e-044c542c621b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3633657-04:00" endTime="2024-04-30T15:10:41.3633657-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e425744-092b-4359-89e6-4e55fcf715f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1cdc7ed1-e4ae-4be9-be89-d46ed0d24716" testId="5af78dd4-937b-3fc0-e9b3-723050c16094" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3625929-04:00" endTime="2024-04-30T15:10:41.3625930-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1cdc7ed1-e4ae-4be9-be89-d46ed0d24716">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4aa9c8a-b871-4371-9ca1-d69792135e29" testId="5df97783-014c-6ecb-c920-cc279e3b7cea" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3089176-04:00" endTime="2024-04-30T15:10:41.3089177-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4aa9c8a-b871-4371-9ca1-d69792135e29">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7bc296e-76e1-4608-a121-5516c35f1b42" testId="c6f85034-7c6b-d3a9-a00e-49934b44cff4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3702522-04:00" endTime="2024-04-30T15:10:41.3702522-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7bc296e-76e1-4608-a121-5516c35f1b42">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff22dcb4-1372-4028-b3d1-c2a5fe3a21fe" testId="6333b374-22b7-36b3-0dfd-8e04ada13077" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.2642821-04:00" endTime="2024-04-30T15:10:41.2642822-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff22dcb4-1372-4028-b3d1-c2a5fe3a21fe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="98d9a949-d459-4156-bbfc-c7e7795ffc59" testId="c8fe67bb-e07f-ae57-7127-7acdd649f324" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3804660-04:00" endTime="2024-04-30T15:10:41.3804660-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98d9a949-d459-4156-bbfc-c7e7795ffc59">
      <Output>
        <StdOut>Testing pair: '==reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef2cc2dc-f2f4-4f26-af1d-94aff3ecb14c" testId="75f3044b-b789-1838-3d52-c7c57e56d64b" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000069" startTime="2024-04-30T15:10:41.2539364-04:00" endTime="2024-04-30T15:10:41.2539365-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef2cc2dc-f2f4-4f26-af1d-94aff3ecb14c" />
    <UnitTestResult executionId="00745c9b-ae3c-431d-a768-6b30dec5370e" testId="79039be2-27c0-022a-c307-08b8bbdddbb6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2884652-04:00" endTime="2024-04-30T15:10:41.2884653-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00745c9b-ae3c-431d-a768-6b30dec5370e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="745f10c0-2689-48b0-a955-dbd0eb1f0ccd" testId="6d0b0f61-ebe7-5cf9-b1a9-e3ca8e742b39" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3557542-04:00" endTime="2024-04-30T15:10:41.3557542-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="745f10c0-2689-48b0-a955-dbd0eb1f0ccd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43c5894a-f0c1-4e30-b4a9-fe704b12924d" testId="d4c28988-d268-5c5b-b062-da0832d7c71d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.3024218-04:00" endTime="2024-04-30T15:10:41.3024218-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43c5894a-f0c1-4e30-b4a9-fe704b12924d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78993d55-6ab1-4b9f-b6b3-75e62202263d" testId="a11ac9c0-8c68-345b-004b-14455897dd3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2993701-04:00" endTime="2024-04-30T15:10:41.2993702-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78993d55-6ab1-4b9f-b6b3-75e62202263d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff4dca96-ea00-44f5-b100-fad797944df0" testId="6233d8b9-2b76-27bf-f094-7967368b8f2d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3761618-04:00" endTime="2024-04-30T15:10:41.3761618-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff4dca96-ea00-44f5-b100-fad797944df0">
      <Output>
        <StdOut>Testing pair: '=reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d5e6979-b88c-4462-aaff-8dc43313532a" testId="8fb3ef76-c78e-5994-60a3-484b8e103b71" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3159101-04:00" endTime="2024-04-30T15:10:41.3159101-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d5e6979-b88c-4462-aaff-8dc43313532a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ce38daf-8852-4a7e-825f-aa902e5d0340" testId="6e74c94c-91f7-ba0b-a90c-45d0e8e84c53" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000109" startTime="2024-04-30T15:10:41.2771846-04:00" endTime="2024-04-30T15:10:41.2771846-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ce38daf-8852-4a7e-825f-aa902e5d0340">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="96761132-7feb-44e1-8fc2-0d3ddfa94ff2" testId="424851ad-c809-0399-24ec-9fa1c9512f77" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3752969-04:00" endTime="2024-04-30T15:10:41.3752970-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96761132-7feb-44e1-8fc2-0d3ddfa94ff2">
      <Output>
        <StdOut>Testing pair: ')!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76cd6e57-0fd1-4b67-9770-e53f3758bb71" testId="da871efc-364e-61ac-f0a1-3aab93ca62e0" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2660442-04:00" endTime="2024-04-30T15:10:41.2660442-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76cd6e57-0fd1-4b67-9770-e53f3758bb71" />
    <UnitTestResult executionId="717ac29a-8572-4b1a-82a2-096a0842a9b7" testId="5b94f1a0-7eae-1775-a1ae-6821c88655a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2892602-04:00" endTime="2024-04-30T15:10:41.2892603-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="717ac29a-8572-4b1a-82a2-096a0842a9b7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18c9354b-bd2f-4c0f-8222-493752d7f197" testId="a3ef1e61-66fe-7efd-3646-5d7d477cc23a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2879711-04:00" endTime="2024-04-30T15:10:41.2879711-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18c9354b-bd2f-4c0f-8222-493752d7f197">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee1c694c-587a-4048-b451-e6814e785cc2" testId="6832806a-cbaf-2811-b635-075797f068e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3672656-04:00" endTime="2024-04-30T15:10:41.3672657-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee1c694c-587a-4048-b451-e6814e785cc2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1506e42f-6610-43a6-a993-eb2d0e0567a7" testId="62167bdc-d7b7-8393-6381-609ce2f273c5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3548573-04:00" endTime="2024-04-30T15:10:41.3548574-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1506e42f-6610-43a6-a993-eb2d0e0567a7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a925f26-e8b0-406d-aec6-9bf701196eb3" testId="08437775-c8ec-b30c-cbcf-8fabbacbc360" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3095404-04:00" endTime="2024-04-30T15:10:41.3095404-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a925f26-e8b0-406d-aec6-9bf701196eb3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b68c56f7-ecf1-4971-90fb-c07b531c8f88" testId="53c0e48f-b680-9e78-bd30-f5a0f8485756" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3682411-04:00" endTime="2024-04-30T15:10:41.3682411-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b68c56f7-ecf1-4971-90fb-c07b531c8f88">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a34ae72-894a-4ab9-9219-7348836932d9" testId="71c23423-a394-0657-0020-e7186fb816de" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2885552-04:00" endTime="2024-04-30T15:10:41.2885552-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a34ae72-894a-4ab9-9219-7348836932d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9eb097bc-3b37-4f3f-9d2a-594d9c232dc1" testId="5577a1fc-99b3-793c-96f8-f70622e39fce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3333588-04:00" endTime="2024-04-30T15:10:41.3333588-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9eb097bc-3b37-4f3f-9d2a-594d9c232dc1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2f94dc9-eceb-4886-9979-5556fd337248" testId="8a79d212-16c2-eefd-a8cd-5f4d4c9edc7b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.3043866-04:00" endTime="2024-04-30T15:10:41.3043866-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2f94dc9-eceb-4886-9979-5556fd337248">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03c29a89-8675-4428-be11-bafd3978e034" testId="aac1a977-b439-6f21-ea6e-6d2600155d96" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2834720-04:00" endTime="2024-04-30T15:10:41.2834720-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03c29a89-8675-4428-be11-bafd3978e034">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2311ef3-679b-4a29-b7ff-ec3b62bbeb9e" testId="061e2812-c4c1-0b99-48d8-b0161b9d4f0a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3336884-04:00" endTime="2024-04-30T15:10:41.3336885-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2311ef3-679b-4a29-b7ff-ec3b62bbeb9e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d2e14d0-2be6-4db8-b03b-fd1498e67d52" testId="02daa515-0baa-3d23-4865-c9f46b713f00" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2553033-04:00" endTime="2024-04-30T15:10:41.2553034-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d2e14d0-2be6-4db8-b03b-fd1498e67d52">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6fbb8dfa-a142-48e9-a45b-b737a94c6f5f" testId="08b590dc-717c-c757-b69b-ebcc9e0d3001" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000230" startTime="2024-04-30T15:10:41.2553524-04:00" endTime="2024-04-30T15:10:41.2553525-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6fbb8dfa-a142-48e9-a45b-b737a94c6f5f" />
    <UnitTestResult executionId="c7f62d7a-6ada-4500-8cfa-302b86e073e1" testId="93fc0752-902f-5bcb-e0fa-6552707ecb89" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2767019-04:00" endTime="2024-04-30T15:10:41.2767020-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7f62d7a-6ada-4500-8cfa-302b86e073e1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d446419-4b45-4978-9dfa-18a7db4ecbaa" testId="93b8eed8-29c2-1c92-494a-ce2d96c118a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.2963439-04:00" endTime="2024-04-30T15:10:41.2963439-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d446419-4b45-4978-9dfa-18a7db4ecbaa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f71490b5-3f27-46a7-a4c4-ed8892edb4f2" testId="c4b0977e-9ef8-fe01-8470-cc65adfa6479" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000110" startTime="2024-04-30T15:10:41.3734721-04:00" endTime="2024-04-30T15:10:41.3734721-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f71490b5-3f27-46a7-a4c4-ed8892edb4f2">
      <Output>
        <StdOut>Testing pair: '+False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="41502724-abe5-4ed1-95dc-642d2b7cbb55" testId="b4ab7874-07aa-12e3-0e1f-94d137641bd8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3776205-04:00" endTime="2024-04-30T15:10:41.3776205-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41502724-abe5-4ed1-95dc-642d2b7cbb55">
      <Output>
        <StdOut>Testing pair: '123*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a217fc40-66d7-4f5d-a2e7-fd1d73990f9e" testId="87f39797-68dc-dbab-5c1e-3ada9f9086b3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.2752506-04:00" endTime="2024-04-30T15:10:41.2752507-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a217fc40-66d7-4f5d-a2e7-fd1d73990f9e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23a66165-7160-4125-b649-15558886d5a3" testId="7e8de1eb-1662-6184-f0bc-9c16a38c2d75" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3537968-04:00" endTime="2024-04-30T15:10:41.3537968-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23a66165-7160-4125-b649-15558886d5a3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a9b2acc8-fe11-4c6c-a226-dfff9f3112f4" testId="f5e14e2f-3aaf-3da1-227f-3529cd4c7ef1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2994233-04:00" endTime="2024-04-30T15:10:41.2994234-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9b2acc8-fe11-4c6c-a226-dfff9f3112f4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="72f8e67d-ed11-4bde-b2fc-ebcf10689a23" testId="602c134c-5ea5-0e84-368a-fc20e9d21bd1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2698315-04:00" endTime="2024-04-30T15:10:41.2698315-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72f8e67d-ed11-4bde-b2fc-ebcf10689a23">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d250a6cf-1338-4cf6-b74d-d63f776b400f" testId="06f6a57a-9244-7cf8-9188-784e694af20f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3544326-04:00" endTime="2024-04-30T15:10:41.3544327-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d250a6cf-1338-4cf6-b74d-d63f776b400f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ca26364-6c5b-4255-a4a1-46e582e6d3d6" testId="dbbb5b12-4ed3-ae86-d182-b6988ce3b545" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: CloseParenthesisToken, text: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3860264-04:00" endTime="2024-04-30T15:10:41.3860265-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ca26364-6c5b-4255-a4a1-46e582e6d3d6">
      <Output>
        <StdOut>Expected kind: CloseParenthesisToken, Actual kind: CloseParenthesisToken&#xD;
Expected text: ')', Actual text: ')'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5dc45993-c856-4ff4-bd6e-8492c13bc7f7" testId="341c6df6-31bb-cf23-c657-8a478320087e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.2665794-04:00" endTime="2024-04-30T15:10:41.2665795-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5dc45993-c856-4ff4-bd6e-8492c13bc7f7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c613d2d8-324d-46ac-b2be-40d717f5497d" testId="b8dd36c6-6b29-c1ea-736f-fc398db6aca0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2870337-04:00" endTime="2024-04-30T15:10:41.2870338-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c613d2d8-324d-46ac-b2be-40d717f5497d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25a24f8c-2b42-4bb9-b534-a5e6462436ef" testId="6129cd43-f48b-d030-16f7-338898240e78" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2756825-04:00" endTime="2024-04-30T15:10:41.2756825-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25a24f8c-2b42-4bb9-b534-a5e6462436ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bfca530a-895f-419c-8f5c-59d057163e4a" testId="86730318-5043-b157-22c1-f1a0d72833ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000230" startTime="2024-04-30T15:10:41.2712143-04:00" endTime="2024-04-30T15:10:41.2712143-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bfca530a-895f-419c-8f5c-59d057163e4a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac4de603-5ac3-4bc9-84d8-98a62b383454" testId="fc2c025d-7ef7-f2f4-eacc-c40844896fc5" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2717741-04:00" endTime="2024-04-30T15:10:41.2717741-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac4de603-5ac3-4bc9-84d8-98a62b383454" />
    <UnitTestResult executionId="11b5769f-afcd-4396-8836-94cb238e9455" testId="8249eb7c-b8d5-e989-66ea-d4cd9188c4c7" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) is 12&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000280" startTime="2024-04-30T15:10:41.2717127-04:00" endTime="2024-04-30T15:10:41.2717127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11b5769f-afcd-4396-8836-94cb238e9455" />
    <UnitTestResult executionId="7daf6ee4-9eb0-46bb-acac-bfce61811145" testId="cc3ba808-cc9c-3027-c16a-9cd32c8dde28" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.3816597-04:00" endTime="2024-04-30T15:10:41.3816598-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7daf6ee4-9eb0-46bb-acac-bfce61811145">
      <Output>
        <StdOut>Testing pair: '*a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f41490b2-55e7-487f-af9b-93e8e39bb604" testId="17613e44-024e-e7b3-42f3-9d0366f34f49" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3073733-04:00" endTime="2024-04-30T15:10:41.3073734-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f41490b2-55e7-487f-af9b-93e8e39bb604">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d6ba43e-86ac-41cb-9cde-be69ddc72642" testId="f5efb945-4cbc-fc8b-c033-2133940017ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2831775-04:00" endTime="2024-04-30T15:10:41.2831775-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d6ba43e-86ac-41cb-9cde-be69ddc72642">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5fb7f8a5-8127-4276-9077-d225409cb29d" testId="668d4a85-5931-6d95-ecaf-98d580c86473" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.3686740-04:00" endTime="2024-04-30T15:10:41.3686740-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5fb7f8a5-8127-4276-9077-d225409cb29d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="328a6d1c-3813-4a5d-a288-42e724394749" testId="5165c077-3975-ce69-53f9-299aac70d090" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000192" startTime="2024-04-30T15:10:41.2666150-04:00" endTime="2024-04-30T15:10:41.2666150-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="328a6d1c-3813-4a5d-a288-42e724394749" />
    <UnitTestResult executionId="82329c50-061a-4e73-8464-536f78ef2279" testId="b2e2b613-9e61-1dfd-2dfa-ee963b6908bc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2983847-04:00" endTime="2024-04-30T15:10:41.2983848-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82329c50-061a-4e73-8464-536f78ef2279">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43ef2720-4e06-443f-8431-df60281fa5ab" testId="0ce1ea39-5eeb-f3a2-6e84-cb6522947fb5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3138732-04:00" endTime="2024-04-30T15:10:41.3138733-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43ef2720-4e06-443f-8431-df60281fa5ab">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b47cb17a-43aa-438d-970c-a41a2b1db75f" testId="092b54aa-5a8b-523e-4c62-6753045fcc57" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3352344-04:00" endTime="2024-04-30T15:10:41.3352344-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b47cb17a-43aa-438d-970c-a41a2b1db75f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3190846e-f02e-4a54-a243-22205994b2d7" testId="4d086f8a-d319-8719-3091-bebdc9937485" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3727759-04:00" endTime="2024-04-30T15:10:41.3727759-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3190846e-f02e-4a54-a243-22205994b2d7">
      <Output>
        <StdOut>Testing pair: '-or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c8fb37c-52a4-4a48-b746-f0562588a69b" testId="85f93516-3e4f-26f0-d82b-c7951d8e363b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3861496-04:00" endTime="2024-04-30T15:10:41.3861497-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c8fb37c-52a4-4a48-b746-f0562588a69b">
      <Output>
        <StdOut>Expected kind: IdentifierToken, Actual kind: IdentifierToken&#xD;
Expected text: 'reday', Actual text: 'reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="612a83f4-1ea3-48a0-ad1a-da8115917edd" testId="206d99a8-15ed-4aa6-480c-aa2d34516e87" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000105" startTime="2024-04-30T15:10:41.3318579-04:00" endTime="2024-04-30T15:10:41.3318580-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="612a83f4-1ea3-48a0-ad1a-da8115917edd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6cf54ac-5663-419c-ac8d-1b3e2f0eb7b2" testId="4607fc25-5f3e-02ab-2368-fe4effa0021c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.3024477-04:00" endTime="2024-04-30T15:10:41.3024477-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6cf54ac-5663-419c-ac8d-1b3e2f0eb7b2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="026bfb81-74fd-4439-9b44-dec17cccec0f" testId="10d908b4-9bb8-ad9e-8b05-f34d17043a16" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000187" startTime="2024-04-30T15:10:41.2630204-04:00" endTime="2024-04-30T15:10:41.2630205-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="026bfb81-74fd-4439-9b44-dec17cccec0f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8982c6d-8b3d-4360-9f68-636f43208e93" testId="8d3c66f8-547f-5cc9-11eb-8ad9089acb74" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3453913-04:00" endTime="2024-04-30T15:10:41.3453913-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8982c6d-8b3d-4360-9f68-636f43208e93">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d1811388-57c7-4261-99a8-e65d0d1982cd" testId="91d4c3fc-9d5d-e52a-0805-b3dfd0aef057" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.3828304-04:00" endTime="2024-04-30T15:10:41.3828305-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d1811388-57c7-4261-99a8-e65d0d1982cd">
      <Output>
        <StdOut>Testing pair: '+loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a773332f-51bf-411e-b159-36507c666609" testId="b9a2657e-4643-a783-3ba9-56116fd67eb7" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True is not False&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2742630-04:00" endTime="2024-04-30T15:10:41.2742631-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a773332f-51bf-411e-b159-36507c666609" />
    <UnitTestResult executionId="c69edf40-cfff-49f5-bb64-2e4b18c659f5" testId="6cb7f061-0d12-3d89-0d49-8156712b5230" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3509804-04:00" endTime="2024-04-30T15:10:41.3509805-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c69edf40-cfff-49f5-bb64-2e4b18c659f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ebc2c2e7-e4f3-4682-9369-1012ded5b2b2" testId="c976687f-2997-76e6-8bfe-ecba1890fc88" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3119060-04:00" endTime="2024-04-30T15:10:41.3119060-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ebc2c2e7-e4f3-4682-9369-1012ded5b2b2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5823da90-8fca-4918-9b3d-1661ead3a024" testId="8f1eceb5-b579-426f-37c4-b8e03cc54c8c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000208" startTime="2024-04-30T15:10:41.2926952-04:00" endTime="2024-04-30T15:10:41.2926952-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5823da90-8fca-4918-9b3d-1661ead3a024">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10099af2-c9d0-488e-8362-8e79fef6e4dc" testId="84ddbf26-1b53-934a-88ab-06ef3d3994f5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2767292-04:00" endTime="2024-04-30T15:10:41.2767293-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10099af2-c9d0-488e-8362-8e79fef6e4dc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c0d7049-7c76-4864-bddf-274a353d64bf" testId="bd575521-b575-59cd-62f3-6b0ca4653cef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2927493-04:00" endTime="2024-04-30T15:10:41.2927493-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c0d7049-7c76-4864-bddf-274a353d64bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4e94ded5-eef0-4ae2-ae01-508263e3b8ed" testId="a3895574-3df4-7edc-1d73-355359de381f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3133742-04:00" endTime="2024-04-30T15:10:41.3133742-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e94ded5-eef0-4ae2-ae01-508263e3b8ed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8c9979c-47f2-44bf-a62f-c83037ba243d" testId="f9fae981-ec1e-2bcf-ff96-35d378008be4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3435834-04:00" endTime="2024-04-30T15:10:41.3435835-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8c9979c-47f2-44bf-a62f-c83037ba243d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8dad3bda-41fe-4295-a376-1ff74f232e16" testId="5f679b46-e8aa-1a62-032b-1e8afc34f3f3" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;+1&quot;, expectedValue: 1)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2739657-04:00" endTime="2024-04-30T15:10:41.2739658-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8dad3bda-41fe-4295-a376-1ff74f232e16" />
    <UnitTestResult executionId="16a81b0d-1c95-4ba4-acf7-e734ab5fc7f9" testId="c5b778be-6e83-f281-6cd5-ab477ee137d4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000208" startTime="2024-04-30T15:10:41.2757379-04:00" endTime="2024-04-30T15:10:41.2757379-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16a81b0d-1c95-4ba4-acf7-e734ab5fc7f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f3f48c22-ce44-4aa4-9ebb-2e15fc715e56" testId="8e3fad4d-039a-1dd9-3b43-d463580797c4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000215" startTime="2024-04-30T15:10:41.2916629-04:00" endTime="2024-04-30T15:10:41.2916629-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3f48c22-ce44-4aa4-9ebb-2e15fc715e56">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb956a8f-53d4-4eb1-b347-c7a9153d3047" testId="a274f952-322c-df98-4865-9404d7d16948" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.3033629-04:00" endTime="2024-04-30T15:10:41.3033630-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb956a8f-53d4-4eb1-b347-c7a9153d3047">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc513824-973a-4438-adbb-0fce3bb23117" testId="915b5763-ff6e-5eea-f3ee-32d5aaddbfca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2957868-04:00" endTime="2024-04-30T15:10:41.2957868-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc513824-973a-4438-adbb-0fce3bb23117">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac924d39-4de8-4854-ace5-a4645a8ec06a" testId="b877794c-3770-b355-c32f-dce9c57fddd3" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2624735-04:00" endTime="2024-04-30T15:10:41.2624736-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac924d39-4de8-4854-ace5-a4645a8ec06a" />
    <UnitTestResult executionId="6ac7d70f-cb83-4843-b7b1-48628a3e44cc" testId="56a6b98d-130b-75fa-a155-2a7efaba2b9a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3580783-04:00" endTime="2024-04-30T15:10:41.3580783-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ac7d70f-cb83-4843-b7b1-48628a3e44cc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f00da08b-3136-4239-bc35-d83832162019" testId="fdef38ce-592a-5759-69d8-c660f97f4980" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.2651644-04:00" endTime="2024-04-30T15:10:41.2651644-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f00da08b-3136-4239-bc35-d83832162019">
      <Output>
        <StdOut>Testing pair with explicit separator: '= =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcca43a8-e0bd-44b3-8bec-cb10403f093e" testId="163d1b5f-20c7-4bac-0d06-8efaf06e137e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3832312-04:00" endTime="2024-04-30T15:10:41.3832313-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcca43a8-e0bd-44b3-8bec-cb10403f093e">
      <Output>
        <StdOut>Testing pair: ')is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91b85773-d91e-4752-b8a8-960c62e5bb4e" testId="41263061-629f-5122-b60d-99058ccfaff5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3483847-04:00" endTime="2024-04-30T15:10:41.3483848-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91b85773-d91e-4752-b8a8-960c62e5bb4e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="859fe6a5-cc66-4f0f-bdcd-238816f715cd" testId="e1b1655f-3653-9fc6-4fe1-c9fa27e45637" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3814663-04:00" endTime="2024-04-30T15:10:41.3814664-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="859fe6a5-cc66-4f0f-bdcd-238816f715cd">
      <Output>
        <StdOut>Testing pair: '!=True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="70fca1b2-985b-48b4-ab71-13e34b6bb30a" testId="687e5322-01f1-9d5d-f26f-28aec86ac293" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3386661-04:00" endTime="2024-04-30T15:10:41.3386662-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70fca1b2-985b-48b4-ab71-13e34b6bb30a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45b89ad8-13e9-4ee5-a132-4d4aec3e35b5" testId="f34e8549-0c42-c0ce-c742-9cdb34e9330f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3734987-04:00" endTime="2024-04-30T15:10:41.3734988-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45b89ad8-13e9-4ee5-a132-4d4aec3e35b5">
      <Output>
        <StdOut>Testing pair: '/('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e37eccf0-3132-45ae-a1e7-b2c301451893" testId="305ab289-63c9-dc7a-94ee-e12e94beefc7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3734201-04:00" endTime="2024-04-30T15:10:41.3734202-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e37eccf0-3132-45ae-a1e7-b2c301451893">
      <Output>
        <StdOut>Testing pair: '-True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f84a8c2-d723-4d6f-9a2c-2cf17f1d82b8" testId="d0f560ef-6fee-6530-f893-9a03bb1b295c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3766937-04:00" endTime="2024-04-30T15:10:41.3766937-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f84a8c2-d723-4d6f-9a2c-2cf17f1d82b8">
      <Output>
        <StdOut>Testing pair: '-*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c3388f5-1e50-4fa0-8fea-50c82d0d7647" testId="84ef0cbc-5ccd-bdcf-51be-bf8e0949419b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2968822-04:00" endTime="2024-04-30T15:10:41.2968823-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c3388f5-1e50-4fa0-8fea-50c82d0d7647">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ce03861-dd19-4f96-8c4a-6c70bb7cb584" testId="ca73f45c-2676-b873-1d67-02d75f9f9f9f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3284784-04:00" endTime="2024-04-30T15:10:41.3284785-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ce03861-dd19-4f96-8c4a-6c70bb7cb584">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a03af614-25f8-4cb8-8226-d92cbee67d99" testId="9dcbe424-2b05-0810-210e-b35bf8018560" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000123" startTime="2024-04-30T15:10:41.3135476-04:00" endTime="2024-04-30T15:10:41.3135477-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a03af614-25f8-4cb8-8226-d92cbee67d99">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd61da1d-a651-4660-82e7-f992046f6439" testId="3234bdc2-05e2-289b-97f6-8014bd833090" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000122" startTime="2024-04-30T15:10:41.3651027-04:00" endTime="2024-04-30T15:10:41.3651027-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd61da1d-a651-4660-82e7-f992046f6439">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5ae48fe-1ad4-4fa6-be73-044e077bf23f" testId="b1cd69bd-831a-1a3f-0980-06fec185e5e1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3067300-04:00" endTime="2024-04-30T15:10:41.3067301-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5ae48fe-1ad4-4fa6-be73-044e077bf23f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce902f76-7552-4e53-a4e1-6ea2e6386b15" testId="6e55291f-b54a-15bb-9d0e-2b78c679e2a1" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0004520" startTime="2024-04-30T15:10:41.2531167-04:00" endTime="2024-04-30T15:10:41.2531168-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce902f76-7552-4e53-a4e1-6ea2e6386b15" />
    <UnitTestResult executionId="a2734d3b-1d9a-4fdf-8a06-5c624f7a9bf9" testId="1ca096ea-3b45-67a2-0cb9-d39c1c31e8db" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3526246-04:00" endTime="2024-04-30T15:10:41.3526246-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2734d3b-1d9a-4fdf-8a06-5c624f7a9bf9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9cc465fe-0e0b-4558-b237-f53ef031f695" testId="9deb4dc9-04d2-aa36-e34a-e2b267734126" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3538462-04:00" endTime="2024-04-30T15:10:41.3538463-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9cc465fe-0e0b-4558-b237-f53ef031f695">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd3ff555-bc67-4422-afce-25c7c0d9ee93" testId="4fdacdee-a8e5-4ae5-b7b1-0dac130a9628" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3163573-04:00" endTime="2024-04-30T15:10:41.3163573-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd3ff555-bc67-4422-afce-25c7c0d9ee93">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b9a4ee8-afa2-4ed2-bc13-0bcedc220824" testId="ac25f40d-39b0-a819-0d3c-3c1118a21938" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3425146-04:00" endTime="2024-04-30T15:10:41.3425146-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b9a4ee8-afa2-4ed2-bc13-0bcedc220824">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65aa8fe4-073f-44f5-ba2b-b733cec057a9" testId="e3cd12a9-19e3-aa4d-48c8-bff04da64316" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3762663-04:00" endTime="2024-04-30T15:10:41.3762664-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65aa8fe4-073f-44f5-ba2b-b733cec057a9">
      <Output>
        <StdOut>Testing pair: '-a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9680b32-46bc-46ff-b4db-46ecdf2766ad" testId="83c99561-3919-8987-c084-63ffa77ddba6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2902201-04:00" endTime="2024-04-30T15:10:41.2902201-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9680b32-46bc-46ff-b4db-46ecdf2766ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62dab833-34fe-4f05-a407-d1b95f1ead70" testId="5a3f14fa-861a-97e1-92a5-516888056496" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3607866-04:00" endTime="2024-04-30T15:10:41.3607866-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62dab833-34fe-4f05-a407-d1b95f1ead70">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="19159ccb-35da-441a-bd04-2fbe637251bd" testId="8f67854d-8914-4da1-fd11-d2897634ef0d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3357952-04:00" endTime="2024-04-30T15:10:41.3357952-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19159ccb-35da-441a-bd04-2fbe637251bd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7209dcfb-0696-42e5-98d7-5ea5ac24e98c" testId="790420ce-dec3-eb6e-8248-7f17368d93bc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3664984-04:00" endTime="2024-04-30T15:10:41.3664985-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7209dcfb-0696-42e5-98d7-5ea5ac24e98c">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa04e6a5-17ae-4df7-a2a7-b8b411619c06" testId="ed347eee-50cf-246f-7b24-33c602d5ae12" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3709110-04:00" endTime="2024-04-30T15:10:41.3709110-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa04e6a5-17ae-4df7-a2a7-b8b411619c06">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="24b367e4-4f77-43b4-abb3-435e9907d030" testId="101906b0-6af5-135e-61e4-0c0935fe0265" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000195" startTime="2024-04-30T15:10:41.3281625-04:00" endTime="2024-04-30T15:10:41.3281626-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24b367e4-4f77-43b4-abb3-435e9907d030">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a041d8d8-fd75-4815-b6b2-7e664a4c280b" testId="d2bca085-7c67-7a1a-4bdf-2f4dc33da277" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2752779-04:00" endTime="2024-04-30T15:10:41.2752779-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a041d8d8-fd75-4815-b6b2-7e664a4c280b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="030941c4-8880-4493-8d34-32a99313ca8c" testId="b6512430-411e-65c0-b613-a1a83692b99c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.3029788-04:00" endTime="2024-04-30T15:10:41.3029788-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="030941c4-8880-4493-8d34-32a99313ca8c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec6b595f-0870-42f0-8000-0fdf0044d23a" testId="99a93807-9ccc-aec3-dc6a-ad36cd077f16" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 10) * x&quot;, expectedValue: 100)" computerName="BRUNO" duration="00:00:00.0022236" startTime="2024-04-30T15:10:41.2699442-04:00" endTime="2024-04-30T15:10:41.2699443-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec6b595f-0870-42f0-8000-0fdf0044d23a" />
    <UnitTestResult executionId="ddcd3cbd-e582-48a9-a6bd-878ec8bb3372" testId="51d59be4-7d59-dc12-37f4-0aae3349a615" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;8 - 2&quot;, expectedValue: 6)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.2734281-04:00" endTime="2024-04-30T15:10:41.2734282-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddcd3cbd-e582-48a9-a6bd-878ec8bb3372" />
    <UnitTestResult executionId="7591ec9a-c487-477e-a555-3cfb965061d4" testId="14bac60f-04ef-5b16-0736-1c995275d1c2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2903103-04:00" endTime="2024-04-30T15:10:41.2903103-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7591ec9a-c487-477e-a555-3cfb965061d4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="027cd8d6-c838-4782-aa07-f6f9a68a8c91" testId="e66a33ba-f11b-65a0-880d-89261eebf08b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3043600-04:00" endTime="2024-04-30T15:10:41.3043601-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="027cd8d6-c838-4782-aa07-f6f9a68a8c91">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ac1afb4-8896-45ad-9625-4875372204d8" testId="a70b3d60-f4af-e58a-9314-8f0b47cd8cbc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.2896930-04:00" endTime="2024-04-30T15:10:41.2896931-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ac1afb4-8896-45ad-9625-4875372204d8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14b6beb1-239c-4732-a1f7-31bc5e74e132" testId="d538811e-7b8f-10fc-243e-1ab214d5bf95" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3067704-04:00" endTime="2024-04-30T15:10:41.3067704-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14b6beb1-239c-4732-a1f7-31bc5e74e132">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aeff57e6-192f-4b82-a154-2212dc4cb0e0" testId="582fd368-2777-2b54-c1ec-a082802a6686" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True or False and True&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.2746953-04:00" endTime="2024-04-30T15:10:41.2746954-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aeff57e6-192f-4b82-a154-2212dc4cb0e0" />
    <UnitTestResult executionId="55a15823-f33a-4b19-825f-4e9086a62077" testId="b8fcae20-fa53-2a74-662a-8f6aec8a4e12" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3013231-04:00" endTime="2024-04-30T15:10:41.3013231-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55a15823-f33a-4b19-825f-4e9086a62077">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88b2a8d6-5546-4f29-8cdb-3fad4938fa2b" testId="5f77cb7d-81fe-c9c1-a6dd-feeea64d7b94" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3368237-04:00" endTime="2024-04-30T15:10:41.3368237-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88b2a8d6-5546-4f29-8cdb-3fad4938fa2b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32fa6e24-7eee-4fd9-9bb0-23adf7d7ecf3" testId="d6ac5a1d-7351-5915-72c3-f27b40ed69b3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3465786-04:00" endTime="2024-04-30T15:10:41.3465786-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32fa6e24-7eee-4fd9-9bb0-23adf7d7ecf3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04decfa2-fbd5-4246-9468-976cdca78824" testId="6875a23a-9cac-89fe-db7e-e30b56441756" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3129553-04:00" endTime="2024-04-30T15:10:41.3129553-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04decfa2-fbd5-4246-9468-976cdca78824">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7949e48e-4d12-4539-bfbc-8096faa9081e" testId="af6465da-40cf-364b-3bda-a17184c621fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.3831653-04:00" endTime="2024-04-30T15:10:41.3831653-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7949e48e-4d12-4539-bfbc-8096faa9081e">
      <Output>
        <StdOut>Testing pair: '+or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="264dd7d9-b2d3-44f9-9bfd-18ec6a448811" testId="ffcb725d-0463-cbeb-e70c-8b29fe642664" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3301462-04:00" endTime="2024-04-30T15:10:41.3301463-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="264dd7d9-b2d3-44f9-9bfd-18ec6a448811">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="161c4051-eff0-43c8-b624-18b563f0163c" testId="1a6ca602-1c90-deaa-3432-848fdeb65bb4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000140" startTime="2024-04-30T15:10:41.2891797-04:00" endTime="2024-04-30T15:10:41.2891797-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="161c4051-eff0-43c8-b624-18b563f0163c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5842a870-8b9d-45c3-8ff8-6ed16e280cd7" testId="1fbebd18-5659-e81b-997b-22463cfd278f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3633092-04:00" endTime="2024-04-30T15:10:41.3633092-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5842a870-8b9d-45c3-8ff8-6ed16e280cd7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e529173-9c70-4b71-b504-024cf0265af1" testId="32d68111-5fc2-d40d-1dcc-aeac84a1b029" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3489018-04:00" endTime="2024-04-30T15:10:41.3489019-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e529173-9c70-4b71-b504-024cf0265af1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4bb926b2-1a4a-48b8-8629-ba91289f0085" testId="de168e5d-654f-536a-50d8-310009d9a949" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3436475-04:00" endTime="2024-04-30T15:10:41.3436475-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bb926b2-1a4a-48b8-8629-ba91289f0085">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a5d7c59-6966-4e97-8b9d-c51be1fa8fee" testId="6ba528e1-21ff-98e2-b2ce-f2aa9f3e4554" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000238" startTime="2024-04-30T15:10:41.2720684-04:00" endTime="2024-04-30T15:10:41.2720684-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a5d7c59-6966-4e97-8b9d-c51be1fa8fee">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d912df7a-97b4-4dc2-a372-cdabb9effb6a" testId="4db8c771-8666-030d-43cd-077afcc871e8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000133" startTime="2024-04-30T15:10:41.3680718-04:00" endTime="2024-04-30T15:10:41.3680718-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d912df7a-97b4-4dc2-a372-cdabb9effb6a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c6b36f4-5390-4fa3-9b98-91dd0d9f5834" testId="22407006-8b61-9da1-2321-fe2679b6238f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3270206-04:00" endTime="2024-04-30T15:10:41.3270206-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c6b36f4-5390-4fa3-9b98-91dd0d9f5834">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="21ee39e3-8f62-4986-9c21-a405c7acc7d0" testId="5ee6ec60-7b9b-4393-a25f-cb03c018c52d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3130356-04:00" endTime="2024-04-30T15:10:41.3130356-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21ee39e3-8f62-4986-9c21-a405c7acc7d0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78aaf205-b41e-4c60-8537-eb3fe7efdc83" testId="9e48b2af-1dce-232e-e1fe-5c4721430113" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3281885-04:00" endTime="2024-04-30T15:10:41.3281886-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78aaf205-b41e-4c60-8537-eb3fe7efdc83">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25835111-17a2-44b5-9972-db037999b263" testId="bd648a34-57fd-f805-51cf-8347c539e2be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2856326-04:00" endTime="2024-04-30T15:10:41.2856327-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25835111-17a2-44b5-9972-db037999b263">
      <Output>
        <StdOut>Testing pair with explicit separator: '123	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07531379-8d8f-4ed5-afbe-9fe4e07165bf" testId="27f8ae5d-88ab-1e33-0095-6c7936818c2d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2896284-04:00" endTime="2024-04-30T15:10:41.2896284-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07531379-8d8f-4ed5-afbe-9fe4e07165bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fdb99b96-018e-4547-b46e-76c44e1ecbb0" testId="23d4be0b-8758-9fa2-973d-43bd9c9b81f1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3174849-04:00" endTime="2024-04-30T15:10:41.3174849-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdb99b96-018e-4547-b46e-76c44e1ecbb0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97c559b0-e152-4c0f-a417-941cb751254a" testId="0f7b3ee6-4ecd-1b4c-0541-8fb97e1df69e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2539730-04:00" endTime="2024-04-30T15:10:41.2539731-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97c559b0-e152-4c0f-a417-941cb751254a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac25cddd-8de5-456b-b8e9-ace4bcd9130a" testId="06c7b88a-f2ff-a2a4-4bf9-e03a3aec969e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3256496-04:00" endTime="2024-04-30T15:10:41.3256496-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac25cddd-8de5-456b-b8e9-ace4bcd9130a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb924eb9-eaf8-4029-b339-59692dd8c6d6" testId="ead2b41d-cb5e-6698-404a-f4013e5f8a6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3123416-04:00" endTime="2024-04-30T15:10:41.3123416-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb924eb9-eaf8-4029-b339-59692dd8c6d6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43bab953-f626-4da4-a6e3-46bae859b617" testId="4a90b4ef-fa83-2c4b-2f59-d5d74fc67a9b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2891508-04:00" endTime="2024-04-30T15:10:41.2891509-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43bab953-f626-4da4-a6e3-46bae859b617">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="edea6f70-9645-4306-b044-6b939303a8a5" testId="9390dbe4-f245-909b-539c-51ec2778d67d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3804128-04:00" endTime="2024-04-30T15:10:41.3804128-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edea6f70-9645-4306-b044-6b939303a8a5">
      <Output>
        <StdOut>Testing pair: ')=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2f620318-c935-4864-8dc9-7ef61d06b3ca" testId="777fcf8e-1d66-fb45-ddf5-695b552b306f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.3038865-04:00" endTime="2024-04-30T15:10:41.3038866-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f620318-c935-4864-8dc9-7ef61d06b3ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="290982e3-41be-4fae-b38f-80658067e2fc" testId="b26828a1-9f3b-9467-0912-2bc4297e7cc8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3347706-04:00" endTime="2024-04-30T15:10:41.3347707-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="290982e3-41be-4fae-b38f-80658067e2fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a44dd9b4-7928-44fa-9bd2-4828b65d59d2" testId="c0bee0aa-6a1c-f1e3-9a10-b90b2995d4d3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000206" startTime="2024-04-30T15:10:41.2937599-04:00" endTime="2024-04-30T15:10:41.2937599-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a44dd9b4-7928-44fa-9bd2-4828b65d59d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="052a84ae-65bf-4949-8a90-e6a08b5b1163" testId="2150454d-d84e-7ec3-e5ba-143fd6bcdeeb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.2908331-04:00" endTime="2024-04-30T15:10:41.2908332-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="052a84ae-65bf-4949-8a90-e6a08b5b1163">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5adb5881-7e79-473a-b6e1-57fedc6c2c9f" testId="b50cff92-a8ba-8ef2-db15-04f14f76857a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3480435-04:00" endTime="2024-04-30T15:10:41.3480436-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5adb5881-7e79-473a-b6e1-57fedc6c2c9f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac5391d7-8c5a-46ca-8c96-0570276a9e01" testId="8b68a73a-2978-36f7-3551-24c6ba58d561" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.3815561-04:00" endTime="2024-04-30T15:10:41.3815562-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac5391d7-8c5a-46ca-8c96-0570276a9e01">
      <Output>
        <StdOut>Testing pair: '/a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7c57666a-7f5f-4413-bdf3-f0c801a933ed" testId="b9c52dcd-a3c8-9f5f-68d1-ff1ab85741b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3044664-04:00" endTime="2024-04-30T15:10:41.3044664-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c57666a-7f5f-4413-bdf3-f0c801a933ed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43188dc9-b9f3-427e-9968-5ff85c9c3bbe" testId="16d3b7e8-d9a4-415c-9c79-fb494ced8e8e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2652440-04:00" endTime="2024-04-30T15:10:41.2652440-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43188dc9-b9f3-427e-9968-5ff85c9c3bbe">
      <Output>
        <StdOut>Testing pair with explicit separator: '==
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6325983-a7a6-4aae-b131-650dae5f7453" testId="5ef777a3-8eb2-d44e-c06d-6656c44532c3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3636799-04:00" endTime="2024-04-30T15:10:41.3636799-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6325983-a7a6-4aae-b131-650dae5f7453">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce664204-28dd-4a52-9ab6-5d803f547ca9" testId="b5f309eb-034b-6a37-aadd-a92858c9ef26" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3822806-04:00" endTime="2024-04-30T15:10:41.3822806-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce664204-28dd-4a52-9ab6-5d803f547ca9">
      <Output>
        <StdOut>Testing pair: '/!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c606166-ccda-4331-a57a-e2cf0e8ba7a2" testId="2a6ee734-8030-4355-c909-3b14d4eaaa0d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3728357-04:00" endTime="2024-04-30T15:10:41.3728358-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c606166-ccda-4331-a57a-e2cf0e8ba7a2">
      <Output>
        <StdOut>Testing pair: '!==='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="509867f7-fa26-4a34-91f9-ae1c30ac9e55" testId="0d1b0779-71c8-303b-6f41-377cde531eb2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3536938-04:00" endTime="2024-04-30T15:10:41.3536939-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="509867f7-fa26-4a34-91f9-ae1c30ac9e55">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8042789-26cf-43eb-8deb-556a578526ec" testId="51833e43-be4c-fbf7-4e24-a0606ab2da05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3717949-04:00" endTime="2024-04-30T15:10:41.3717949-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8042789-26cf-43eb-8deb-556a578526ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5004170c-bd9e-462e-9b8d-645e7d2e5248" testId="94fffee1-97b0-86e7-30b6-edf1d25ab40e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000108" startTime="2024-04-30T15:10:41.3729459-04:00" endTime="2024-04-30T15:10:41.3729459-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5004170c-bd9e-462e-9b8d-645e7d2e5248">
      <Output>
        <StdOut>Testing pair: '+!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1463960a-695a-41d1-b504-c60da3bc15df" testId="7048cc11-4f28-654c-e5b9-ed4a9343880e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2879391-04:00" endTime="2024-04-30T15:10:41.2879391-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1463960a-695a-41d1-b504-c60da3bc15df">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd4e36e6-1bf3-4eea-8992-11aafab51e4e" testId="8ed41bb3-0b3c-3ecf-6d35-19d04ab90a4f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2880811-04:00" endTime="2024-04-30T15:10:41.2880811-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd4e36e6-1bf3-4eea-8992-11aafab51e4e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1273d465-5168-47f1-89cf-26c1fd2ebeb0" testId="eb2a4720-1008-c1ef-cc72-d43fb5a00805" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2678568-04:00" endTime="2024-04-30T15:10:41.2678568-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1273d465-5168-47f1-89cf-26c1fd2ebeb0" />
    <UnitTestResult executionId="866a7550-2fe1-4274-be13-f617c32302e8" testId="ef192430-313d-2db2-1482-b39c741ad812" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2942223-04:00" endTime="2024-04-30T15:10:41.2942223-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="866a7550-2fe1-4274-be13-f617c32302e8">
      <Output>
        <StdOut>Testing pair with explicit separator: '==   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b55386c4-6cab-496d-9847-39baea13b2c1" testId="d643e0ab-3cf2-e914-6054-4658a11ec459" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.2885264-04:00" endTime="2024-04-30T15:10:41.2885265-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b55386c4-6cab-496d-9847-39baea13b2c1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3378d846-b2c2-4db8-bf10-f7a63b20b961" testId="35538943-d80a-bd7c-6e38-f8afe172a1ae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2638859-04:00" endTime="2024-04-30T15:10:41.2638859-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3378d846-b2c2-4db8-bf10-f7a63b20b961">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23751e76-7ec7-4550-8df3-864a4c7ed8de" testId="6d69cc4b-bdcc-bd2a-1cfc-d03d16f548bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2963706-04:00" endTime="2024-04-30T15:10:41.2963707-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23751e76-7ec7-4550-8df3-864a4c7ed8de">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="46ede7a0-73cf-419d-acbe-a92f1fe8eb8b" testId="394db978-6072-84a4-ec1e-fb776cbf1410" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2989275-04:00" endTime="2024-04-30T15:10:41.2989276-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46ede7a0-73cf-419d-acbe-a92f1fe8eb8b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cde57e03-7663-4032-9fc7-c68bfb8abfe8" testId="9886ffd9-cc34-4f96-6272-cc7c353f348f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3815114-04:00" endTime="2024-04-30T15:10:41.3815114-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cde57e03-7663-4032-9fc7-c68bfb8abfe8">
      <Output>
        <StdOut>Testing pair: '!=not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6740c5fb-f62e-4ebb-9858-83904f87cbc6" testId="f76b4a7a-89d2-afc5-1032-a199a8eb90bf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.3656157-04:00" endTime="2024-04-30T15:10:41.3656158-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6740c5fb-f62e-4ebb-9858-83904f87cbc6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fee45d45-c01a-457a-9ba0-5c509390e348" testId="c3fa40d6-0a2a-f337-b7d8-7c80d2551175" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3271671-04:00" endTime="2024-04-30T15:10:41.3271672-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fee45d45-c01a-457a-9ba0-5c509390e348">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a624055-6a6c-4d84-b598-fc750e9bba58" testId="e2050e47-0b1b-92f2-ff4f-f8d0e320795e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3734459-04:00" endTime="2024-04-30T15:10:41.3734460-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a624055-6a6c-4d84-b598-fc750e9bba58">
      <Output>
        <StdOut>Testing pair: '(=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bcdc03e0-fc1e-4b09-808b-a44daf5b5ca4" testId="a20a62c2-26c8-5fc6-87a0-2633f9ac14b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000199" startTime="2024-04-30T15:10:41.3719390-04:00" endTime="2024-04-30T15:10:41.3719391-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bcdc03e0-fc1e-4b09-808b-a44daf5b5ca4">
      <Output>
        <StdOut>Testing pair: '*+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b80b4fd6-e30b-435b-9348-4c7aa21fa01e" testId="8a1910b6-7e6d-afa8-d25b-4a6b65ea8029" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3772586-04:00" endTime="2024-04-30T15:10:41.3772587-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b80b4fd6-e30b-435b-9348-4c7aa21fa01e">
      <Output>
        <StdOut>Testing pair: '123+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="89e463bc-7edd-409b-b05b-4a044efa43f9" testId="01a37e2e-edfc-b8ae-f8b8-af8165060569" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3472359-04:00" endTime="2024-04-30T15:10:41.3472359-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89e463bc-7edd-409b-b05b-4a044efa43f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ccf4f5d-65fa-4904-9810-a21d440f81a8" testId="48c3a4f4-590e-92e4-0df2-236652912d51" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2809325-04:00" endTime="2024-04-30T15:10:41.2809326-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ccf4f5d-65fa-4904-9810-a21d440f81a8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="440908d8-5ed6-4d8a-85f8-4e668d2e474e" testId="47752ca7-5b10-0993-2293-0dba21e5d245" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3388420-04:00" endTime="2024-04-30T15:10:41.3388421-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="440908d8-5ed6-4d8a-85f8-4e668d2e474e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ffd5bffd-0e1f-4c3d-bf06-47d4c6835202" testId="12d98f25-c244-1fab-2f65-18107c158b74" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3748118-04:00" endTime="2024-04-30T15:10:41.3748118-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffd5bffd-0e1f-4c3d-bf06-47d4c6835202">
      <Output>
        <StdOut>Testing pair: '+=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="022b3668-990e-44ef-9223-d805ffc073b4" testId="13b9ad0c-e0e7-6e4c-7fae-4cce0283d90d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0005240" startTime="2024-04-30T15:10:41.2530395-04:00" endTime="2024-04-30T15:10:41.2530396-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="022b3668-990e-44ef-9223-d805ffc073b4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78e556fb-5972-4699-998c-c4d81ad56595" testId="daa61973-3271-ce89-c31a-bf954d310bc6" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EndOfFileToken)" computerName="BRUNO" duration="00:00:00.0000016" startTime="2024-04-30T15:10:41.2552578-04:00" endTime="2024-04-30T15:10:41.2552578-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78e556fb-5972-4699-998c-c4d81ad56595" />
    <UnitTestResult executionId="7eb04e7b-57b5-4b18-b55f-78aa142f3277" testId="4d5b4189-4c7b-d26c-abd9-132311143c89" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3845172-04:00" endTime="2024-04-30T15:10:41.3845173-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7eb04e7b-57b5-4b18-b55f-78aa142f3277">
      <Output>
        <StdOut>Testing pair: '/False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80c5c884-a539-4833-800b-c9612c6a6678" testId="ad09f1ef-ec16-63ee-7611-5f39825a4319" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3364168-04:00" endTime="2024-04-30T15:10:41.3364169-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80c5c884-a539-4833-800b-c9612c6a6678">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a8f5a94-43d8-489e-992b-f03097e1c321" testId="473cc30c-6a9c-6671-a1ee-e3d2218f5aeb" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: StarToken)" computerName="BRUNO" duration="00:00:00.0000039" startTime="2024-04-30T15:10:41.2546020-04:00" endTime="2024-04-30T15:10:41.2546020-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a8f5a94-43d8-489e-992b-f03097e1c321" />
    <UnitTestResult executionId="835c9157-e02b-4f51-8835-aef4ccea3027" testId="9ea05522-f318-217b-a7b6-8a7480b836a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3246767-04:00" endTime="2024-04-30T15:10:41.3246767-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="835c9157-e02b-4f51-8835-aef4ccea3027">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af6d2d3d-af3c-4322-9dc8-6d577e598652" testId="35ddbf76-523b-d161-31dd-d296d85bc2dd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2830547-04:00" endTime="2024-04-30T15:10:41.2830547-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af6d2d3d-af3c-4322-9dc8-6d577e598652">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92960d2a-323b-4ec4-8fb1-cf46d42471e7" testId="5300a261-8f98-ab75-b49d-1ba81493d8bc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3332508-04:00" endTime="2024-04-30T15:10:41.3332508-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92960d2a-323b-4ec4-8fb1-cf46d42471e7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52c8cb96-555e-4e06-aea3-bce6792d5869" testId="9c610144-974e-c8f1-28dc-46031984cd4f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2634369-04:00" endTime="2024-04-30T15:10:41.2634369-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52c8cb96-555e-4e06-aea3-bce6792d5869" />
    <UnitTestResult executionId="126d2a0c-73d8-4c06-98ca-d5f64baa9f52" testId="dff5b088-61b4-472d-cca7-6329cd40a0f2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.3002960-04:00" endTime="2024-04-30T15:10:41.3002961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="126d2a0c-73d8-4c06-98ca-d5f64baa9f52">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="967bdc54-a5f6-4072-adb1-d7029f2a5e44" testId="a282d225-4b2b-8f00-d530-5e69474457bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3656758-04:00" endTime="2024-04-30T15:10:41.3656758-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="967bdc54-a5f6-4072-adb1-d7029f2a5e44">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a7c8932-9741-490c-bcca-b02b3013df96" testId="3dc236e8-2ff8-fc22-aba2-afb0a14d0609" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3649531-04:00" endTime="2024-04-30T15:10:41.3649532-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a7c8932-9741-490c-bcca-b02b3013df96">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7dc5e5ea-e13d-4644-b0f8-21b660aa796c" testId="704e3035-4eb8-5208-1539-178ed2721509" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3119940-04:00" endTime="2024-04-30T15:10:41.3119940-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7dc5e5ea-e13d-4644-b0f8-21b660aa796c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ababb94-ff24-4f45-ab41-e23c9c387993" testId="7fae84f9-cf01-25ec-851d-b4141afd8efd" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2670128-04:00" endTime="2024-04-30T15:10:41.2670129-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ababb94-ff24-4f45-ab41-e23c9c387993" />
    <UnitTestResult executionId="0faaabc3-9fc0-4103-a426-e5a54f8da60c" testId="d59c78ac-b503-9855-e35f-d56aaeac37b4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.2897742-04:00" endTime="2024-04-30T15:10:41.2897742-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0faaabc3-9fc0-4103-a426-e5a54f8da60c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb3fadce-2764-4aeb-894e-3e9c7dd03ff6" testId="a040e65f-ff03-c706-2948-61966d6569b6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3777058-04:00" endTime="2024-04-30T15:10:41.3777058-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb3fadce-2764-4aeb-894e-3e9c7dd03ff6">
      <Output>
        <StdOut>Testing pair: '!=is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06085427-1f68-4b84-b0eb-e742b4a33315" testId="ce87fe44-1f7d-e6e9-5f55-2c1a5abcc07d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.2859213-04:00" endTime="2024-04-30T15:10:41.2859214-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06085427-1f68-4b84-b0eb-e742b4a33315">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17ccb551-3a6f-426b-872d-dd2fef914393" testId="5e5e164e-b8fd-414b-cee5-2341c455e80a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2697768-04:00" endTime="2024-04-30T15:10:41.2697768-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17ccb551-3a6f-426b-872d-dd2fef914393">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6cadbcaa-b573-4178-80ab-1f43e8709f8a" testId="6b094741-adbb-ad4a-1150-94a18f422c24" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000100" startTime="2024-04-30T15:10:41.3723063-04:00" endTime="2024-04-30T15:10:41.3723063-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cadbcaa-b573-4178-80ab-1f43e8709f8a">
      <Output>
        <StdOut>Testing pair: '*='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7697fe24-bda8-4d54-99b6-5871a3ebc819" testId="a4a282b8-f891-a269-d10e-f137d2737a43" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2993969-04:00" endTime="2024-04-30T15:10:41.2993970-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7697fe24-bda8-4d54-99b6-5871a3ebc819">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7b9a9eb-a709-4fd5-b5e8-8985d4c4bf66" testId="f35ba20c-1190-3864-f3e1-a628714dd49a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.2659889-04:00" endTime="2024-04-30T15:10:41.2659890-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7b9a9eb-a709-4fd5-b5e8-8985d4c4bf66">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ab7773f7-a46f-4001-93e7-c45a6c3167fe" testId="80bdb5b5-48b1-16db-6ee0-a05c24cb3d79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3589128-04:00" endTime="2024-04-30T15:10:41.3589129-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab7773f7-a46f-4001-93e7-c45a6c3167fe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8badf14-1263-4535-a951-4d9680e96c5b" testId="1355e3f1-95b6-cc3a-458f-289ea5fab707" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3554887-04:00" endTime="2024-04-30T15:10:41.3554887-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8badf14-1263-4535-a951-4d9680e96c5b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4a5a332-3a4a-4ef6-bb4d-25057268dddd" testId="0c4ffcdc-3614-deee-1457-e8f45d7742ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3427179-04:00" endTime="2024-04-30T15:10:41.3427180-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4a5a332-3a4a-4ef6-bb4d-25057268dddd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e0b7838-b6fd-42cc-92b3-52021e8248fa" testId="108df3e3-b792-4d18-72bd-8867183f06cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3456003-04:00" endTime="2024-04-30T15:10:41.3456003-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e0b7838-b6fd-42cc-92b3-52021e8248fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="859bad60-b7b6-4cdd-a8c5-70f16824cc01" testId="4d61a9fa-8b85-2002-6ca1-d969fe122866" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3034419-04:00" endTime="2024-04-30T15:10:41.3034419-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="859bad60-b7b6-4cdd-a8c5-70f16824cc01">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b2ecef2-83d3-4408-8e96-d3ec0e67263a" testId="9fdb1f01-9b0d-0e31-f85e-1e1b5dc54584" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3062927-04:00" endTime="2024-04-30T15:10:41.3062927-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b2ecef2-83d3-4408-8e96-d3ec0e67263a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3602aba6-1835-4ff6-abd4-e4fbfec45ab2" testId="b08698ed-7242-73f4-83c4-338a805baa66" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2932828-04:00" endTime="2024-04-30T15:10:41.2932829-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3602aba6-1835-4ff6-abd4-e4fbfec45ab2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="960747e7-ea15-49e0-a2fe-983d5fef650a" testId="8909d248-241d-63a5-4088-0b7eaf69d0a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3302834-04:00" endTime="2024-04-30T15:10:41.3302835-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="960747e7-ea15-49e0-a2fe-983d5fef650a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8a8c172-df62-4a08-a176-0b2d89a33e9a" testId="cfb42feb-e685-4a2f-56a0-d161530bff88" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2708487-04:00" endTime="2024-04-30T15:10:41.2708488-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8a8c172-df62-4a08-a176-0b2d89a33e9a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b22ffaed-bc08-4c25-a11a-af700fe7c749" testId="7d5212bb-785d-5eb5-d44b-4e83eafd21e2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3763218-04:00" endTime="2024-04-30T15:10:41.3763219-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b22ffaed-bc08-4c25-a11a-af700fe7c749">
      <Output>
        <StdOut>Testing pair: '/or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d9ec5de3-56ed-4a0d-9d69-346f7b2e3ba6" testId="3780b5c5-7bd5-f946-bbf8-0d709675f526" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2922867-04:00" endTime="2024-04-30T15:10:41.2922868-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9ec5de3-56ed-4a0d-9d69-346f7b2e3ba6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc6b4912-98e7-4557-a837-5c6b45e58f15" testId="530483f0-be6f-802d-2a43-9219d56c3630" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.3724504-04:00" endTime="2024-04-30T15:10:41.3724505-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc6b4912-98e7-4557-a837-5c6b45e58f15">
      <Output>
        <StdOut>Testing pair: '-123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c80c56f8-944f-406a-b963-61c6ec46e5cc" testId="ac742156-1ca2-f768-8f01-02cab9be2bea" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.2775984-04:00" endTime="2024-04-30T15:10:41.2775985-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c80c56f8-944f-406a-b963-61c6ec46e5cc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="096a7aac-6e31-4854-a8a7-6a778a0963c8" testId="f6c274df-26fe-a97e-9693-23cfc4dc2423" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000212" startTime="2024-04-30T15:10:41.2923130-04:00" endTime="2024-04-30T15:10:41.2923131-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="096a7aac-6e31-4854-a8a7-6a778a0963c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0b9c9139-fa48-4226-b3ab-47814dfb1e3c" testId="fe546d2c-4689-085c-ec57-e87a9c2d9b84" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3333326-04:00" endTime="2024-04-30T15:10:41.3333326-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b9c9139-fa48-4226-b3ab-47814dfb1e3c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4e80f18-84b6-4732-9f8d-f36ada4c1f87" testId="dd56c734-11d1-2315-1b8e-93f8819101cf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3261052-04:00" endTime="2024-04-30T15:10:41.3261053-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4e80f18-84b6-4732-9f8d-f36ada4c1f87">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dece43c5-1d17-4cf9-b5b0-ad9539b71669" testId="169b33c4-7e6f-658b-a711-addb55b8dda9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3276080-04:00" endTime="2024-04-30T15:10:41.3276081-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dece43c5-1d17-4cf9-b5b0-ad9539b71669">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50bd49c6-ea2d-430b-80a6-d0465fee9ecc" testId="4a2d93c2-d779-4b70-3d91-257a0bbbf2c0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3708563-04:00" endTime="2024-04-30T15:10:41.3708565-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50bd49c6-ea2d-430b-80a6-d0465fee9ecc">
      <Output>
        <StdOut>Testing pair with explicit separator: '123
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ae9a391f-a8fd-440a-8035-c31b34844b67" testId="434cf9e3-f67b-d3f1-9963-f200506a12fb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000213" startTime="2024-04-30T15:10:41.2913067-04:00" endTime="2024-04-30T15:10:41.2913067-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae9a391f-a8fd-440a-8035-c31b34844b67">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c37b1302-6afd-4f50-9ced-496ea164b025" testId="30b239dc-1dab-666b-2a9d-a48bed38f9ba" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.2661023-04:00" endTime="2024-04-30T15:10:41.2661023-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c37b1302-6afd-4f50-9ced-496ea164b025" />
    <UnitTestResult executionId="ea510a65-c2d8-49e0-8fb5-41b089d98dc7" testId="c99e539c-f68f-5e6d-1ae2-8eef75476423" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.2855800-04:00" endTime="2024-04-30T15:10:41.2855800-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea510a65-c2d8-49e0-8fb5-41b089d98dc7">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aba73a98-a89d-4c25-bb16-4b719e67f230" testId="70074241-0b21-85c3-f018-50178364a367" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000105" startTime="2024-04-30T15:10:41.3322891-04:00" endTime="2024-04-30T15:10:41.3322892-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aba73a98-a89d-4c25-bb16-4b719e67f230">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d855ed3-d565-446d-9227-7c2bbbf660d1" testId="24bf67f7-6715-db0d-b503-b3da6f2827f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3718230-04:00" endTime="2024-04-30T15:10:41.3718231-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d855ed3-d565-446d-9227-7c2bbbf660d1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d86e9bbf-f9d9-4d8e-bc1d-4f825c53063f" testId="7796d565-a64d-6f75-c72f-07dcee6e99af" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3743278-04:00" endTime="2024-04-30T15:10:41.3743278-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d86e9bbf-f9d9-4d8e-bc1d-4f825c53063f">
      <Output>
        <StdOut>Testing pair: '123and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a3a91f23-a0a7-4113-8022-39822a0a3e99" testId="c0707c82-671b-041c-140d-4913d07ff376" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3649855-04:00" endTime="2024-04-30T15:10:41.3649856-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3a91f23-a0a7-4113-8022-39822a0a3e99">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04b2c71d-43ab-462c-90ab-87024441fa65" testId="176d8861-ed7d-7406-fd4f-6bfbe3e1e624" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.2753045-04:00" endTime="2024-04-30T15:10:41.2753046-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04b2c71d-43ab-462c-90ab-87024441fa65">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4f1f7b3-8ad4-4a61-9c51-70146432be8b" testId="dd9fdd76-97f7-6637-4902-211c64eee408" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.2656794-04:00" endTime="2024-04-30T15:10:41.2656794-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4f1f7b3-8ad4-4a61-9c51-70146432be8b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdb93462-d8c4-4400-8546-ebb31eed2481" testId="e2672b68-9898-06e8-22fb-63297fa83f8b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3493081-04:00" endTime="2024-04-30T15:10:41.3493081-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdb93462-d8c4-4400-8546-ebb31eed2481">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="acaa22a6-7b37-4b13-a56d-de92d49193e9" testId="8324dac0-770a-3b35-c45d-edc9ca07c783" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3174584-04:00" endTime="2024-04-30T15:10:41.3174584-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acaa22a6-7b37-4b13-a56d-de92d49193e9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c96bdb1-4a86-4434-915c-fd6c0874ddd1" testId="53061ab1-3e87-afb0-c279-52a7068c96cd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3417548-04:00" endTime="2024-04-30T15:10:41.3417549-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c96bdb1-4a86-4434-915c-fd6c0874ddd1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7140116f-eedb-4264-9344-ea5cca765c5f" testId="41347753-742e-949a-a019-3d7559f5a685" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000262" startTime="2024-04-30T15:10:41.2630697-04:00" endTime="2024-04-30T15:10:41.2630697-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7140116f-eedb-4264-9344-ea5cca765c5f" />
    <UnitTestResult executionId="e28d3bb1-8d5f-468f-a5db-f606164376aa" testId="a5b9a13d-a8a6-c76e-90d5-8a8ce8764e47" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3378949-04:00" endTime="2024-04-30T15:10:41.3378950-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e28d3bb1-8d5f-468f-a5db-f606164376aa">
      <Output>
        <StdOut>Testing pair with explicit separator: '==
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ebf7bcb-f413-4cf2-a53b-def398faa642" testId="edaa5339-64d6-c02f-dc09-e6e628958ac4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3555384-04:00" endTime="2024-04-30T15:10:41.3555385-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ebf7bcb-f413-4cf2-a53b-def398faa642">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c68ad833-928e-4502-b100-f2d5bfffb82b" testId="f1f6d016-597b-a42c-0739-c0a32d743783" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3205315-04:00" endTime="2024-04-30T15:10:41.3205315-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c68ad833-928e-4502-b100-f2d5bfffb82b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4960298-77f7-4d1e-85e2-33be3db4fd9d" testId="5097969a-25bf-bac2-af5d-dba7ab907147" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.3038594-04:00" endTime="2024-04-30T15:10:41.3038594-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4960298-77f7-4d1e-85e2-33be3db4fd9d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13215d16-fcf5-4c5a-9f38-58363843cb40" testId="f4aa721c-b012-b7dc-f47d-c418c832514f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.2968563-04:00" endTime="2024-04-30T15:10:41.2968563-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13215d16-fcf5-4c5a-9f38-58363843cb40">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="24921302-a645-4590-be08-048fbd91146b" testId="fad2b24b-6680-5de1-b3d3-a9105a0006f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3094044-04:00" endTime="2024-04-30T15:10:41.3094044-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24921302-a645-4590-be08-048fbd91146b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55ab10b6-89c2-4ea0-a371-a1a30018a03c" testId="84202444-fb40-9dfd-6799-534a246e10d3" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: AssignmentExpression)" computerName="BRUNO" duration="00:00:00.0000017" startTime="2024-04-30T15:10:41.2551716-04:00" endTime="2024-04-30T15:10:41.2551717-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55ab10b6-89c2-4ea0-a371-a1a30018a03c" />
    <UnitTestResult executionId="28120d4c-4377-4af8-8ff7-48cc9b66f43b" testId="4e2b62f8-d7a2-e8d9-9808-87ad6dfd68a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3199226-04:00" endTime="2024-04-30T15:10:41.3199226-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28120d4c-4377-4af8-8ff7-48cc9b66f43b">
      <Output>
        <StdOut>Testing pair with explicit separator: '123 loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10c77afc-cddb-4df5-9893-8b9a8608e02d" testId="f4100a79-f523-9dfe-0d6e-0b077341e8b6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000186" startTime="2024-04-30T15:10:41.2611655-04:00" endTime="2024-04-30T15:10:41.2611655-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10c77afc-cddb-4df5-9893-8b9a8608e02d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7a3e6c2-3744-4bff-85d5-7b81e076251f" testId="8e9db6ed-dfb1-ba50-c0cf-a95a82622c3a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2876440-04:00" endTime="2024-04-30T15:10:41.2876440-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7a3e6c2-3744-4bff-85d5-7b81e076251f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb99ff8b-b046-44e5-ae17-80929c403d6a" testId="998f9400-d2ac-7fb5-a4f3-54b6cc212210" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3175452-04:00" endTime="2024-04-30T15:10:41.3175452-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb99ff8b-b046-44e5-ae17-80929c403d6a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a18a7ca-5d1f-4e25-9644-795d87f46122" testId="476a6a0a-c9fc-fd0b-2fef-dd9120fd9902" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3397542-04:00" endTime="2024-04-30T15:10:41.3397542-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a18a7ca-5d1f-4e25-9644-795d87f46122">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5de4c7fd-cc3a-4ef5-baa2-13b3b3b232ae" testId="7f0ce942-65a2-8ad4-2715-a7d5c81026ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3582539-04:00" endTime="2024-04-30T15:10:41.3582540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5de4c7fd-cc3a-4ef5-baa2-13b3b3b232ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73030796-dc9e-4fcb-b5cf-51585e78761f" testId="5c30fb19-bbcb-e8a5-3a92-fd0f63a632c2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000126" startTime="2024-04-30T15:10:41.3795785-04:00" endTime="2024-04-30T15:10:41.3795785-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73030796-dc9e-4fcb-b5cf-51585e78761f">
      <Output>
        <StdOut>Testing pair: '-='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="649710fe-acc9-4f6f-bf65-3b5b1a200f61" testId="d1fbd687-cc65-5ab2-40f6-83a626f88c8b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3756836-04:00" endTime="2024-04-30T15:10:41.3756836-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="649710fe-acc9-4f6f-bf65-3b5b1a200f61">
      <Output>
        <StdOut>Testing pair: '123False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2f242b87-e3d1-4c65-baaf-74f8d1f9dc53" testId="374b856b-c756-e341-14f4-bedc0ef17087" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.3099113-04:00" endTime="2024-04-30T15:10:41.3099114-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f242b87-e3d1-4c65-baaf-74f8d1f9dc53">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d79848a-16ce-42d0-af33-79030c8bb95c" testId="ba29293a-14de-1f66-33fc-b64ad2621f42" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3023045-04:00" endTime="2024-04-30T15:10:41.3023045-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d79848a-16ce-42d0-af33-79030c8bb95c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b46b73b3-e289-43a5-9ed2-7499e56d30f2" testId="2dc00c52-2be3-57f9-b44e-ca51ffe61a97" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3094594-04:00" endTime="2024-04-30T15:10:41.3094594-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b46b73b3-e289-43a5-9ed2-7499e56d30f2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="12f1c48a-7eb2-466e-bca1-b69be1af6c7b" testId="6c439e41-2b48-43f8-fe78-bd2588d70302" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2689064-04:00" endTime="2024-04-30T15:10:41.2689064-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12f1c48a-7eb2-466e-bca1-b69be1af6c7b" />
    <UnitTestResult executionId="916d522d-e3d7-458e-9e80-f79d6a01478d" testId="c3ec5a87-d8e6-2fd5-2075-7fb805be3b5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3680990-04:00" endTime="2024-04-30T15:10:41.3680991-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="916d522d-e3d7-458e-9e80-f79d6a01478d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a108a17-6442-48c9-90e1-7d7fa9223416" testId="3513ed47-05c3-618e-d934-3f640b6376b6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3676624-04:00" endTime="2024-04-30T15:10:41.3676625-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a108a17-6442-48c9-90e1-7d7fa9223416">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="71e6c2eb-c8f3-41bd-bde4-86b179ca4bff" testId="2ea8b797-836c-c3a1-075a-1ce27d599bab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2859884-04:00" endTime="2024-04-30T15:10:41.2859885-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71e6c2eb-c8f3-41bd-bde4-86b179ca4bff">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dadd53f1-4e8a-4667-9b5f-063c4530b234" testId="d565c5cb-ffc5-6fdc-1708-b4909d76ada7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3398745-04:00" endTime="2024-04-30T15:10:41.3398745-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dadd53f1-4e8a-4667-9b5f-063c4530b234">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4acbb76b-277c-4813-ba39-3dbc9e737f0a" testId="c3d7d6f0-4510-1bcc-2f95-d81eb136f568" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2772403-04:00" endTime="2024-04-30T15:10:41.2772403-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4acbb76b-277c-4813-ba39-3dbc9e737f0a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b07c79e-b83e-4947-83dd-3b1106fff31c" testId="866d9682-34b9-b6cb-db8b-509d64497f78" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3023956-04:00" endTime="2024-04-30T15:10:41.3023956-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b07c79e-b83e-4947-83dd-3b1106fff31c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ef2bd6e-66d9-4c7b-9f74-2bf42dd5c95d" testId="8343b001-08aa-5bad-9d9f-e9ae5d8f1bdc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3778468-04:00" endTime="2024-04-30T15:10:41.3778468-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ef2bd6e-66d9-4c7b-9f74-2bf42dd5c95d">
      <Output>
        <StdOut>Testing pair: '!=('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="987bdf6a-4658-41f3-b7d6-6ca6f7b358c8" testId="ad90694b-35de-007b-a23d-4cc067a59958" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000074" startTime="2024-04-30T15:10:41.3178020-04:00" endTime="2024-04-30T15:10:41.3178021-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="987bdf6a-4658-41f3-b7d6-6ca6f7b358c8">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="693e038b-91ae-4036-9266-b382f129fab0" testId="bb27d552-19d5-f12b-6e25-20c68351c524" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3311348-04:00" endTime="2024-04-30T15:10:41.3311349-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="693e038b-91ae-4036-9266-b382f129fab0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0674439-f926-4edf-9b30-0647ef35f4b8" testId="f9819cdf-834c-8d40-3de4-e0d647ebc1cd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2682914-04:00" endTime="2024-04-30T15:10:41.2682914-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0674439-f926-4edf-9b30-0647ef35f4b8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="969613e5-c1d5-4d90-82d5-81be39b315b6" testId="2280c6c6-e7e6-1e0a-6a6f-b8a9bab06fca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.3729170-04:00" endTime="2024-04-30T15:10:41.3729171-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="969613e5-c1d5-4d90-82d5-81be39b315b6">
      <Output>
        <StdOut>Testing pair: '-/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0a31b5f-4620-418c-9c0b-3d6922a8e3a6" testId="6b8b981a-5a47-b293-2358-89ae499a4463" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3783264-04:00" endTime="2024-04-30T15:10:41.3783264-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0a31b5f-4620-418c-9c0b-3d6922a8e3a6">
      <Output>
        <StdOut>Testing pair: ')='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe1dfb51-7c8d-4a21-9b75-541c26fd6f78" testId="5b659306-954d-4d9b-2cf9-32e444663d95" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000184" startTime="2024-04-30T15:10:41.3007977-04:00" endTime="2024-04-30T15:10:41.3007978-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe1dfb51-7c8d-4a21-9b75-541c26fd6f78">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d1fc16c-83dd-4d4d-978e-76aea1d28437" testId="96ff4a23-73d9-30f0-2811-19a5dcc65ac1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3502540-04:00" endTime="2024-04-30T15:10:41.3502541-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d1fc16c-83dd-4d4d-978e-76aea1d28437">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38cde186-fa2b-4478-a6d6-17d5970fcb81" testId="3f408609-7eec-5b04-dd9f-bf6a06759eb1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000242" startTime="2024-04-30T15:10:41.2973845-04:00" endTime="2024-04-30T15:10:41.2973845-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38cde186-fa2b-4478-a6d6-17d5970fcb81">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b78c2004-6984-469d-8644-007aeb5989f5" testId="2f799580-a8db-5713-b5bf-fdd5d866141a" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2713457-04:00" endTime="2024-04-30T15:10:41.2713457-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b78c2004-6984-469d-8644-007aeb5989f5" />
    <UnitTestResult executionId="1518d9c5-1526-42e0-b7a2-5ab426fff364" testId="01a11a8b-a37b-6f57-9869-3c82a79c16cb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3511844-04:00" endTime="2024-04-30T15:10:41.3511844-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1518d9c5-1526-42e0-b7a2-5ab426fff364">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ec40a25-8bc8-4bf3-8935-756db8e9b8a5" testId="020deb21-f286-a61f-8c3e-56af19d1953e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3556037-04:00" endTime="2024-04-30T15:10:41.3556037-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ec40a25-8bc8-4bf3-8935-756db8e9b8a5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f82e8192-6e3a-402d-a235-50da2516111e" testId="a0ffcaef-8d57-1300-6329-df7a82b327be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.3739533-04:00" endTime="2024-04-30T15:10:41.3739534-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f82e8192-6e3a-402d-a235-50da2516111e">
      <Output>
        <StdOut>Testing pair: '(*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1163c610-4b09-4bd0-abbb-fafdf0bee673" testId="31e235ba-1d72-8453-ab85-3f772d274952" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3276877-04:00" endTime="2024-04-30T15:10:41.3276877-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1163c610-4b09-4bd0-abbb-fafdf0bee673">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3bc9af1f-6e56-4fda-89ae-c6b2d22ec0a1" testId="c9ecec52-a192-4926-2fb2-f975c18d28ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3084191-04:00" endTime="2024-04-30T15:10:41.3084191-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3bc9af1f-6e56-4fda-89ae-c6b2d22ec0a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53916265-1b1b-480c-b869-29769c9c3b57" testId="bdd3f519-43db-cb16-d5a9-130d23b6776f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3274922-04:00" endTime="2024-04-30T15:10:41.3274923-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53916265-1b1b-480c-b869-29769c9c3b57">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dabf28a3-e585-4dd2-b9ed-1e3d8d71af66" testId="4210c0a8-b436-302c-a0c7-8354612c94da" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000105" startTime="2024-04-30T15:10:41.3710104-04:00" endTime="2024-04-30T15:10:41.3710105-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dabf28a3-e585-4dd2-b9ed-1e3d8d71af66">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e169501-d26a-4384-8e34-ba79d42b33c3" testId="873c80d2-6e59-883d-3bc6-f24e502d6f12" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2963967-04:00" endTime="2024-04-30T15:10:41.2963967-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e169501-d26a-4384-8e34-ba79d42b33c3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="268e7405-9523-4269-a937-06eab37caac0" testId="b51e26df-499f-fd50-88ea-4ded76bfc0c8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3164115-04:00" endTime="2024-04-30T15:10:41.3164115-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="268e7405-9523-4269-a937-06eab37caac0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="efe3bba9-f0fe-4be8-b386-b1dfcba98d29" testId="56891394-0f5c-02f0-89f2-0c7a41490bfc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: OrKeyword, text: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.3862029-04:00" endTime="2024-04-30T15:10:41.3862030-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="efe3bba9-f0fe-4be8-b386-b1dfcba98d29">
      <Output>
        <StdOut>Expected kind: OrKeyword, Actual kind: OrKeyword&#xD;
Expected text: 'or', Actual text: 'or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c6fd892-d28e-47a9-a426-5b6574ace989" testId="d0037e65-395e-2a2a-8b0e-5cd43ae62081" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3617936-04:00" endTime="2024-04-30T15:10:41.3617936-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c6fd892-d28e-47a9-a426-5b6574ace989">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="105e30eb-f680-44ca-a376-1e11411b995e" testId="0721c4d5-17b9-7b7c-1851-6219c237587e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3271319-04:00" endTime="2024-04-30T15:10:41.3271319-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="105e30eb-f680-44ca-a376-1e11411b995e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0432d5cb-ff2e-4dd9-b50c-167c88260c68" testId="9526fa6e-7224-8e24-9bce-9109effc39af" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3118391-04:00" endTime="2024-04-30T15:10:41.3118391-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0432d5cb-ff2e-4dd9-b50c-167c88260c68">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa7e2cdf-8efa-4cb6-a821-e7e0894489eb" testId="49cad0b8-2faf-dce0-0b8d-58fe8d0d5df5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3837816-04:00" endTime="2024-04-30T15:10:41.3837816-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa7e2cdf-8efa-4cb6-a821-e7e0894489eb">
      <Output>
        <StdOut>Testing pair: '==is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3edbd6cf-13cb-4bff-ad43-b669b66375ef" testId="f19d4eb4-b1af-9ed7-7d01-d277bf111395" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000122" startTime="2024-04-30T15:10:41.3660473-04:00" endTime="2024-04-30T15:10:41.3660473-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3edbd6cf-13cb-4bff-ad43-b669b66375ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c370e90-6f52-4b55-94ea-a35e044c229a" testId="edf42284-124c-18f4-1841-d19cade0a913" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3367966-04:00" endTime="2024-04-30T15:10:41.3367966-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c370e90-6f52-4b55-94ea-a35e044c229a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d04485f-83c9-43a9-90ff-cc77b9508a24" testId="77970192-e8f5-64a7-7061-0176921f9510" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3241098-04:00" endTime="2024-04-30T15:10:41.3241098-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d04485f-83c9-43a9-90ff-cc77b9508a24">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10b91bee-7feb-4ff6-bee4-aa34dfd332e0" testId="668de3da-e200-0d23-4ae6-9180d29586da" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3064290-04:00" endTime="2024-04-30T15:10:41.3064291-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10b91bee-7feb-4ff6-bee4-aa34dfd332e0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="27fc60b5-d0e0-4ff3-a913-050ed62121ae" testId="8d670c79-b1f2-a7b1-512c-d1fc547b9fde" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1&quot;, expectedValue: 1)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.2748006-04:00" endTime="2024-04-30T15:10:41.2748007-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27fc60b5-d0e0-4ff3-a913-050ed62121ae" />
    <UnitTestResult executionId="39d21b82-fe14-488b-a53c-7a86fed6e226" testId="3b930009-1d34-28dc-3f66-7de437f049df" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.2643515-04:00" endTime="2024-04-30T15:10:41.2643516-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39d21b82-fe14-488b-a53c-7a86fed6e226">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93c1cf93-7f1c-410f-b43c-89f8428a38aa" testId="ce4e9a28-0816-669b-223e-bdb8fba8925d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3164386-04:00" endTime="2024-04-30T15:10:41.3164386-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93c1cf93-7f1c-410f-b43c-89f8428a38aa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c858f0a3-5cbe-4093-9cbd-f6e8113512a1" testId="7e580a6d-3ee1-64ca-a74b-fdc08768b833" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3837539-04:00" endTime="2024-04-30T15:10:41.3837540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c858f0a3-5cbe-4093-9cbd-f6e8113512a1">
      <Output>
        <StdOut>Testing pair: '))'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abae4e6a-d028-41ef-a0d1-1955a1b8aa4c" testId="889e1d72-16f3-f90a-e6ea-bca5507a0855" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3777932-04:00" endTime="2024-04-30T15:10:41.3777933-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abae4e6a-d028-41ef-a0d1-1955a1b8aa4c">
      <Output>
        <StdOut>Testing pair: '+ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47b359fe-5e46-42d2-a395-70a369b042ad" testId="00b08d0a-6119-a572-cb81-5b70b9b550c7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2835040-04:00" endTime="2024-04-30T15:10:41.2835041-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47b359fe-5e46-42d2-a395-70a369b042ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4536447-b679-4cb8-aad7-2d491e9b857e" testId="70720e19-d021-9b52-28c7-c8eb037230f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3728628-04:00" endTime="2024-04-30T15:10:41.3728629-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4536447-b679-4cb8-aad7-2d491e9b857e">
      <Output>
        <StdOut>Testing pair: '=/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b542477f-b190-4841-979e-9fece958b31a" testId="a51b68b4-ecb1-2121-cfe3-0d421e95b9f1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2814585-04:00" endTime="2024-04-30T15:10:41.2814586-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b542477f-b190-4841-979e-9fece958b31a">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5cba5d8f-5361-4068-8e0f-4fe2821b4f4f" testId="e0651e0d-af41-740e-a58c-36cb5e186905" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2751333-04:00" endTime="2024-04-30T15:10:41.2751334-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cba5d8f-5361-4068-8e0f-4fe2821b4f4f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3811da08-0b20-41a5-b4e0-4956870d1b18" testId="cea441bb-262c-4495-fc1e-1d7552242a97" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000189" startTime="2024-04-30T15:10:41.3008787-04:00" endTime="2024-04-30T15:10:41.3008788-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3811da08-0b20-41a5-b4e0-4956870d1b18">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="48f86aa1-6eb4-4ece-8ce8-914af60b7a4b" testId="ad93ff4c-d2bd-a777-86a9-95b7c9e04128" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.3833392-04:00" endTime="2024-04-30T15:10:41.3833392-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48f86aa1-6eb4-4ece-8ce8-914af60b7a4b">
      <Output>
        <StdOut>Testing pair: '!=123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4b15be1-1bcb-4253-b644-1c7f9a30790b" testId="8b26ebda-1c3c-7d3d-4b85-dce945ea2fa8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.3047963-04:00" endTime="2024-04-30T15:10:41.3047963-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4b15be1-1bcb-4253-b644-1c7f9a30790b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6df392ef-73cf-4aa4-887c-afe30e038484" testId="61211be4-f5c9-7f09-5865-5de9d00952a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3822129-04:00" endTime="2024-04-30T15:10:41.3822130-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6df392ef-73cf-4aa4-887c-afe30e038484">
      <Output>
        <StdOut>Testing pair: '*ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8fd6ddd4-612a-4ab2-a73c-02aacb01abce" testId="1d9694db-5bf6-a47b-3ab0-9dee227f4d9e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.3022449-04:00" endTime="2024-04-30T15:10:41.3022449-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fd6ddd4-612a-4ab2-a73c-02aacb01abce">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="663b8c4b-c182-4240-bec5-5e15f22daefe" testId="3d1e6edc-f017-af4a-4e11-9d37dd5ff123" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3742346-04:00" endTime="2024-04-30T15:10:41.3742346-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="663b8c4b-c182-4240-bec5-5e15f22daefe">
      <Output>
        <StdOut>Testing pair: '/+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9ab3278-64f7-4bb4-9481-66543393bf2a" testId="4e7fc613-a25e-d882-c55f-de67e8443212" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3499312-04:00" endTime="2024-04-30T15:10:41.3499313-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9ab3278-64f7-4bb4-9481-66543393bf2a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2bd7cdae-fd6d-4469-bca6-72676b8fd2f1" testId="f770d189-0326-2a4e-4cfa-cacf88844102" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.3009048-04:00" endTime="2024-04-30T15:10:41.3009049-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2bd7cdae-fd6d-4469-bca6-72676b8fd2f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d18e9fb9-69e9-42dd-8a44-fb63847d9aed" testId="7e922a3e-2752-2f2a-324f-e6f7ce286000" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2865265-04:00" endTime="2024-04-30T15:10:41.2865265-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d18e9fb9-69e9-42dd-8a44-fb63847d9aed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="477c77cf-ba7d-44ed-ab5d-2e8c8dd7fba4" testId="0e5b6e0b-814b-2994-5090-0cdcb803d32c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3115031-04:00" endTime="2024-04-30T15:10:41.3115032-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="477c77cf-ba7d-44ed-ab5d-2e8c8dd7fba4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67da93fe-e343-4d0f-8ea8-64c0b5e33254" testId="63eb18e5-3115-c666-2a29-6ad068d51ab6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3064023-04:00" endTime="2024-04-30T15:10:41.3064023-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67da93fe-e343-4d0f-8ea8-64c0b5e33254">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97bab17a-fd17-49a7-9825-16a4bdc9be49" testId="33d34085-64ea-18cc-b9d5-391d98918d2e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3063200-04:00" endTime="2024-04-30T15:10:41.3063200-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97bab17a-fd17-49a7-9825-16a4bdc9be49">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1c24dcf-60fa-479d-9b42-a3e671e16d19" testId="cabbb603-69af-7aba-0397-5a67fa86d925" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3359043-04:00" endTime="2024-04-30T15:10:41.3359044-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1c24dcf-60fa-479d-9b42-a3e671e16d19">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ef8b109-43bc-4ee9-88a5-2cdd95c93341" testId="8254eb37-487c-0d9d-b0fa-35699aa76d59" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2826182-04:00" endTime="2024-04-30T15:10:41.2826183-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ef8b109-43bc-4ee9-88a5-2cdd95c93341">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a025b88-66b3-4a02-b13f-16507d96ee8f" testId="c1294288-5c6b-1ff0-7c9e-e4879efc9496" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3100082-04:00" endTime="2024-04-30T15:10:41.3100082-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a025b88-66b3-4a02-b13f-16507d96ee8f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f25a093-9920-4a47-85d8-2e4a3c92f25f" testId="d69c70fb-25a3-1919-4195-e4575f2e97cb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3089695-04:00" endTime="2024-04-30T15:10:41.3089695-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f25a093-9920-4a47-85d8-2e4a3c92f25f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="751a3081-644d-4690-a0c9-84c06a263d2d" testId="9e059a0a-a014-9956-e5a3-ce82d093ec3e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2679138-04:00" endTime="2024-04-30T15:10:41.2679139-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="751a3081-644d-4690-a0c9-84c06a263d2d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca7f740c-6b0d-4be1-855e-b034f2939a75" testId="01735b00-4d1d-dfdc-bf6a-9867265adc23" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: FalseKeyword)" computerName="BRUNO" duration="00:00:00.0000046" startTime="2024-04-30T15:10:41.2551164-04:00" endTime="2024-04-30T15:10:41.2551165-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca7f740c-6b0d-4be1-855e-b034f2939a75" />
    <UnitTestResult executionId="2759ff32-0e63-4937-b76a-e908fee2d389" testId="278d2fdc-8160-3dfd-8a05-1d698324cf18" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3733660-04:00" endTime="2024-04-30T15:10:41.3733660-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2759ff32-0e63-4937-b76a-e908fee2d389">
      <Output>
        <StdOut>Testing pair: '!=a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6385f101-d368-4895-a90a-c4ba802dc7a1" testId="548767c6-54e8-611c-1ac8-184e1a1da656" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3645601-04:00" endTime="2024-04-30T15:10:41.3645602-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6385f101-d368-4895-a90a-c4ba802dc7a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba919d93-5e46-49aa-877c-a898ef5aac18" testId="e9837ab7-2ce3-c7f8-834a-30ace14ae793" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3078999-04:00" endTime="2024-04-30T15:10:41.3079000-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba919d93-5e46-49aa-877c-a898ef5aac18">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74892ac5-96ce-451d-b05f-1a30716b0753" testId="f7d80f94-ada8-43a2-f71c-b8ff30a52a0c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.3851370-04:00" endTime="2024-04-30T15:10:41.3851371-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74892ac5-96ce-451d-b05f-1a30716b0753">
      <Output>
        <StdOut>Expected kind: IdentifierToken, Actual kind: IdentifierToken&#xD;
Expected text: 'loves', Actual text: 'loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18470b49-c376-45ed-9281-a53d77e2d6c1" testId="88fbc2f7-230c-c6c9-2e2d-4a583fce894d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3194807-04:00" endTime="2024-04-30T15:10:41.3194808-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18470b49-c376-45ed-9281-a53d77e2d6c1">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="27f629b4-185e-43e3-b6fd-d06f0f23bb3e" testId="f26e756d-8d88-041a-c13d-649383380ab8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.2639387-04:00" endTime="2024-04-30T15:10:41.2639388-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27f629b4-185e-43e3-b6fd-d06f0f23bb3e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92e3514c-dc08-4f0a-8e9f-d4c969c8be80" testId="3444d37a-8068-9203-1735-87ba44ab0bbb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3423973-04:00" endTime="2024-04-30T15:10:41.3423974-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92e3514c-dc08-4f0a-8e9f-d4c969c8be80">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0fbcfb70-d3e6-4aec-8ab5-7d1c5d198206" testId="3f33c019-05e9-0aeb-9667-84ecc99ee1ca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3173776-04:00" endTime="2024-04-30T15:10:41.3173777-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fbcfb70-d3e6-4aec-8ab5-7d1c5d198206">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49f08632-aedd-41e6-920e-d4573e2d37d9" testId="a0bab2b7-b712-8bd0-2f9a-190c72b0d608" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3183137-04:00" endTime="2024-04-30T15:10:41.3183137-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49f08632-aedd-41e6-920e-d4573e2d37d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11f938e7-3cf1-4faf-a854-6a1ed3c529c6" testId="a0c3f2cb-8458-9f38-8e5f-611c53b57510" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000195" startTime="2024-04-30T15:10:41.2558304-04:00" endTime="2024-04-30T15:10:41.2558305-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11f938e7-3cf1-4faf-a854-6a1ed3c529c6" />
    <UnitTestResult executionId="099cb0ab-87ce-4228-8f9e-1da93e673d86" testId="b5c177ad-a6aa-3919-9f1d-558bd1c1c10d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3671276-04:00" endTime="2024-04-30T15:10:41.3671277-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="099cb0ab-87ce-4228-8f9e-1da93e673d86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01cab1e8-59bc-4882-9ad1-2e25ba7c10a4" testId="eed4483b-d886-1a88-3f5e-1794edfb6b2e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000127" startTime="2024-04-30T15:10:41.3797440-04:00" endTime="2024-04-30T15:10:41.3797440-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01cab1e8-59bc-4882-9ad1-2e25ba7c10a4">
      <Output>
        <StdOut>Testing pair: '//'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="798d19eb-220c-4f6b-8945-048b5016dcae" testId="5423a2bf-9a2c-a8b7-9566-d8fce8666586" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3143639-04:00" endTime="2024-04-30T15:10:41.3143640-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="798d19eb-220c-4f6b-8945-048b5016dcae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2cbf92bc-bdac-48a3-9718-fc369e846ac1" testId="a90a1e30-e055-bd82-018b-3888f3b6a616" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2840469-04:00" endTime="2024-04-30T15:10:41.2840469-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cbf92bc-bdac-48a3-9718-fc369e846ac1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4fe5c50-5814-4df5-8b61-f6ddc8d3351f" testId="6a58712b-ebe3-3373-955d-152d342b0a0e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3571150-04:00" endTime="2024-04-30T15:10:41.3571151-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4fe5c50-5814-4df5-8b61-f6ddc8d3351f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0311775b-33fb-4bb8-ba17-810b03daf43d" testId="fd87ad23-e322-0503-008d-7737eef0a110" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2967490-04:00" endTime="2024-04-30T15:10:41.2967490-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0311775b-33fb-4bb8-ba17-810b03daf43d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23af55f5-6cb2-4af2-aeca-7062b9bd274e" testId="40edfb4c-86ef-7423-6570-4f3e11164571" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.3032792-04:00" endTime="2024-04-30T15:10:41.3032792-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23af55f5-6cb2-4af2-aeca-7062b9bd274e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="529eccfc-c8b4-49ec-aea3-608d26771540" testId="a1e36b55-0dd1-5f06-4f2a-b0728ddd2200" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3290673-04:00" endTime="2024-04-30T15:10:41.3290674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="529eccfc-c8b4-49ec-aea3-608d26771540">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3016554-3b05-4c35-a39b-e032ef107aa6" testId="698dc321-cb7e-67eb-b37c-f721ac4df98a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3337710-04:00" endTime="2024-04-30T15:10:41.3337710-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3016554-3b05-4c35-a39b-e032ef107aa6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e2c7d3ee-9d6a-4b28-8087-bc205a846041" testId="301c858d-8830-2f07-e607-66a4d83e120d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.3008520-04:00" endTime="2024-04-30T15:10:41.3008520-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2c7d3ee-9d6a-4b28-8087-bc205a846041">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c7534b5-c1b4-446d-aba2-954907bf786a" testId="f82b2a36-dc7b-4e29-64bf-f23e2d274597" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3260213-04:00" endTime="2024-04-30T15:10:41.3260214-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c7534b5-c1b4-446d-aba2-954907bf786a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95f96a76-a381-4f6b-8868-7d5472c149c8" testId="5ca94ee6-073d-5728-12c9-6cfec33708cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3098843-04:00" endTime="2024-04-30T15:10:41.3098844-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95f96a76-a381-4f6b-8868-7d5472c149c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c92aa73-7831-42f0-a384-8cb15fe9636e" testId="6f5a3707-79cb-f959-873c-edf3c878e958" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3285105-04:00" endTime="2024-04-30T15:10:41.3285106-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c92aa73-7831-42f0-a384-8cb15fe9636e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd141589-639b-4b85-9bcb-9ac474e750de" testId="676dc216-c3c3-2d9b-3369-d44a1498b609" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000276" startTime="2024-04-30T15:10:41.2616056-04:00" endTime="2024-04-30T15:10:41.2616057-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd141589-639b-4b85-9bcb-9ac474e750de">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20e1798f-a891-4bc8-8d88-62f16e2d22b1" testId="e601f3c3-acb2-4248-fa55-e9d847a7ac92" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3094859-04:00" endTime="2024-04-30T15:10:41.3094859-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20e1798f-a891-4bc8-8d88-62f16e2d22b1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b053ad7-cf60-4690-8f17-276f776334c1" testId="8a23078f-111a-f274-38c7-77692604de84" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3463999-04:00" endTime="2024-04-30T15:10:41.3464000-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b053ad7-cf60-4690-8f17-276f776334c1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e1fd26c-b4ae-4aa3-a80e-f5721ba660b0" testId="2a9ef331-0687-c587-d3f5-de9248ea5da2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3618423-04:00" endTime="2024-04-30T15:10:41.3618423-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e1fd26c-b4ae-4aa3-a80e-f5721ba660b0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0656d25b-7ff4-43c8-b1d9-6abb4a1d11ea" testId="b5750011-f041-ab29-822e-8e5bf311aa10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2674783-04:00" endTime="2024-04-30T15:10:41.2674783-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0656d25b-7ff4-43c8-b1d9-6abb4a1d11ea">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7dc69cc-0466-4f25-8daa-4cf05f7ad0ec" testId="49616c88-67ae-b480-de4d-fe1510c78427" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.2815161-04:00" endTime="2024-04-30T15:10:41.2815162-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7dc69cc-0466-4f25-8daa-4cf05f7ad0ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d31ef36-f33f-4634-a6a8-16464d318fdb" testId="e2009fcf-021a-1553-64ec-60c3a57d8882" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3693572-04:00" endTime="2024-04-30T15:10:41.3693573-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d31ef36-f33f-4634-a6a8-16464d318fdb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a0b71db-4dd5-41f7-a374-84b2c4b56ec2" testId="e8143c1b-1962-f0a3-ddc8-706060923d82" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0006663" startTime="2024-04-30T15:10:41.2704124-04:00" endTime="2024-04-30T15:10:41.2704125-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a0b71db-4dd5-41f7-a374-84b2c4b56ec2" />
    <UnitTestResult executionId="5c8952b1-2022-4dab-983c-f8e36c11c6c5" testId="b7e8f769-02b7-efb0-391e-75cd1ec18ae3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3660139-04:00" endTime="2024-04-30T15:10:41.3660140-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c8952b1-2022-4dab-983c-f8e36c11c6c5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa01c19d-2711-46f9-8777-f099e8496ad3" testId="0a738358-0d98-1c31-fe50-9911bd511c36" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3120202-04:00" endTime="2024-04-30T15:10:41.3120203-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa01c19d-2711-46f9-8777-f099e8496ad3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42bd6473-2500-46e5-b0d5-51856c4b8c5f" testId="1af9d5aa-4f4d-101d-37f5-9bff6b847f59" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3597981-04:00" endTime="2024-04-30T15:10:41.3597982-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42bd6473-2500-46e5-b0d5-51856c4b8c5f">
      <Output>
        <StdOut>Testing pair with explicit separator: '= ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="899228ec-275b-4ffc-8eb0-85edc7ffd6a4" testId="8bc515b4-89c6-0a96-3010-d092e0485562" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2638317-04:00" endTime="2024-04-30T15:10:41.2638318-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="899228ec-275b-4ffc-8eb0-85edc7ffd6a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74689a93-1b69-4aa3-b59f-e6e2917dcbc2" testId="d8e8c50c-2308-244e-d60e-e854c5ca350b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3255659-04:00" endTime="2024-04-30T15:10:41.3255659-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74689a93-1b69-4aa3-b59f-e6e2917dcbc2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e53bc0e9-5aa9-4ff7-ac43-579c73209d4f" testId="5fefa066-99ec-3b42-f36a-2a1132d2e42e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.3737571-04:00" endTime="2024-04-30T15:10:41.3737572-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e53bc0e9-5aa9-4ff7-ac43-579c73209d4f">
      <Output>
        <StdOut>Testing pair: '(False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="711b4c10-6719-4661-990d-aeb69562725f" testId="66779f0b-541c-007c-a724-97b97741f566" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3188958-04:00" endTime="2024-04-30T15:10:41.3188959-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="711b4c10-6719-4661-990d-aeb69562725f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fbca4c3c-c853-4239-84e2-8d8d0c48ac00" testId="08264f66-e072-76a5-e30f-fd7fb3d52543" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2773212-04:00" endTime="2024-04-30T15:10:41.2773213-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbca4c3c-c853-4239-84e2-8d8d0c48ac00">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f18dbb9-483f-4da2-81e5-24b344ce1628" testId="6008cbb1-c96b-2538-4e26-48b07bcfc706" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3749550-04:00" endTime="2024-04-30T15:10:41.3749551-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f18dbb9-483f-4da2-81e5-24b344ce1628">
      <Output>
        <StdOut>Testing pair: '*!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="054f5d87-f757-439d-a9ea-3252c2719790" testId="68b1a906-43a7-2c16-7423-7271a8d4e7c8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: TrueKeyword, text: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.3846826-04:00" endTime="2024-04-30T15:10:41.3846827-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="054f5d87-f757-439d-a9ea-3252c2719790">
      <Output>
        <StdOut>Expected kind: TrueKeyword, Actual kind: TrueKeyword&#xD;
Expected text: 'True', Actual text: 'True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39178687-e5eb-4642-b0a5-981f8a540aaa" testId="c03f330f-8bf0-d307-0400-2089618b760c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3396470-04:00" endTime="2024-04-30T15:10:41.3396471-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39178687-e5eb-4642-b0a5-981f8a540aaa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f5c49b2-f7c3-4c99-91e8-35986c7b833e" testId="5ffaeeab-4c86-8ff5-b053-bd38d6c7aefb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3113673-04:00" endTime="2024-04-30T15:10:41.3113673-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f5c49b2-f7c3-4c99-91e8-35986c7b833e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38591c0e-9d31-4bc4-b865-428749a2f339" testId="8404f4b0-511c-9a29-5bc8-5c00e7e12882" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000201" startTime="2024-04-30T15:10:41.2933625-04:00" endTime="2024-04-30T15:10:41.2933626-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38591c0e-9d31-4bc4-b865-428749a2f339">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2682c34c-acda-49c7-93af-ac7009006dd6" testId="af962a83-6338-5e2d-e184-989b6ce27121" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3763744-04:00" endTime="2024-04-30T15:10:41.3763744-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2682c34c-acda-49c7-93af-ac7009006dd6">
      <Output>
        <StdOut>Testing pair: '-loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90b76097-7dad-4fb4-8949-734d16f99c8c" testId="d02b42fc-f4b8-601b-72bf-8186af3a394a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3169475-04:00" endTime="2024-04-30T15:10:41.3169476-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90b76097-7dad-4fb4-8949-734d16f99c8c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90cd422d-29ee-416a-a967-8fa74a198c05" testId="dd7d445b-d179-3e23-276f-9e420f3d7554" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3529049-04:00" endTime="2024-04-30T15:10:41.3529050-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90cd422d-29ee-416a-a967-8fa74a198c05">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca013277-7aec-4013-b5ca-e626f880ec39" testId="a5d7c5c7-61e3-d1e5-5ef6-559bdf03dc52" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000233" startTime="2024-04-30T15:10:41.2560941-04:00" endTime="2024-04-30T15:10:41.2560942-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca013277-7aec-4013-b5ca-e626f880ec39" />
    <UnitTestResult executionId="67fed126-dd6a-4685-8c3a-c0a3bd560802" testId="04db3c1a-9e2e-4b82-d72e-0ecde4ff1aa9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3150756-04:00" endTime="2024-04-30T15:10:41.3150756-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67fed126-dd6a-4685-8c3a-c0a3bd560802">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36ce6a24-421f-4c63-9caa-8544987c7618" testId="04ed02cc-1006-65b6-5ae6-8d1f09e61fe4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3590858-04:00" endTime="2024-04-30T15:10:41.3590859-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36ce6a24-421f-4c63-9caa-8544987c7618">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be78d746-b55a-436e-8958-a7c991c0f5a1" testId="895bfc18-7a3a-999c-f718-97b48a26d087" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3416345-04:00" endTime="2024-04-30T15:10:41.3416346-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be78d746-b55a-436e-8958-a7c991c0f5a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="12cdaa96-e201-4b44-8c8b-8a4338b86a2f" testId="91dec442-1e98-f1c4-bfdb-35f69b70f9bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: PlusToken, text: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000140" startTime="2024-04-30T15:10:41.3853533-04:00" endTime="2024-04-30T15:10:41.3853534-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12cdaa96-e201-4b44-8c8b-8a4338b86a2f">
      <Output>
        <StdOut>Expected kind: PlusToken, Actual kind: PlusToken&#xD;
Expected text: '+', Actual text: '+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18934173-5ec5-47bf-9932-5840361ecd72" testId="2dadfce3-2433-7830-4f3b-cb77dd1382b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3387749-04:00" endTime="2024-04-30T15:10:41.3387750-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18934173-5ec5-47bf-9932-5840361ecd72">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33a97b13-d1a9-4345-998e-e6ca7e05a5cf" testId="e4c7c0c4-bd41-5d78-6489-31ba242e6c5c" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2679918-04:00" endTime="2024-04-30T15:10:41.2679919-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33a97b13-d1a9-4345-998e-e6ca7e05a5cf" />
    <UnitTestResult executionId="ccd9bd75-5239-4435-abd8-1d4ac2fac6ed" testId="07b91b2b-32c4-5d90-13d9-49dcc248effd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3144273-04:00" endTime="2024-04-30T15:10:41.3144273-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ccd9bd75-5239-4435-abd8-1d4ac2fac6ed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2af8797-65aa-49f5-b93e-5e525d479650" testId="9c404929-aac4-6531-a84e-4c7341b41a86" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3712749-04:00" endTime="2024-04-30T15:10:41.3712750-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2af8797-65aa-49f5-b93e-5e525d479650">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0887eee8-7801-4b8e-adf1-0611409e69f6" testId="292c36b2-3355-2fb5-8487-b491324b2f6a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2760943-04:00" endTime="2024-04-30T15:10:41.2760944-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0887eee8-7801-4b8e-adf1-0611409e69f6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ac0de81-e950-4853-a9bc-2004f3faf372" testId="8cfbeabe-5a29-519f-d50f-1fa7986e2efc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2901376-04:00" endTime="2024-04-30T15:10:41.2901376-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ac0de81-e950-4853-a9bc-2004f3faf372">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5267ea4b-f1c4-47d7-9bf9-3a2fbdc66e7d" testId="c1aac08a-f269-0bbf-e274-e31baed8ff5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000199" startTime="2024-04-30T15:10:41.3240549-04:00" endTime="2024-04-30T15:10:41.3240549-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5267ea4b-f1c4-47d7-9bf9-3a2fbdc66e7d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bfe61f8b-f785-43d1-a9bc-eb1e8acf0ed1" testId="86b8a17b-ad58-f896-f715-d1f51bca7765" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000256" startTime="2024-04-30T15:10:41.3043321-04:00" endTime="2024-04-30T15:10:41.3043322-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bfe61f8b-f785-43d1-a9bc-eb1e8acf0ed1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a0cbfff-6026-49b3-932b-c0cd40925420" testId="f415a706-6309-b096-b079-64237d4cced9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3463471-04:00" endTime="2024-04-30T15:10:41.3463472-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a0cbfff-6026-49b3-932b-c0cd40925420">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8da0897-69a1-4c18-9b07-698f337e52c1" testId="f7ba2ee8-957c-9133-ec07-a324b409ee19" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000335" startTime="2024-04-30T15:10:41.2537860-04:00" endTime="2024-04-30T15:10:41.2537861-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8da0897-69a1-4c18-9b07-698f337e52c1" />
    <UnitTestResult executionId="41105584-dc77-4886-9e04-d5a86ce75e85" testId="7b7cda58-bfba-0a8c-939e-e7068d41b601" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3019355-04:00" endTime="2024-04-30T15:10:41.3019355-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41105584-dc77-4886-9e04-d5a86ce75e85">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5248d70-35c3-4f04-9f67-0a9a0b155175" testId="dc5267ea-c6dd-7107-7014-36fe7c569060" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 + 2 * 3&quot;, expectedValue: 7)" computerName="BRUNO" duration="00:00:00.0000188" startTime="2024-04-30T15:10:41.2704482-04:00" endTime="2024-04-30T15:10:41.2704483-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5248d70-35c3-4f04-9f67-0a9a0b155175" />
    <UnitTestResult executionId="da7dd312-bfc4-4377-8910-bd950eb3a49e" testId="322e705e-97b2-f3b9-b16c-8202b93f7ede" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000231" startTime="2024-04-30T15:10:41.2746780-04:00" endTime="2024-04-30T15:10:41.2746781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da7dd312-bfc4-4377-8910-bd950eb3a49e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="89fa3d3d-9762-4b5e-a5d5-4512bc1d06cb" testId="c5601ea6-b7e4-fcb1-ba95-8505570050d7" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000184" startTime="2024-04-30T15:10:41.2680259-04:00" endTime="2024-04-30T15:10:41.2680259-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89fa3d3d-9762-4b5e-a5d5-4512bc1d06cb" />
    <UnitTestResult executionId="e14b809d-a518-4f43-87bf-39edf71dc8ef" testId="91598381-0aa2-05fd-d092-d01eefedc8f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000124" startTime="2024-04-30T15:10:41.2841615-04:00" endTime="2024-04-30T15:10:41.2841615-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e14b809d-a518-4f43-87bf-39edf71dc8ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0695055c-e0f0-4630-9659-a3b8a8080179" testId="793406c9-b5ea-4e3f-7f4b-02dc29a281b8" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2620262-04:00" endTime="2024-04-30T15:10:41.2620262-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0695055c-e0f0-4630-9659-a3b8a8080179" />
    <UnitTestResult executionId="3e9f634d-d0f3-458c-acab-afad5502a9bf" testId="bc84a832-64b4-c9c3-a7c9-fc6bb57bd8f1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000137" startTime="2024-04-30T15:10:41.2757650-04:00" endTime="2024-04-30T15:10:41.2757650-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e9f634d-d0f3-458c-acab-afad5502a9bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7d35643-4e8f-49f2-9cde-b0bbfb8808f9" testId="8f5a4cf2-e169-a407-f39b-ffd2368e86b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3415798-04:00" endTime="2024-04-30T15:10:41.3415799-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7d35643-4e8f-49f2-9cde-b0bbfb8808f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca3df0e8-c5bb-4c37-ade7-2c36e9fc0952" testId="faabcec2-bf48-2a21-7f5a-6810518ac9d0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3713210-04:00" endTime="2024-04-30T15:10:41.3713210-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca3df0e8-c5bb-4c37-ade7-2c36e9fc0952">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3cc98646-5307-4b64-82b5-f3148c0e78f8" testId="a1b68a48-1ec2-b9a7-7400-72a1c2ff56d9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2815818-04:00" endTime="2024-04-30T15:10:41.2815819-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cc98646-5307-4b64-82b5-f3148c0e78f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39726975-91b9-4829-8fc8-1e6fe9351829" testId="6c67ff08-f95f-c2c1-c6b2-9a48b898f459" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3528523-04:00" endTime="2024-04-30T15:10:41.3528524-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39726975-91b9-4829-8fc8-1e6fe9351829">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be84efbd-2091-476c-bf74-002e635e8b2a" testId="282134f2-fd8a-5245-2f12-9d92414616b6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000264" startTime="2024-04-30T15:10:41.2997147-04:00" endTime="2024-04-30T15:10:41.2997147-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be84efbd-2091-476c-bf74-002e635e8b2a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ef3d75c-2778-4b87-a4e4-579fa4bca753" testId="ba2d266d-e3c4-ed52-c910-51d17420a2ec" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2664781-04:00" endTime="2024-04-30T15:10:41.2664781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ef3d75c-2778-4b87-a4e4-579fa4bca753" />
    <UnitTestResult executionId="017c1559-4609-48b2-a430-64bf2032e473" testId="1f0c2afb-36c6-51c8-aa4c-f5b72f00edd5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3104727-04:00" endTime="2024-04-30T15:10:41.3104728-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="017c1559-4609-48b2-a430-64bf2032e473">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e64d2cd2-1b7b-425a-9033-13ce98713d37" testId="3f3f5f6c-d857-3ae0-9bcf-447f8e4e1486" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3367685-04:00" endTime="2024-04-30T15:10:41.3367685-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e64d2cd2-1b7b-425a-9033-13ce98713d37">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="64ab6931-bef5-4c94-a6dc-c400648a29a7" testId="3b6b3361-7b41-b780-77d0-9262f55bfc91" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3285647-04:00" endTime="2024-04-30T15:10:41.3285648-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="64ab6931-bef5-4c94-a6dc-c400648a29a7">
      <Output>
        <StdOut>Testing pair with explicit separator: '=	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1b81795-9a59-401c-977f-45baba92b6f6" testId="0335d6f0-a5c5-93e8-73de-8ea15d594c98" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: SlashToken)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2734842-04:00" endTime="2024-04-30T15:10:41.2734842-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1b81795-9a59-401c-977f-45baba92b6f6" />
    <UnitTestResult executionId="c4685fb2-873a-4eaf-af7a-72476b6348ab" testId="71f1c7b5-4442-472a-ed86-d31b32a1610e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2866149-04:00" endTime="2024-04-30T15:10:41.2866150-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4685fb2-873a-4eaf-af7a-72476b6348ab">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5bc7cc38-55b1-4268-b49c-1c3cea584e55" testId="e719c5b0-b18f-2ed4-ef3b-0d9c7c036d87" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True != False&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000605" startTime="2024-04-30T15:10:41.2715967-04:00" endTime="2024-04-30T15:10:41.2715968-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5bc7cc38-55b1-4268-b49c-1c3cea584e55" />
    <UnitTestResult executionId="616e8fba-789a-4983-bff7-7dbe314a64cb" testId="9f907696-e62e-7d5e-faa3-a1026cdaa905" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.3044135-04:00" endTime="2024-04-30T15:10:41.3044136-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="616e8fba-789a-4983-bff7-7dbe314a64cb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6492fe99-31d8-4275-88a0-ecda27f20735" testId="baeb2572-ea31-9ab9-2b30-36ca6fd6e405" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2997743-04:00" endTime="2024-04-30T15:10:41.2997744-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6492fe99-31d8-4275-88a0-ecda27f20735">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c91c086a-cb18-43d2-80ca-37f94b0acb82" testId="ea74627d-7c0b-604e-141b-b95ab24e5e13" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2967757-04:00" endTime="2024-04-30T15:10:41.2967757-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c91c086a-cb18-43d2-80ca-37f94b0acb82">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c74a7a64-4de1-455f-8447-dad554c86ded" testId="0946629c-4810-69c7-0110-8202591122a4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3170540-04:00" endTime="2024-04-30T15:10:41.3170540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c74a7a64-4de1-455f-8447-dad554c86ded">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="87360d76-c783-46c6-a71d-3a80a025d4d9" testId="69d334cd-e5e5-bd6d-eee8-627c2cade6fd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.2810221-04:00" endTime="2024-04-30T15:10:41.2810222-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87360d76-c783-46c6-a71d-3a80a025d4d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86a7fd92-835f-479e-97de-fda78ddf4c78" testId="38aeeebf-2015-d81e-0616-89cf0f9cde39" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3600873-04:00" endTime="2024-04-30T15:10:41.3600874-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86a7fd92-835f-479e-97de-fda78ddf4c78">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2672c5f2-8bc5-4731-8977-a60607ee3b13" testId="721e756c-b7b3-4e3b-237e-440d75ee9eb8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3601755-04:00" endTime="2024-04-30T15:10:41.3601756-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2672c5f2-8bc5-4731-8977-a60607ee3b13">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ffd8e560-8f19-45fd-abbe-c3031f1a7bc7" testId="f8dc3149-4659-ccfd-ae3d-582c929a49a9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3838343-04:00" endTime="2024-04-30T15:10:41.3838344-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffd8e560-8f19-45fd-abbe-c3031f1a7bc7">
      <Output>
        <StdOut>Testing pair: '/*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38dc5abd-1fa6-4a0c-bea1-d35e11c0bb91" testId="4d76a921-3fcf-29dc-4dd3-c780d5d0b8df" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3074357-04:00" endTime="2024-04-30T15:10:41.3074357-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38dc5abd-1fa6-4a0c-bea1-d35e11c0bb91">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91a02d6b-70d0-409a-b980-1d955e2c3a25" testId="dd31cbbb-5445-df5a-3096-6086391f6519" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3562339-04:00" endTime="2024-04-30T15:10:41.3562339-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91a02d6b-70d0-409a-b980-1d955e2c3a25">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f9b0cdd-f72a-4e5f-9695-9325b0390999" testId="5fc67340-5f87-a88d-6d59-26b2199a4104" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000144" startTime="2024-04-30T15:10:41.3801590-04:00" endTime="2024-04-30T15:10:41.3801591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f9b0cdd-f72a-4e5f-9695-9325b0390999">
      <Output>
        <StdOut>Testing pair: '+a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ca1def2-18f9-4bc7-baf4-a403b99e1f07" testId="0a4fa741-2b74-d6a1-fa95-6f3569dfeab8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2766490-04:00" endTime="2024-04-30T15:10:41.2766490-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ca1def2-18f9-4bc7-baf4-a403b99e1f07">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="131fbcd9-ceb2-44c1-8594-bcd11d5687dd" testId="ddf30769-3901-7c63-0655-c6557a394e21" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2643321-04:00" endTime="2024-04-30T15:10:41.2643322-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="131fbcd9-ceb2-44c1-8594-bcd11d5687dd" />
    <UnitTestResult executionId="357779ea-c132-4055-be91-762cc0e89f3d" testId="863d7ff3-3861-1083-9610-47e08df26e7c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3188090-04:00" endTime="2024-04-30T15:10:41.3188091-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="357779ea-c132-4055-be91-762cc0e89f3d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5c24bcf-9252-441c-ba37-a6d5080c638d" testId="6cba16b8-941c-3619-9a6b-e1a0280bc62a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.2810784-04:00" endTime="2024-04-30T15:10:41.2810784-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5c24bcf-9252-441c-ba37-a6d5080c638d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c00c0d65-6ee9-4bcc-9399-3f82d5ed86bc" testId="4721f483-4ccd-b9af-34c2-5560a2095b58" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3125713-04:00" endTime="2024-04-30T15:10:41.3125713-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c00c0d65-6ee9-4bcc-9399-3f82d5ed86bc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35b0a12f-6d4d-4781-8f05-f97405deef38" testId="ebba3194-8aa9-efdd-5fbb-73128887c60d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3454884-04:00" endTime="2024-04-30T15:10:41.3454884-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35b0a12f-6d4d-4781-8f05-f97405deef38">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d82b9bc4-d780-40d7-a600-d43f70134661" testId="543d7e3c-10cf-b135-dc78-d6ca78ee3c5c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2679773-04:00" endTime="2024-04-30T15:10:41.2679774-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d82b9bc4-d780-40d7-a600-d43f70134661">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da248125-108b-4b1f-9ffb-a145bb9fa50d" testId="e33ccd29-ab0d-8e2e-71ea-738d0787a423" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3484481-04:00" endTime="2024-04-30T15:10:41.3484482-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da248125-108b-4b1f-9ffb-a145bb9fa50d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df270390-a1b6-42e7-a947-81ad1261f81e" testId="9bad1686-214d-5c13-5cd9-4bf78a147bd3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3144552-04:00" endTime="2024-04-30T15:10:41.3144552-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df270390-a1b6-42e7-a947-81ad1261f81e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ee4256b-8f6f-4882-90a1-260d4897143a" testId="bb28772e-b488-e3c0-bcf4-0a67c14f3163" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3124916-04:00" endTime="2024-04-30T15:10:41.3124917-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ee4256b-8f6f-4882-90a1-260d4897143a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="440d766e-9011-401c-bf9f-117e7c2d6a14" testId="df26d3b9-f003-5f23-426e-c06ccd4a83bd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3563928-04:00" endTime="2024-04-30T15:10:41.3563929-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="440d766e-9011-401c-bf9f-117e7c2d6a14">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cfa2df08-db3a-4b0d-a4d0-4cd68222f471" testId="296b6783-b6a1-1f23-9ff9-498cb3e234a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3108902-04:00" endTime="2024-04-30T15:10:41.3108902-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfa2df08-db3a-4b0d-a4d0-4cd68222f471">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="149149a4-2b94-4f79-a13a-356409d2244f" testId="ddf6f135-86d0-9637-6276-da22d7aa96d6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3723339-04:00" endTime="2024-04-30T15:10:41.3723340-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="149149a4-2b94-4f79-a13a-356409d2244f">
      <Output>
        <StdOut>Testing pair: ')-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc8dc46b-e55f-4cfb-9225-2eecc137f437" testId="b3bd7f8d-0f1f-6936-9169-5efeb021948f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3507931-04:00" endTime="2024-04-30T15:10:41.3507932-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc8dc46b-e55f-4cfb-9225-2eecc137f437">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="60c95e1c-2fd0-4046-ba10-9de079debce0" testId="373d0b5a-6be4-ceb5-f920-6e8b98355e38" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3173500-04:00" endTime="2024-04-30T15:10:41.3173500-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60c95e1c-2fd0-4046-ba10-9de079debce0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e380f60d-6fce-48bc-8dcb-d854c2d092aa" testId="3c919bbd-7ddc-e420-7b5c-9c1d43e66900" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3828567-04:00" endTime="2024-04-30T15:10:41.3828567-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e380f60d-6fce-48bc-8dcb-d854c2d092aa">
      <Output>
        <StdOut>Testing pair: '*123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8257256-e0d5-4077-b70a-6070a70eeeaf" testId="4fab569a-2e8d-5c5a-db86-ae85721d79e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3159788-04:00" endTime="2024-04-30T15:10:41.3159788-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8257256-e0d5-4077-b70a-6070a70eeeaf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c7c9517-3b2d-4984-8238-abd8608d22b9" testId="7bbb0f02-160e-1591-e618-d763db5ab4af" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3300812-04:00" endTime="2024-04-30T15:10:41.3300813-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c7c9517-3b2d-4984-8238-abd8608d22b9">
      <Output>
        <StdOut>Testing pair with explicit separator: '==	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eca81b96-8e9c-4b6b-a91b-6b42b42fa2bc" testId="24b61435-bce1-7991-7d37-b00bc47339d4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3110141-04:00" endTime="2024-04-30T15:10:41.3110142-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eca81b96-8e9c-4b6b-a91b-6b42b42fa2bc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66355291-880e-4af6-865a-156af02323bf" testId="f937a965-a506-0fd0-6005-a18c2e13083a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2845622-04:00" endTime="2024-04-30T15:10:41.2845622-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66355291-880e-4af6-865a-156af02323bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7c8b3751-e6c9-468f-accd-368ed469857d" testId="8e170dc6-a8dd-5e54-857a-dce5e3b444b1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000208" startTime="2024-04-30T15:10:41.2928364-04:00" endTime="2024-04-30T15:10:41.2928364-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c8b3751-e6c9-468f-accd-368ed469857d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d96d165-4e0b-4dbb-acda-8d0e6e1b7116" testId="9bee401e-d51e-a977-67eb-72ad4761a646" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2624515-04:00" endTime="2024-04-30T15:10:41.2624516-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d96d165-4e0b-4dbb-acda-8d0e6e1b7116">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e5877421-3f53-4273-ad21-47ada61d418f" testId="1457a30a-82e9-b48c-378a-3a0036838e02" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3443561-04:00" endTime="2024-04-30T15:10:41.3443562-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5877421-3f53-4273-ad21-47ada61d418f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="674ea246-3ed3-4f15-827f-c375e9525887" testId="233436fb-7e81-49ab-ce4e-c4aa1312968c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.2953773-04:00" endTime="2024-04-30T15:10:41.2953774-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="674ea246-3ed3-4f15-827f-c375e9525887">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c287bf1d-2479-4213-a5bf-098fe46e2395" testId="53d9f532-8011-9f0d-f90c-d0ae9205300e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2937960-04:00" endTime="2024-04-30T15:10:41.2937960-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c287bf1d-2479-4213-a5bf-098fe46e2395">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c709ff95-84d8-4b09-b5ce-96b62a719698" testId="40a21a59-709d-c67b-98ef-403d40a831fd" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000225" startTime="2024-04-30T15:10:41.2651383-04:00" endTime="2024-04-30T15:10:41.2651383-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c709ff95-84d8-4b09-b5ce-96b62a719698" />
    <UnitTestResult executionId="c6094b4d-bb8d-4410-b4ca-db6eb108b33a" testId="cb8b2a55-e397-d4f9-1645-9fb4780fc14b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3527185-04:00" endTime="2024-04-30T15:10:41.3527185-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6094b4d-bb8d-4410-b4ca-db6eb108b33a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9460a25-4400-4d3c-97e5-ee6478e5e0c7" testId="474816c7-e6ca-82e0-f8e8-ab2978be6e1b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000348" startTime="2024-04-30T15:10:41.3462485-04:00" endTime="2024-04-30T15:10:41.3462486-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9460a25-4400-4d3c-97e5-ee6478e5e0c7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f32e7d6-1c9c-4c74-9370-18747ccaee78" testId="9817940b-51ef-a6e3-e88d-66e1a32cdf86" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2968031-04:00" endTime="2024-04-30T15:10:41.2968031-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f32e7d6-1c9c-4c74-9370-18747ccaee78">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49101e7b-66bc-4fe7-8119-9370334b5010" testId="10bd0d99-dd11-97a5-08bf-8ee974d7db00" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3134024-04:00" endTime="2024-04-30T15:10:41.3134025-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49101e7b-66bc-4fe7-8119-9370334b5010">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53056227-0089-423b-87f2-641cfff5e130" testId="34e241f5-85a0-cc69-909f-6757093ed9f0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3109268-04:00" endTime="2024-04-30T15:10:41.3109268-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53056227-0089-423b-87f2-641cfff5e130">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a61f34d-c74e-42bb-b7fb-241428908904" testId="dc772692-58ad-043e-bc85-d589926b199e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3642965-04:00" endTime="2024-04-30T15:10:41.3642966-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a61f34d-c74e-42bb-b7fb-241428908904">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d015dee-e53c-42b2-9a4c-ce43897d1e95" testId="1de80ec0-3369-3b04-c4aa-4be357da8a65" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3109872-04:00" endTime="2024-04-30T15:10:41.3109873-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d015dee-e53c-42b2-9a4c-ce43897d1e95">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="64c640f3-add6-4a23-af70-339842c18ebf" testId="c8f4697b-44f7-ec79-2ce0-69ad63c37cf3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0005256" startTime="2024-04-30T15:10:41.3718834-04:00" endTime="2024-04-30T15:10:41.3718834-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="64c640f3-add6-4a23-af70-339842c18ebf">
      <Output>
        <StdOut>Testing pair: '-reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fabed7d3-8bba-4293-89b0-1771cfd76f92" testId="36ba16f7-73e8-5f83-fd44-7d3b363a82ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000123" startTime="2024-04-30T15:10:41.3650759-04:00" endTime="2024-04-30T15:10:41.3650759-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fabed7d3-8bba-4293-89b0-1771cfd76f92">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17edc5b1-d062-4754-9115-fe2e1e3aa55a" testId="e5a3fb17-8f6a-c139-8856-14eeb854f48b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3085005-04:00" endTime="2024-04-30T15:10:41.3085005-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17edc5b1-d062-4754-9115-fe2e1e3aa55a">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ef51413-d2fb-4308-b59b-b39da09d6b52" testId="a2a9db68-2628-daf3-1d5b-49839ec4a983" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3661908-04:00" endTime="2024-04-30T15:10:41.3661909-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ef51413-d2fb-4308-b59b-b39da09d6b52">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb790965-2821-45ba-ae64-2dcbdf2ab6f8" testId="3cbcfa27-4d7e-744e-d193-de1339286265" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2958694-04:00" endTime="2024-04-30T15:10:41.2958695-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb790965-2821-45ba-ae64-2dcbdf2ab6f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7faff708-f592-4e09-9c11-48a4f9502202" testId="6ddfe2a0-bec5-c49a-8740-8a53e6b49351" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3526729-04:00" endTime="2024-04-30T15:10:41.3526729-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7faff708-f592-4e09-9c11-48a4f9502202">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c85fb488-1c4f-4088-8910-f1f98886e6cb" testId="abb98cdc-db56-2527-f25f-fc0776e9ac6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000134" startTime="2024-04-30T15:10:41.2809609-04:00" endTime="2024-04-30T15:10:41.2809609-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c85fb488-1c4f-4088-8910-f1f98886e6cb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ff31343-bed3-4301-b7a6-1666956bd18c" testId="25e6bc71-97ec-816c-ca78-3c6cccda0ba0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3184554-04:00" endTime="2024-04-30T15:10:41.3184554-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ff31343-bed3-4301-b7a6-1666956bd18c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1057f7bb-738d-4313-b727-e3ec7d10c46c" testId="667b67b4-123f-5541-0ee4-5e637e6aefbb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3414689-04:00" endTime="2024-04-30T15:10:41.3414690-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1057f7bb-738d-4313-b727-e3ec7d10c46c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="980c344f-337a-4009-a3af-1f43be148c69" testId="c16ffc46-c2db-fce9-310c-9b3ea87b1b66" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3764010-04:00" endTime="2024-04-30T15:10:41.3764011-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="980c344f-337a-4009-a3af-1f43be148c69">
      <Output>
        <StdOut>Testing pair: '=or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d4200f0-5ae8-43e5-adb0-4b28e936d7e3" testId="591508d6-83aa-305d-79fd-6edf55999706" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3195332-04:00" endTime="2024-04-30T15:10:41.3195332-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d4200f0-5ae8-43e5-adb0-4b28e936d7e3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e0afd75b-16a8-46e1-aa78-7b5058fba6fc" testId="b17962e0-59d8-2aef-f927-43e4cfc84331" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000236" startTime="2024-04-30T15:10:41.2669760-04:00" endTime="2024-04-30T15:10:41.2669760-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0afd75b-16a8-46e1-aa78-7b5058fba6fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54831116-05bc-4577-8a80-7ada1a25f91b" testId="9459469a-c5ba-5862-a4df-cd7979acabd1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3193638-04:00" endTime="2024-04-30T15:10:41.3193639-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54831116-05bc-4577-8a80-7ada1a25f91b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5e75f13-96c9-4449-9000-16b74204d85e" testId="e488992c-efc4-b05e-f736-39385d1ca220" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2762320-04:00" endTime="2024-04-30T15:10:41.2762320-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5e75f13-96c9-4449-9000-16b74204d85e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="292589bb-2e72-47c6-98e8-429ff485a797" testId="1815e82a-9441-6fcc-5630-07e10b12a97e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3322225-04:00" endTime="2024-04-30T15:10:41.3322225-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="292589bb-2e72-47c6-98e8-429ff485a797">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b044320b-2d60-4690-9279-05274d88bdb3" testId="6773f377-fc7d-9568-a15d-35527c842db8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2850905-04:00" endTime="2024-04-30T15:10:41.2850906-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b044320b-2d60-4690-9279-05274d88bdb3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eeeeefc6-9a02-4878-bbd2-00f5d423e323" testId="7c3a1517-60e4-c0b4-7622-e1707a7ae41c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3762933-04:00" endTime="2024-04-30T15:10:41.3762934-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eeeeefc6-9a02-4878-bbd2-00f5d423e323">
      <Output>
        <StdOut>Testing pair: '123or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ea3fe87-b880-47e5-8d0f-3cfa1469b2af" testId="0bb9b590-c574-13c4-3f4f-0597b98bf335" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000206" startTime="2024-04-30T15:10:41.2692705-04:00" endTime="2024-04-30T15:10:41.2692705-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ea3fe87-b880-47e5-8d0f-3cfa1469b2af">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a860806-7f78-409d-ad80-9fc0e8230175" testId="28faa725-c103-bba5-7e01-205a73572d01" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000223" startTime="2024-04-30T15:10:41.2724971-04:00" endTime="2024-04-30T15:10:41.2724971-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a860806-7f78-409d-ad80-9fc0e8230175">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="749392de-ce0f-4a0e-b40d-c14dabcd4b02" testId="2fff00b8-33ad-55ce-3df9-4490c6103e94" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2776855-04:00" endTime="2024-04-30T15:10:41.2776855-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="749392de-ce0f-4a0e-b40d-c14dabcd4b02">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d1aafdd4-0ff1-4007-ab0e-2e8fa7f5f0db" testId="d92df725-e1d8-f617-db26-09e684180403" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3690678-04:00" endTime="2024-04-30T15:10:41.3690679-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d1aafdd4-0ff1-4007-ab0e-2e8fa7f5f0db">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="316aff6e-3e67-4b98-b071-0a8a8fd90b6e" testId="352c5160-69d4-4e67-8ae9-382be3f2aaa3" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000217" startTime="2024-04-30T15:10:41.2675252-04:00" endTime="2024-04-30T15:10:41.2675252-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="316aff6e-3e67-4b98-b071-0a8a8fd90b6e" />
    <UnitTestResult executionId="40285740-5ee3-42f1-8cfa-0f72f32276a1" testId="9caa0bf5-4f9a-4b98-df88-a2b19464a5d0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3169754-04:00" endTime="2024-04-30T15:10:41.3169754-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40285740-5ee3-42f1-8cfa-0f72f32276a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="34f978b2-ba07-41a7-b0dc-77881f6c1b31" testId="746ad2ef-3beb-be6b-fc99-43e979c1f0ba" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.2611137-04:00" endTime="2024-04-30T15:10:41.2611138-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34f978b2-ba07-41a7-b0dc-77881f6c1b31" />
    <UnitTestResult executionId="d66a0c26-8140-4463-91b5-f22f849c3a35" testId="57312071-b0b0-21fd-62c3-97ce67bd534f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000127" startTime="2024-04-30T15:10:41.2683220-04:00" endTime="2024-04-30T15:10:41.2683221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d66a0c26-8140-4463-91b5-f22f849c3a35" />
    <UnitTestResult executionId="a96eb6f8-3e8f-4463-87ae-5f4d827b66e9" testId="5f7dcea0-3d69-1407-8f03-bfcbcf02f27a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.3027755-04:00" endTime="2024-04-30T15:10:41.3027755-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a96eb6f8-3e8f-4463-87ae-5f4d827b66e9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3904a0ca-e832-452b-b4cb-1f12d760ef95" testId="a5d2fe5c-40b9-a00e-2f30-2c2999c0e904" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2760619-04:00" endTime="2024-04-30T15:10:41.2760619-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3904a0ca-e832-452b-b4cb-1f12d760ef95">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2fc5a4eb-8bcf-4763-b84d-55c9ae76000e" testId="cae1a2e5-adce-8de1-73c9-222c9c4136a0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2617503-04:00" endTime="2024-04-30T15:10:41.2617504-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fc5a4eb-8bcf-4763-b84d-55c9ae76000e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54fbd1b8-4992-47a6-95d3-af371e83a023" testId="a40a7cde-7f1f-b79e-8f2a-4dcabd0f541a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000298" startTime="2024-04-30T15:10:41.2633167-04:00" endTime="2024-04-30T15:10:41.2633168-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54fbd1b8-4992-47a6-95d3-af371e83a023">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3ca91c73-474e-4722-b257-5c5639217dc2" testId="5e9c8d8b-2e1d-048c-f99b-129e36038b28" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2610924-04:00" endTime="2024-04-30T15:10:41.2610925-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ca91c73-474e-4722-b257-5c5639217dc2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f3b6902c-b305-41e0-b680-5dd7575d64ad" testId="e74bdbe4-eda0-701c-3df6-918b86926662" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.3018771-04:00" endTime="2024-04-30T15:10:41.3018771-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3b6902c-b305-41e0-b680-5dd7575d64ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a928bba-8ace-48d7-85a7-3773b89b7d6e" testId="b37b3153-b8d2-34c2-a49d-56bd5625b823" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000127" startTime="2024-04-30T15:10:41.3752342-04:00" endTime="2024-04-30T15:10:41.3752342-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a928bba-8ace-48d7-85a7-3773b89b7d6e">
      <Output>
        <StdOut>Testing pair: '*not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdd9ba24-af44-4e5c-8d89-da0de5c9e789" testId="e9809c4f-04e1-b87f-678b-e1a8d8674c22" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000229" startTime="2024-04-30T15:10:41.2703220-04:00" endTime="2024-04-30T15:10:41.2703221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdd9ba24-af44-4e5c-8d89-da0de5c9e789">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ed6e331-a481-4afe-a2b3-e4fc4dd1428d" testId="aad798fe-de41-655a-d019-5ce8f37af00e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3624705-04:00" endTime="2024-04-30T15:10:41.3624706-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ed6e331-a481-4afe-a2b3-e4fc4dd1428d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d1aabc39-161a-4358-9c98-41d68353e384" testId="fad32ae5-c881-6601-cc30-397bdd2f1f1a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2766756-04:00" endTime="2024-04-30T15:10:41.2766757-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d1aabc39-161a-4358-9c98-41d68353e384">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ad3f5b4-98dd-4774-8185-70913dd62496" testId="3e22ab60-1c50-b171-afba-faea93019cbc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3088619-04:00" endTime="2024-04-30T15:10:41.3088620-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ad3f5b4-98dd-4774-8185-70913dd62496">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="185ecd27-4cb4-4a23-ae27-d844425c9d5a" testId="c443ddf5-8533-eb9c-e03f-5d4d1d244968" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3290960-04:00" endTime="2024-04-30T15:10:41.3290960-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="185ecd27-4cb4-4a23-ae27-d844425c9d5a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01a6aed8-c739-42bf-83a0-b0b98548ebee" testId="528e94ad-3e4f-0f67-f3e8-a659bd53354f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.2647518-04:00" endTime="2024-04-30T15:10:41.2647518-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01a6aed8-c739-42bf-83a0-b0b98548ebee" />
    <UnitTestResult executionId="533a5992-9140-4ab8-b47f-874689081ff2" testId="03c0af5c-acf4-386f-b4d1-1ae9634e0542" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3079858-04:00" endTime="2024-04-30T15:10:41.3079858-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="533a5992-9140-4ab8-b47f-874689081ff2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3788c235-c194-417e-b25c-0111e37e0385" testId="69fe0a40-b16e-0094-b606-4aad62a26199" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.3002682-04:00" endTime="2024-04-30T15:10:41.3002682-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3788c235-c194-417e-b25c-0111e37e0385">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b61655b7-dcca-4dfe-ad15-735ef2dce895" testId="4d1cf383-c594-594a-44de-f3ee10f73f54" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2835593-04:00" endTime="2024-04-30T15:10:41.2835594-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b61655b7-dcca-4dfe-ad15-735ef2dce895">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b2127a0-39a0-4a21-82e5-a63b45b61262" testId="dab5afe7-0f29-805a-bde9-8a531234a53d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3646061-04:00" endTime="2024-04-30T15:10:41.3646062-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b2127a0-39a0-4a21-82e5-a63b45b61262">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="344d3224-1940-44c4-bdc6-353246287322" testId="1f003c1e-da2e-7149-8d51-8572348c0bb1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.2756557-04:00" endTime="2024-04-30T15:10:41.2756558-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="344d3224-1940-44c4-bdc6-353246287322">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c3bd80c-8a0f-4216-b96d-1469337c203e" testId="0f095be9-2bbb-25d9-d0a0-3dd027d7db71" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000229" startTime="2024-04-30T15:10:41.2689418-04:00" endTime="2024-04-30T15:10:41.2689418-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c3bd80c-8a0f-4216-b96d-1469337c203e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42de6caa-3fb9-4645-bfc9-0086e3a74312" testId="a1ee421a-2902-b97e-d16f-d4bf268450b9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2859542-04:00" endTime="2024-04-30T15:10:41.2859543-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42de6caa-3fb9-4645-bfc9-0086e3a74312">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e85e695-63b4-423c-8163-ecec2c488495" testId="8fae7a39-2e70-aa95-e9fb-88bf16ba3e4a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3573950-04:00" endTime="2024-04-30T15:10:41.3573950-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e85e695-63b4-423c-8163-ecec2c488495">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e29c723-d068-4f6e-b1e9-b68fdaabc6c2" testId="9a66a788-ed3f-20ef-5577-5eaa2059f650" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2943568-04:00" endTime="2024-04-30T15:10:41.2943568-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e29c723-d068-4f6e-b1e9-b68fdaabc6c2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="29f5743d-a91c-4010-bda0-b01fb0936615" testId="1822004c-e5c1-959f-2ce1-52abfd1cb520" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3105256-04:00" endTime="2024-04-30T15:10:41.3105257-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29f5743d-a91c-4010-bda0-b01fb0936615">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="918c785d-4ee2-4545-9b68-808d3bf8bbfc" testId="fa42e1b3-e34e-f0a3-8c1d-73b1ad018a1b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2612377-04:00" endTime="2024-04-30T15:10:41.2612378-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="918c785d-4ee2-4545-9b68-808d3bf8bbfc" />
    <UnitTestResult executionId="8e2e84a0-294e-4a31-a3f8-879c33775ad9" testId="b508b1a0-9474-1cec-cbb0-45b6446607ef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.3203619-04:00" endTime="2024-04-30T15:10:41.3203619-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e2e84a0-294e-4a31-a3f8-879c33775ad9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c473a340-b9c2-4fa1-a4cd-96b8816ace52" testId="2beb7582-ce22-581c-071a-330eb2eb1828" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3357275-04:00" endTime="2024-04-30T15:10:41.3357275-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c473a340-b9c2-4fa1-a4cd-96b8816ace52">
      <Output>
        <StdOut>Testing pair with explicit separator: '==   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5cf57b18-19a0-47c8-916c-c93c5b747140" testId="cb5fba2f-5c15-2eed-9c85-527fa52fd656" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2933092-04:00" endTime="2024-04-30T15:10:41.2933093-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cf57b18-19a0-47c8-916c-c93c5b747140">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea33e63a-1f38-40d2-854a-98e91e3a5d78" testId="1ac4c1ec-c27e-dc02-cf1b-986640fffe9f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2890079-04:00" endTime="2024-04-30T15:10:41.2890081-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea33e63a-1f38-40d2-854a-98e91e3a5d78">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92cc07dc-19f5-40be-9dff-b79155d088bc" testId="689eda27-0ed3-fe0a-6a23-a0e5fad87e53" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3183459-04:00" endTime="2024-04-30T15:10:41.3183460-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92cc07dc-19f5-40be-9dff-b79155d088bc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc3a3a01-343c-4b1b-88ef-faefcaec2f91" testId="b5ec7c5c-e986-fabe-5cac-1841ec4cfde4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2822017-04:00" endTime="2024-04-30T15:10:41.2822017-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc3a3a01-343c-4b1b-88ef-faefcaec2f91">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04d56bb8-17a8-4dee-a461-25bd17c9fda3" testId="3bae51cd-6435-fd29-8f90-90cb46243bc9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3777320-04:00" endTime="2024-04-30T15:10:41.3777321-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04d56bb8-17a8-4dee-a461-25bd17c9fda3">
      <Output>
        <StdOut>Testing pair: '!=reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d628ce1-66d4-4492-a3ad-6150752fbefe" testId="60cf3ef5-b3b5-1f4c-8f05-68a66052a9b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000216" startTime="2024-04-30T15:10:41.2864445-04:00" endTime="2024-04-30T15:10:41.2864445-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d628ce1-66d4-4492-a3ad-6150752fbefe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b10e6507-183e-460f-bf95-0f770a05a726" testId="9e6f8464-2c90-142c-f21e-436039005857" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2750791-04:00" endTime="2024-04-30T15:10:41.2750792-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b10e6507-183e-460f-bf95-0f770a05a726">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44356ea1-d629-4a1a-bb25-d4174b2a7857" testId="02ded587-b99a-23c1-ce7a-ea90d5d3f41c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3833649-04:00" endTime="2024-04-30T15:10:41.3833650-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44356ea1-d629-4a1a-bb25-d4174b2a7857">
      <Output>
        <StdOut>Testing pair: ')and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ca8929f-b787-40ff-9dde-1b78b337dd2d" testId="7e74908f-3b1c-3ac8-d20c-4a54246d9abb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2999178-04:00" endTime="2024-04-30T15:10:41.2999178-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ca8929f-b787-40ff-9dde-1b78b337dd2d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="731c3635-8d04-492e-a7cc-c487d29cd08b" testId="ea7a2060-8204-9a65-570e-1d6d84a96f7c" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2628777-04:00" endTime="2024-04-30T15:10:41.2628777-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="731c3635-8d04-492e-a7cc-c487d29cd08b" />
    <UnitTestResult executionId="9a24b19e-89e5-4b47-b5dd-a1de4562320a" testId="05f6be74-66fd-f7c7-0f6f-990e80720375" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.2836971-04:00" endTime="2024-04-30T15:10:41.2836972-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a24b19e-89e5-4b47-b5dd-a1de4562320a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e587f6b-c7bc-403b-a51e-60ba13e6ca2f" testId="1297c923-fd79-8a3e-e52f-db05c0de4692" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.2620842-04:00" endTime="2024-04-30T15:10:41.2620842-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e587f6b-c7bc-403b-a51e-60ba13e6ca2f" />
    <UnitTestResult executionId="7f86d7a4-6791-4689-8429-06fc7b6e2a2a" testId="d4ba70b1-c039-13a1-45ff-428ac0ea6738" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3240827-04:00" endTime="2024-04-30T15:10:41.3240828-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f86d7a4-6791-4689-8429-06fc7b6e2a2a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e493a03f-fd1f-4b19-a371-eb1254f2c5bd" testId="a94a7259-a1ee-913c-96ee-a4e5a8c9db49" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2629345-04:00" endTime="2024-04-30T15:10:41.2629346-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e493a03f-fd1f-4b19-a371-eb1254f2c5bd" />
    <UnitTestResult executionId="b7f10f03-1397-4615-97f4-bc70531812de" testId="4e95e742-f250-774a-61c0-f1b47e7bc67a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3307589-04:00" endTime="2024-04-30T15:10:41.3307590-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7f10f03-1397-4615-97f4-bc70531812de">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e6cf205-1d78-4bf2-b200-1779059a69ac" testId="6b429fc2-9357-bd5e-3e0f-b54645775faf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.2767849-04:00" endTime="2024-04-30T15:10:41.2767849-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e6cf205-1d78-4bf2-b200-1779059a69ac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06537bff-6483-4115-807b-59a6f99cb8b6" testId="574857b2-e588-56ad-f6bb-bf0becd1ff43" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;not False&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2724220-04:00" endTime="2024-04-30T15:10:41.2724220-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06537bff-6483-4115-807b-59a6f99cb8b6" />
    <UnitTestResult executionId="be285329-6209-4109-ba60-51fcd94a72fb" testId="848fd43c-2b30-afdf-3b69-9874a4a0a45e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.2756288-04:00" endTime="2024-04-30T15:10:41.2756288-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be285329-6209-4109-ba60-51fcd94a72fb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8410551f-85c6-4b22-a5e6-d9f316e930c8" testId="6e649dc9-1c36-2be6-6bb9-8a357e1f9fb9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2926669-04:00" endTime="2024-04-30T15:10:41.2926669-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8410551f-85c6-4b22-a5e6-d9f316e930c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="443a4b8c-86d3-4c26-b48e-3e8e80a742b2" testId="754fd436-2a38-0955-7fdb-7f9c38febecf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3185430-04:00" endTime="2024-04-30T15:10:41.3185431-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="443a4b8c-86d3-4c26-b48e-3e8e80a742b2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0724beca-2427-483d-91bf-973fdb3d5bec" testId="0645a6fe-056e-ce2e-21de-b74a96a64eca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3686186-04:00" endTime="2024-04-30T15:10:41.3686186-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0724beca-2427-483d-91bf-973fdb3d5bec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4da2e6e1-0d58-4eef-9b65-4f5e67abf17a" testId="e1bcfc96-379c-5b0f-0dbb-1a725d508769" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2875551-04:00" endTime="2024-04-30T15:10:41.2875551-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4da2e6e1-0d58-4eef-9b65-4f5e67abf17a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d5f9e8ad-e19e-494c-a8bf-4b95ac7dcbe3" testId="2a26b9b8-9a96-20cc-41be-f0609d0badcd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3289716-04:00" endTime="2024-04-30T15:10:41.3289716-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d5f9e8ad-e19e-494c-a8bf-4b95ac7dcbe3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="15dcc1b4-e186-4247-83e1-787f308fc1ba" testId="6ce8da62-b5f8-672d-599f-ea5f575ba062" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3078454-04:00" endTime="2024-04-30T15:10:41.3078454-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15dcc1b4-e186-4247-83e1-787f308fc1ba">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="37983ce5-42ed-417d-8419-c828f776f831" testId="84668809-bb42-0307-aa2a-ac84540dc4f7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3753516-04:00" endTime="2024-04-30T15:10:41.3753516-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37983ce5-42ed-417d-8419-c828f776f831">
      <Output>
        <StdOut>Testing pair: '(reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0b2eb28c-65b6-4309-950d-4273286b2232" testId="c0f8b334-70ff-780d-c11b-f815ccb412b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3635795-04:00" endTime="2024-04-30T15:10:41.3635796-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b2eb28c-65b6-4309-950d-4273286b2232">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="caf48613-eebe-4a3a-b370-291384fae96d" testId="5fb3d89d-9906-d3d9-fdbf-926779b9d610" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000223" startTime="2024-04-30T15:10:41.3794926-04:00" endTime="2024-04-30T15:10:41.3794926-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="caf48613-eebe-4a3a-b370-291384fae96d">
      <Output>
        <StdOut>Testing pair: '(='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="288e724d-ece9-4f04-bc34-4edb4a3a3bd8" testId="6cef16c6-f632-1ecb-8cdb-dc5e2aab57b8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3677428-04:00" endTime="2024-04-30T15:10:41.3677428-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="288e724d-ece9-4f04-bc34-4edb4a3a3bd8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a6763ab-21b9-4ead-bfc3-93459fc844a1" testId="8be1547b-6e6a-2e20-9fde-e40550f10438" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3665304-04:00" endTime="2024-04-30T15:10:41.3665304-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a6763ab-21b9-4ead-bfc3-93459fc844a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="991dbd24-1509-499a-ac3b-98eec1f99a96" testId="b7e48c3d-8012-0f75-a07d-6ec26f0241d8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3772321-04:00" endTime="2024-04-30T15:10:41.3772321-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="991dbd24-1509-499a-ac3b-98eec1f99a96">
      <Output>
        <StdOut>Testing pair: '+True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bdfe20a4-d3d8-432b-9036-5644ff1a9964" testId="5e4e704e-3ae2-090d-777f-66db55265327" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3397011-04:00" endTime="2024-04-30T15:10:41.3397011-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdfe20a4-d3d8-432b-9036-5644ff1a9964">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d309a05-d51f-4647-8aac-d35e5aa51839" testId="8b0975c9-76d6-552a-80be-b3df846d3c50" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000196" startTime="2024-04-30T15:10:41.2660112-04:00" endTime="2024-04-30T15:10:41.2660112-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d309a05-d51f-4647-8aac-d35e5aa51839" />
    <UnitTestResult executionId="59cb5e55-8ca5-49d8-ae03-30729c8eb101" testId="aa127ae4-9d19-2afe-25d6-0cc7f6c47649" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3425698-04:00" endTime="2024-04-30T15:10:41.3425700-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59cb5e55-8ca5-49d8-ae03-30729c8eb101">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2db016c9-f56d-4143-9306-be8927a4ab34" testId="35f9377a-7ed1-5fdf-492c-e8a7715ea5e2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.3782197-04:00" endTime="2024-04-30T15:10:41.3782197-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2db016c9-f56d-4143-9306-be8927a4ab34">
      <Output>
        <StdOut>Testing pair: '*is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78aa6d2f-f0a6-4aa8-9135-0eb782cdbd99" testId="3733cdd9-2ebd-bb7e-b610-8329e3c584fd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3584613-04:00" endTime="2024-04-30T15:10:41.3584614-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78aa6d2f-f0a6-4aa8-9135-0eb782cdbd99">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d62380eb-c611-47ee-9044-b9e9973dedae" testId="99db7bdb-cf0c-bbc8-c7a9-538e3ff95f5c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2661303-04:00" endTime="2024-04-30T15:10:41.2661303-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d62380eb-c611-47ee-9044-b9e9973dedae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="657d0a6d-d81a-4878-aad7-c937d41d752a" testId="85a4c108-3ca2-d3c2-e8c5-420582eda7fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3833912-04:00" endTime="2024-04-30T15:10:41.3833913-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="657d0a6d-d81a-4878-aad7-c937d41d752a">
      <Output>
        <StdOut>Testing pair: '*/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23a4a4e0-d44d-47ae-9967-da247c4c3b67" testId="7619ad62-05fc-e7d4-d58b-fce7dcc67370" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000501" startTime="2024-04-30T15:10:41.2911600-04:00" endTime="2024-04-30T15:10:41.2911600-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23a4a4e0-d44d-47ae-9967-da247c4c3b67">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33921cc5-2f19-4ccd-82de-acaedf741b0a" testId="5441fae6-0fe4-6e6e-7da1-029bd30f7d6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000480" startTime="2024-04-30T15:10:41.2739003-04:00" endTime="2024-04-30T15:10:41.2739004-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33921cc5-2f19-4ccd-82de-acaedf741b0a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d17436f0-460e-4948-b70f-6bd0927d24ec" testId="07c8cefd-7f2a-e11d-7c2a-ddc46651a14a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3079591-04:00" endTime="2024-04-30T15:10:41.3079591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d17436f0-460e-4948-b70f-6bd0927d24ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca9f72cb-c3c5-4328-bd87-d05c544f5ef8" testId="6433901f-bace-5a58-627e-89465e706e05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3732711-04:00" endTime="2024-04-30T15:10:41.3732712-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca9f72cb-c3c5-4328-bd87-d05c544f5ef8">
      <Output>
        <StdOut>Testing pair: '+not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49542510-9329-43ab-ae6a-030166ffae5c" testId="5ec30bb3-0d63-c142-0d38-740d2a8e6fb9" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2643806-04:00" endTime="2024-04-30T15:10:41.2643806-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49542510-9329-43ab-ae6a-030166ffae5c" />
    <UnitTestResult executionId="f4c8e8b0-3b91-4228-87cf-f076426a831a" testId="51911c0c-a783-83d5-c572-8143c6a92f26" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2693023-04:00" endTime="2024-04-30T15:10:41.2693024-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4c8e8b0-3b91-4228-87cf-f076426a831a" />
    <UnitTestResult executionId="ae154dbd-1803-49e2-b038-e0ec11264cc5" testId="80630e8e-ae32-f223-5925-7a8d486913e1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000245" startTime="2024-04-30T15:10:41.3037446-04:00" endTime="2024-04-30T15:10:41.3037446-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae154dbd-1803-49e2-b038-e0ec11264cc5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a07ebb5-6f49-4aa2-9c5b-23c0ca10d780" testId="3ff0a76d-7152-6c42-6721-c48e73a2124d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3276612-04:00" endTime="2024-04-30T15:10:41.3276612-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a07ebb5-6f49-4aa2-9c5b-23c0ca10d780">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81d9ef3d-0130-43e7-b5ac-67459a20c936" testId="79b93339-c796-01c6-7d95-1801f339a3b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3442986-04:00" endTime="2024-04-30T15:10:41.3442987-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81d9ef3d-0130-43e7-b5ac-67459a20c936">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26746863-3e42-4a12-b929-5329a7c2b9e8" testId="73e21423-d408-9d0a-110e-7b8036bba3d1" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2643005-04:00" endTime="2024-04-30T15:10:41.2643005-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26746863-3e42-4a12-b929-5329a7c2b9e8" />
    <UnitTestResult executionId="ca8592d3-c665-4e4f-9c86-995975a7ae61" testId="1dc6c472-ffaf-4b2e-7e59-ebc84e2a1386" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3650468-04:00" endTime="2024-04-30T15:10:41.3650468-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca8592d3-c665-4e4f-9c86-995975a7ae61">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67bd95d3-ecd7-480a-a85d-0dbac5516585" testId="171de131-b995-6937-5530-d6e667938fff" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3346743-04:00" endTime="2024-04-30T15:10:41.3346744-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67bd95d3-ecd7-480a-a85d-0dbac5516585">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e5d3355-d55f-48df-82ff-1c2a9e983854" testId="7c79ab1e-009c-f703-ada0-a2acfc364e52" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3364439-04:00" endTime="2024-04-30T15:10:41.3364439-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e5d3355-d55f-48df-82ff-1c2a9e983854">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63ee9e32-14eb-43dd-a8f2-d678050b5915" testId="d61c7ec3-391a-850c-ad64-b8106de1db4a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2931345-04:00" endTime="2024-04-30T15:10:41.2931345-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63ee9e32-14eb-43dd-a8f2-d678050b5915">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9bb6c98-b181-40c0-81bb-bd83670987a3" testId="3a5d0aac-7a95-3dc4-98d5-1cb11b17ba92" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2656068-04:00" endTime="2024-04-30T15:10:41.2656068-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9bb6c98-b181-40c0-81bb-bd83670987a3" />
    <UnitTestResult executionId="17796245-05a7-4f18-9822-c0d2583686f9" testId="5c4d160d-6034-b7d4-4318-32b366f2ef7b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.2988095-04:00" endTime="2024-04-30T15:10:41.2988095-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17796245-05a7-4f18-9822-c0d2583686f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf045597-2861-48d7-8eb7-e62c8d4c81ee" testId="79248556-6a4e-8c8c-d60c-14dd0d87fddb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3328484-04:00" endTime="2024-04-30T15:10:41.3328485-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf045597-2861-48d7-8eb7-e62c8d4c81ee">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5eaaf9d7-2365-40f3-bb41-5575646135ef" testId="3cdd10f2-2d1f-2cd4-6e38-b5ddb09d2e34" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3354648-04:00" endTime="2024-04-30T15:10:41.3354649-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5eaaf9d7-2365-40f3-bb41-5575646135ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1de78f27-2cdb-4223-b4f5-2c3f20ed5cee" testId="8658a7b9-f20f-093b-eaf6-9fda0fb99328" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000267" startTime="2024-04-30T15:10:41.2698633-04:00" endTime="2024-04-30T15:10:41.2698633-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1de78f27-2cdb-4223-b4f5-2c3f20ed5cee">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec5e64e6-7c79-4a45-8c87-3d01176d8901" testId="0e829ef9-8c52-683b-7d63-935f0d1babd1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3447262-04:00" endTime="2024-04-30T15:10:41.3447263-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec5e64e6-7c79-4a45-8c87-3d01176d8901">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c4f58a0-f0a5-46dd-ae73-c3050d912b0d" testId="817f24f2-e53b-af3f-7bc8-cb945d7db174" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3832588-04:00" endTime="2024-04-30T15:10:41.3832589-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c4f58a0-f0a5-46dd-ae73-c3050d912b0d">
      <Output>
        <StdOut>Testing pair: '(123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16b14a98-7715-4fc9-96e3-2978a32939bf" testId="6ec8f8db-8e3f-a8db-e522-5ed2c96f596b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3598965-04:00" endTime="2024-04-30T15:10:41.3598965-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16b14a98-7715-4fc9-96e3-2978a32939bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b33e793b-42b6-467f-ba41-d3901b480db9" testId="e8aaf302-679c-dc80-2209-46c620d484ce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2912440-04:00" endTime="2024-04-30T15:10:41.2912440-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b33e793b-42b6-467f-ba41-d3901b480db9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c98cbedd-c721-434a-bc78-036cbf39f0b8" testId="201b7ecb-36d9-3b2e-4072-94d9c4983761" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3150219-04:00" endTime="2024-04-30T15:10:41.3150219-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c98cbedd-c721-434a-bc78-036cbf39f0b8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7bfa3ed-3a34-40a9-9fe4-29615302e2aa" testId="47eae0b1-70ed-9db4-85f5-b905615d2e60" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3671000-04:00" endTime="2024-04-30T15:10:41.3671001-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7bfa3ed-3a34-40a9-9fe4-29615302e2aa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9486d1e0-589f-4847-b625-b5bb84e32375" testId="cb8a591b-1771-b29c-87a0-4d3c174da3a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3313137-04:00" endTime="2024-04-30T15:10:41.3313138-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9486d1e0-589f-4847-b625-b5bb84e32375">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf6026c3-f896-4cf8-8434-e8ff27cc0bbd" testId="83fcadff-2ea7-3701-ff9b-ccd467d2c8a6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2814882-04:00" endTime="2024-04-30T15:10:41.2814883-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf6026c3-f896-4cf8-8434-e8ff27cc0bbd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="00a35511-90fc-4320-9e53-62c203fae812" testId="c889f155-0be9-b79a-e6bb-317b9808aeaa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2999520-04:00" endTime="2024-04-30T15:10:41.2999521-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00a35511-90fc-4320-9e53-62c203fae812">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6aaea1f5-697a-49b8-8a51-3d04042bb20a" testId="c6ee2931-5868-abcc-03c0-f5e0a37a6274" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3124300-04:00" endTime="2024-04-30T15:10:41.3124301-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6aaea1f5-697a-49b8-8a51-3d04042bb20a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6c0c6c2-6474-4857-a1ec-c8db5e5b5116" testId="535573fd-35f9-2ddb-076c-1b89437a63c0" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;x = 10&quot;, expectedValue: 10)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.2737963-04:00" endTime="2024-04-30T15:10:41.2737963-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6c0c6c2-6474-4857-a1ec-c8db5e5b5116" />
    <UnitTestResult executionId="49741781-a993-48c3-aa2f-9298d7fd409a" testId="fd916b1c-f22a-ef36-2921-a46d6adf0c32" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3747857-04:00" endTime="2024-04-30T15:10:41.3747857-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49741781-a993-48c3-aa2f-9298d7fd409a">
      <Output>
        <StdOut>Testing pair: '*loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf871f70-2520-4a7a-b481-b502e2de2cd6" testId="040e36f9-ec88-9ff3-6ddd-845330af1957" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2943039-04:00" endTime="2024-04-30T15:10:41.2943039-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf871f70-2520-4a7a-b481-b502e2de2cd6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d92aacc-b855-46a7-b631-cef4590f9acf" testId="bd4dd3b1-709f-e8ee-5ab7-ca290ebb23a1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3390969-04:00" endTime="2024-04-30T15:10:41.3390970-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d92aacc-b855-46a7-b631-cef4590f9acf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9070e079-b5e3-42b5-9275-38ac4610b585" testId="9772630a-6883-a071-3cee-f0109d62b43a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3088068-04:00" endTime="2024-04-30T15:10:41.3088068-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9070e079-b5e3-42b5-9275-38ac4610b585">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d889aa4-852d-4c20-8d20-a43264404364" testId="2f24b99b-9104-eb95-6631-f14a5ba413c1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2647192-04:00" endTime="2024-04-30T15:10:41.2647192-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d889aa4-852d-4c20-8d20-a43264404364">
      <Output>
        <StdOut>Testing pair with explicit separator: '123
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8ff6f00-e426-4a86-8aab-22063569499e" testId="1114b2aa-c924-b2b8-10d3-bd2923467151" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2993153-04:00" endTime="2024-04-30T15:10:41.2993153-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8ff6f00-e426-4a86-8aab-22063569499e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d2ceadb7-afee-46f1-bcd3-a8fd0054cc49" testId="11abf243-21b1-3a98-35d2-39fecec129a6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3246496-04:00" endTime="2024-04-30T15:10:41.3246496-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2ceadb7-afee-46f1-bcd3-a8fd0054cc49">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e370e1dd-7c88-4bc0-a8aa-e991f22ffb29" testId="e4b7dc0a-6b35-207f-83d1-f1196e79565f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2987226-04:00" endTime="2024-04-30T15:10:41.2987226-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e370e1dd-7c88-4bc0-a8aa-e991f22ffb29">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6a3e9f2-8e29-4edf-8c91-1e9e92d99b4e" testId="bbc988e9-2b51-7338-3c9c-0e28e5e705ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3332226-04:00" endTime="2024-04-30T15:10:41.3332226-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6a3e9f2-8e29-4edf-8c91-1e9e92d99b4e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6aeab25c-20ff-47be-99f7-15a96770bd35" testId="bdb47406-5a57-45a6-7efc-8a99c65ae766" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.3828827-04:00" endTime="2024-04-30T15:10:41.3828828-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6aeab25c-20ff-47be-99f7-15a96770bd35">
      <Output>
        <StdOut>Testing pair: '!=and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76c7128b-9b06-445c-b10a-cbb22c765427" testId="218cd252-afce-fbb4-935b-1cb56ba91aab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.2830283-04:00" endTime="2024-04-30T15:10:41.2830284-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76c7128b-9b06-445c-b10a-cbb22c765427">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2a4a4bc-a79e-4bf1-b843-31a1cc822fce" testId="917081c8-4c35-67a8-ab12-13c2aac956ae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3744335-04:00" endTime="2024-04-30T15:10:41.3744335-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2a4a4bc-a79e-4bf1-b843-31a1cc822fce">
      <Output>
        <StdOut>Testing pair: '(/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1561b887-71ba-427e-a493-006efbafe961" testId="67cd61d0-e417-67fb-fa8c-bf1616a4d473" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3204522-04:00" endTime="2024-04-30T15:10:41.3204523-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1561b887-71ba-427e-a493-006efbafe961">
      <Output>
        <StdOut>Testing pair with explicit separator: '123	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4739119-2cb9-4dda-a9d0-4c029a421580" testId="6f3dca42-92ab-7313-d3e8-bbb4662429bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3083448-04:00" endTime="2024-04-30T15:10:41.3083448-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4739119-2cb9-4dda-a9d0-4c029a421580">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e05085ba-7683-406c-8154-55d6373b2e90" testId="82a43004-da40-7a61-603c-5f4b3f672114" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3307017-04:00" endTime="2024-04-30T15:10:41.3307017-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e05085ba-7683-406c-8154-55d6373b2e90">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e76a9a11-0bb1-4017-993a-7f9312023965" testId="273b8cff-a6b9-02a8-3b91-8dccd58d5a50" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3544889-04:00" endTime="2024-04-30T15:10:41.3544889-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e76a9a11-0bb1-4017-993a-7f9312023965">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="637a6675-f1cf-4ae4-9349-6ddc93eeaeac" testId="4d5dc888-effc-180f-9ad5-da4fb4052456" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2646399-04:00" endTime="2024-04-30T15:10:41.2646399-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="637a6675-f1cf-4ae4-9349-6ddc93eeaeac" />
    <UnitTestResult executionId="2b45707f-6ce2-43ed-8547-70af94dd3610" testId="44409d9d-754f-e51e-96e3-d6912b5298b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3342498-04:00" endTime="2024-04-30T15:10:41.3342498-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b45707f-6ce2-43ed-8547-70af94dd3610">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0439746-a3df-4fce-b7d1-592028f6a4c8" testId="cead969c-8a71-2ca6-3e73-e37adc96884d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3077914-04:00" endTime="2024-04-30T15:10:41.3077914-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0439746-a3df-4fce-b7d1-592028f6a4c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e369607d-3b3e-41f5-8cdd-25b164ef3004" testId="23653d3a-3f40-7f66-0cb0-f41e810c471b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000184" startTime="2024-04-30T15:10:41.3024740-04:00" endTime="2024-04-30T15:10:41.3024740-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e369607d-3b3e-41f5-8cdd-25b164ef3004">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6990a173-605a-4f3f-96e1-96d2c32fc6c9" testId="02cb5229-9e22-d16f-c533-58496aed8a74" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3189547-04:00" endTime="2024-04-30T15:10:41.3189547-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6990a173-605a-4f3f-96e1-96d2c32fc6c9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d104a89c-ddf4-4690-bda0-d75128afddeb" testId="c9473930-6aea-13e9-e12e-8ea5ef88ca22" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3100608-04:00" endTime="2024-04-30T15:10:41.3100609-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d104a89c-ddf4-4690-bda0-d75128afddeb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88fc6c9d-e29b-4672-879b-fce9005767ab" testId="153972a2-e76f-e124-12e1-307fd06427ad" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True is False&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000202" startTime="2024-04-30T15:10:41.2728044-04:00" endTime="2024-04-30T15:10:41.2728045-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88fc6c9d-e29b-4672-879b-fce9005767ab" />
    <UnitTestResult executionId="f2621edc-12fe-463d-8318-558f1418c148" testId="de1ba7af-c501-e3b1-1a99-04d4905d97fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3681537-04:00" endTime="2024-04-30T15:10:41.3681538-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2621edc-12fe-463d-8318-558f1418c148">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="403b3163-6537-41e5-80af-cb45c9799e36" testId="5e2be895-ff3a-095d-75e3-37299d0f4962" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NotKeyword, text: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000144" startTime="2024-04-30T15:10:41.3863090-04:00" endTime="2024-04-30T15:10:41.3863090-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="403b3163-6537-41e5-80af-cb45c9799e36">
      <Output>
        <StdOut>Expected kind: NotKeyword, Actual kind: NotKeyword&#xD;
Expected text: 'not', Actual text: 'not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56f4614b-b217-4540-8963-2f8595da7960" testId="0d62812d-b36e-4014-9b81-58d7952d3fce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2992284-04:00" endTime="2024-04-30T15:10:41.2992284-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56f4614b-b217-4540-8963-2f8595da7960">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b9c3e70-ab90-41f6-b40b-4a459c82e100" testId="83cd0db3-f064-df18-2507-ba9cc6514cb9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3048575-04:00" endTime="2024-04-30T15:10:41.3048576-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b9c3e70-ab90-41f6-b40b-4a459c82e100">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62dee29a-63e1-4c76-aabd-b674a2af8494" testId="70b3f917-2ca9-4b43-d115-87783b17996c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3626445-04:00" endTime="2024-04-30T15:10:41.3626446-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62dee29a-63e1-4c76-aabd-b674a2af8494">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a72f8357-885c-42da-b5ff-e28f37193612" testId="c4ac3a26-46de-3715-c36e-8f4d6f5f9f9f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3666737-04:00" endTime="2024-04-30T15:10:41.3666738-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a72f8357-885c-42da-b5ff-e28f37193612">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="46772148-f05f-49b5-86d7-851259107bcf" testId="0b08fc1d-4351-db59-0a4c-7fa6d6c65877" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000196" startTime="2024-04-30T15:10:41.2689597-04:00" endTime="2024-04-30T15:10:41.2689597-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46772148-f05f-49b5-86d7-851259107bcf" />
    <UnitTestResult executionId="15c56f24-2fad-448d-ba32-1b514fa248bc" testId="5f62cbaa-1030-d810-0d21-dccde0155dd0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2752160-04:00" endTime="2024-04-30T15:10:41.2752160-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15c56f24-2fad-448d-ba32-1b514fa248bc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d415a067-3668-4ba8-ac54-9bc8ecc0e4eb" testId="e3b9f7b1-d4dc-b20f-b949-a8b3f2124ad4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3199546-04:00" endTime="2024-04-30T15:10:41.3199546-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d415a067-3668-4ba8-ac54-9bc8ecc0e4eb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a0c05ba-52da-4d16-bc62-08f939ca5003" testId="8ea179ef-47b1-d8bf-4866-06a5a406556c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3028580-04:00" endTime="2024-04-30T15:10:41.3028580-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a0c05ba-52da-4d16-bc62-08f939ca5003">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddbd6395-7e9d-4384-a8f6-e94a4d535c90" testId="72bdacf6-c04e-7538-e17a-4b76acf56493" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3103320-04:00" endTime="2024-04-30T15:10:41.3103320-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddbd6395-7e9d-4384-a8f6-e94a4d535c90">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9adde724-a8e0-49f6-9d26-44dded45df0a" testId="3003a3d8-f738-6d2d-1fa5-74d54eebf6ef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3093774-04:00" endTime="2024-04-30T15:10:41.3093774-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9adde724-a8e0-49f6-9d26-44dded45df0a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ca7f60e-be1e-46df-be3f-b195565e1a15" testId="b5473567-e360-7801-813e-7ede3b0a1b06" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000312" startTime="2024-04-30T15:10:41.2703671-04:00" endTime="2024-04-30T15:10:41.2703671-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ca7f60e-be1e-46df-be3f-b195565e1a15">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="64ea5c76-6669-405c-82c5-02d6b5b48c66" testId="d898f853-754a-6c5d-3b2b-ed8a21dfc83c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2671186-04:00" endTime="2024-04-30T15:10:41.2671186-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="64ea5c76-6669-405c-82c5-02d6b5b48c66">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="003e0496-a755-452c-8f86-7ffad0e4d6d9" testId="75edd253-fff7-4d50-2625-9591fbb5f98c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2938238-04:00" endTime="2024-04-30T15:10:41.2938239-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="003e0496-a755-452c-8f86-7ffad0e4d6d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="83df16db-01e9-497b-8669-3ea52383ed6a" testId="21e524a3-5eca-426a-7cff-3e67f8b100a2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000236" startTime="2024-04-30T15:10:41.2948313-04:00" endTime="2024-04-30T15:10:41.2948313-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83df16db-01e9-497b-8669-3ea52383ed6a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73002d1a-d7fc-4f9f-ab80-967a10bfe10c" testId="19fc5ee2-b61e-61c6-4b92-05a1d8c7d6b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2964228-04:00" endTime="2024-04-30T15:10:41.2964228-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73002d1a-d7fc-4f9f-ab80-967a10bfe10c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c3ae2b1-e8e3-40f4-812b-0b3452d1fd47" testId="c0debdda-33e1-906b-c3d4-2f5aecdca33a" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2621625-04:00" endTime="2024-04-30T15:10:41.2621625-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c3ae2b1-e8e3-40f4-812b-0b3452d1fd47" />
    <UnitTestResult executionId="314144b0-fa3c-46b8-bfec-b1aec00b5b1e" testId="7c1c5a96-54f9-9ab1-ef4a-f63b872285e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2846691-04:00" endTime="2024-04-30T15:10:41.2846691-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="314144b0-fa3c-46b8-bfec-b1aec00b5b1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76df1404-009a-4d4e-9a9f-6c473716cdd2" testId="ac21adf7-d381-75ff-6d23-d8c8c2ff32c8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.3019630-04:00" endTime="2024-04-30T15:10:41.3019630-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76df1404-009a-4d4e-9a9f-6c473716cdd2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f3360b6a-7fa1-4ac6-ae4e-f4f631961306" testId="d1763ae5-c014-70fd-5320-0c3337c77fb8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3264861-04:00" endTime="2024-04-30T15:10:41.3264862-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3360b6a-7fa1-4ac6-ae4e-f4f631961306">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5642f5c7-ac50-4899-aecc-ccd5b0d414e1" testId="b371385f-39fd-9b10-7316-0744d06769f2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000254" startTime="2024-04-30T15:10:41.2697477-04:00" endTime="2024-04-30T15:10:41.2697477-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5642f5c7-ac50-4899-aecc-ccd5b0d414e1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49103278-1e2c-41a7-9cc6-dd43a2917058" testId="1db33b90-734f-42e2-9724-f0f3cb945588" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2674449-04:00" endTime="2024-04-30T15:10:41.2674449-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49103278-1e2c-41a7-9cc6-dd43a2917058" />
    <UnitTestResult executionId="03c9c6aa-244a-45e7-8a50-ce3b105d12a9" testId="25505a59-41e2-0f10-6da3-df4e452b03f7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3087744-04:00" endTime="2024-04-30T15:10:41.3087745-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03c9c6aa-244a-45e7-8a50-ce3b105d12a9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="297258d3-060d-41a7-8a39-d5e9a4bf1209" testId="6cc56c7f-5a74-6403-8a4f-f4625ce9e4a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.3317788-04:00" endTime="2024-04-30T15:10:41.3317788-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="297258d3-060d-41a7-8a39-d5e9a4bf1209">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d9dd524-447c-4935-9ea1-b5b545a617e8" testId="b4fac98a-db54-ac55-7eb5-d215da6a6441" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2890780-04:00" endTime="2024-04-30T15:10:41.2890781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d9dd524-447c-4935-9ea1-b5b545a617e8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a9624f5-d008-437d-a94a-88e06200d543" testId="3c3d2893-1e26-b923-a71e-15d5cfce2db1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0002120" startTime="2024-04-30T15:10:41.3719103-04:00" endTime="2024-04-30T15:10:41.3719103-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a9624f5-d008-437d-a94a-88e06200d543">
      <Output>
        <StdOut>Testing pair: ')/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="998f8b12-762d-43e1-b33f-698eec25888f" testId="dc2491d2-0ff7-8523-9e45-766376febe55" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: StarToken)" computerName="BRUNO" duration="00:00:00.0001510" startTime="2024-04-30T15:10:41.2709226-04:00" endTime="2024-04-30T15:10:41.2709227-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="998f8b12-762d-43e1-b33f-698eec25888f" />
    <UnitTestResult executionId="27470341-58fc-44c8-8938-c7e5aa9e5b39" testId="ebe96a17-6d98-4a1f-d0f8-24395f4e2aaf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3390008-04:00" endTime="2024-04-30T15:10:41.3390009-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27470341-58fc-44c8-8938-c7e5aa9e5b39">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e4ad912-fd2a-4ec1-adf2-d965e70f5842" testId="37c3a8b6-4a1b-e566-bb10-637699372e26" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000126" startTime="2024-04-30T15:10:41.2683681-04:00" endTime="2024-04-30T15:10:41.2683681-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e4ad912-fd2a-4ec1-adf2-d965e70f5842" />
    <UnitTestResult executionId="8843404f-9f30-4aad-9fd4-ff72dbacd731" testId="b5a3577e-6c32-fe1a-59fd-dc485aafd646" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000101" startTime="2024-04-30T15:10:41.2901097-04:00" endTime="2024-04-30T15:10:41.2901098-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8843404f-9f30-4aad-9fd4-ff72dbacd731">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43669982-bfcb-4b79-9530-b274985ec9a1" testId="1150ee68-35a9-06a9-5dd1-55810ab9c938" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2876175-04:00" endTime="2024-04-30T15:10:41.2876175-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43669982-bfcb-4b79-9530-b274985ec9a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8984489-244c-40b6-b275-3e64adec702b" testId="9c15194e-2fc3-9185-ec78-0ace59e1b31c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3364703-04:00" endTime="2024-04-30T15:10:41.3364703-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8984489-244c-40b6-b275-3e64adec702b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="781ee8ce-c1bf-49e3-a1a7-42f82bffc379" testId="f8e72d79-df72-8f45-fbac-d766b78a5489" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.3249833-04:00" endTime="2024-04-30T15:10:41.3249833-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="781ee8ce-c1bf-49e3-a1a7-42f82bffc379">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8530db6-ec2b-4c15-844c-1f9d4f10ffee" testId="00e8da9b-6db3-d92b-712f-e2599cadfdfc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3368516-04:00" endTime="2024-04-30T15:10:41.3368517-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8530db6-ec2b-4c15-844c-1f9d4f10ffee">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="edf92b5a-6417-427e-9525-10962312eb0e" testId="3d934580-be60-7ccb-43c6-4fafc6cfc4f2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3058835-04:00" endTime="2024-04-30T15:10:41.3058836-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edf92b5a-6417-427e-9525-10962312eb0e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e7cd923-6744-4f04-8847-0f1db1eb63e4" testId="be00e43c-ef1f-1f96-532f-766a588e2786" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.3017356-04:00" endTime="2024-04-30T15:10:41.3017357-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e7cd923-6744-4f04-8847-0f1db1eb63e4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8c7f739-98b9-4f70-95a6-c298d65aad6b" testId="328f757e-a26a-de36-0fd2-3e30404e0bd1" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2693785-04:00" endTime="2024-04-30T15:10:41.2693785-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8c7f739-98b9-4f70-95a6-c298d65aad6b" />
    <UnitTestResult executionId="b2a98820-b05b-4686-ad70-e22e2c8e1a80" testId="a2bd8e7e-4413-7825-8d41-0b9dd902ad16" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2611452-04:00" endTime="2024-04-30T15:10:41.2611453-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b2a98820-b05b-4686-ad70-e22e2c8e1a80" />
    <UnitTestResult executionId="5687185e-77f9-46f0-b22c-713cd7708344" testId="0083e126-a390-8aae-f3a9-95083d510c56" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3757427-04:00" endTime="2024-04-30T15:10:41.3757427-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5687185e-77f9-46f0-b22c-713cd7708344">
      <Output>
        <StdOut>Testing pair: '123is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="945a884d-0bbd-4e1c-af74-16f024862a8a" testId="8c7054d5-77cb-a80e-e545-0857b644d6f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3098561-04:00" endTime="2024-04-30T15:10:41.3098561-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="945a884d-0bbd-4e1c-af74-16f024862a8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39512533-9214-4b28-add9-b0141609b73f" testId="ebc0798e-5cb8-1e23-00f9-f1ad89b0bc2d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3104994-04:00" endTime="2024-04-30T15:10:41.3104994-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39512533-9214-4b28-add9-b0141609b73f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55970560-aae9-4055-804f-f57df1075320" testId="2d7a9c92-b9a8-e170-75f2-1d908b9ca2e4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2896006-04:00" endTime="2024-04-30T15:10:41.2896006-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55970560-aae9-4055-804f-f57df1075320">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fb88b717-21bf-484e-b2a9-8cf341f26591" testId="54928b44-e84a-80f8-9464-3bb1fdfee9ca" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2656542-04:00" endTime="2024-04-30T15:10:41.2656542-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb88b717-21bf-484e-b2a9-8cf341f26591" />
    <UnitTestResult executionId="1ef77aca-0f39-4998-8091-6694ffbf2170" testId="190d37c0-d42e-4c9c-5970-8e9693d96fc9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.2826988-04:00" endTime="2024-04-30T15:10:41.2826989-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ef77aca-0f39-4998-8091-6694ffbf2170">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8919b7d5-f873-4ed3-a062-426ddb11bf98" testId="b70b4b80-f195-6f10-35c8-6d08b0681013" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3303113-04:00" endTime="2024-04-30T15:10:41.3303113-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8919b7d5-f873-4ed3-a062-426ddb11bf98">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d12c1fc3-c96b-46cd-8662-69ffe99f163c" testId="3e4ed39f-1f88-517f-cc09-07e89875ed71" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2861237-04:00" endTime="2024-04-30T15:10:41.2861237-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d12c1fc3-c96b-46cd-8662-69ffe99f163c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42c241a3-b2bc-4c55-a299-5df84df1564e" testId="76fb9d43-c6d2-4878-b6e9-a60a8ef861c2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.2816797-04:00" endTime="2024-04-30T15:10:41.2816797-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42c241a3-b2bc-4c55-a299-5df84df1564e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="917dc06c-41db-484b-ab4f-83125fea258f" testId="8e75cd54-2f41-2679-6b62-b0e0b2a16537" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3717515-04:00" endTime="2024-04-30T15:10:41.3717516-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="917dc06c-41db-484b-ab4f-83125fea258f">
      <Output>
        <StdOut>Testing pair with explicit separator: '123   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c8c485a-4c32-4ec3-b8f4-47f961ff0934" testId="8911a2a6-4809-3263-694b-ac842068a67b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000102" startTime="2024-04-30T15:10:41.3643925-04:00" endTime="2024-04-30T15:10:41.3643925-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c8c485a-4c32-4ec3-b8f4-47f961ff0934">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c006856-716c-4544-92fb-dcf7ce4c0cfc" testId="32ff2ea8-dc00-1a11-7672-4d21618b9ca8" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000206" startTime="2024-04-30T15:10:41.2639037-04:00" endTime="2024-04-30T15:10:41.2639037-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c006856-716c-4544-92fb-dcf7ce4c0cfc" />
    <UnitTestResult executionId="e2aa4fe3-d4d6-4f69-80ba-9393c030ebcb" testId="8dfab34f-3331-68e6-1c39-591a4e844b20" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3042464-04:00" endTime="2024-04-30T15:10:41.3042465-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2aa4fe3-d4d6-4f69-80ba-9393c030ebcb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c238bed9-d06f-4c08-9792-d5b0d8ab3579" testId="45d1bf02-a450-de78-bc6d-dafce6227715" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3659337-04:00" endTime="2024-04-30T15:10:41.3659338-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c238bed9-d06f-4c08-9792-d5b0d8ab3579">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2a7780fd-fa56-487d-8563-2033a47b4aaa" testId="8d748a0d-dd37-0c20-ef03-fb1e8e68d04a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3600016-04:00" endTime="2024-04-30T15:10:41.3600016-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a7780fd-fa56-487d-8563-2033a47b4aaa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54c0383a-68d3-46af-b037-ba4a6edb0e6f" testId="2f1d5359-fd53-238a-fdf7-ab33697228a0" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2655647-04:00" endTime="2024-04-30T15:10:41.2655647-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54c0383a-68d3-46af-b037-ba4a6edb0e6f" />
    <UnitTestResult executionId="ac6c27c1-0e9b-4842-bebc-d01e050dfef6" testId="7d720576-81e6-e6e7-6c2a-ebd8a161040e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3368791-04:00" endTime="2024-04-30T15:10:41.3368791-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac6c27c1-0e9b-4842-bebc-d01e050dfef6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e8a642f-a847-4c63-88cb-e36aaf709423" testId="504ac613-a495-1e89-b4cf-0b7e39869100" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3499881-04:00" endTime="2024-04-30T15:10:41.3499882-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e8a642f-a847-4c63-88cb-e36aaf709423">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be2cbfda-fbe0-40aa-b626-8d2a0e931e85" testId="f08de649-f8ef-0f46-d483-58264824271b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3781064-04:00" endTime="2024-04-30T15:10:41.3781065-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be2cbfda-fbe0-40aa-b626-8d2a0e931e85">
      <Output>
        <StdOut>Testing pair: '==a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa0b865b-ede0-4475-805a-d9c0a8dbe8dc" testId="9be95313-2c57-07ce-3e37-fca7cfb67227" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2845079-04:00" endTime="2024-04-30T15:10:41.2845080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa0b865b-ede0-4475-805a-d9c0a8dbe8dc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5a9e448-1ade-4352-99b4-7c20877eda11" testId="9606b27f-0190-804f-7408-ba0276149c3c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.3802063-04:00" endTime="2024-04-30T15:10:41.3802064-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5a9e448-1ade-4352-99b4-7c20877eda11">
      <Output>
        <StdOut>Testing pair: ')+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af621eaa-33a8-42c6-a170-88ad043052f6" testId="c6752d8e-b45e-b9cf-1288-7760a85830c9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3134361-04:00" endTime="2024-04-30T15:10:41.3134361-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af621eaa-33a8-42c6-a170-88ad043052f6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7fd063c0-be3e-4414-9a54-d8e781ce88a0" testId="28221ec9-9edb-9fd5-0959-ebc0979ef9fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3069520-04:00" endTime="2024-04-30T15:10:41.3069520-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fd063c0-be3e-4414-9a54-d8e781ce88a0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c80f1497-154d-4415-a878-9e63b8186cf6" testId="30ea76b1-88a7-538f-8e88-265822ea1844" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3545924-04:00" endTime="2024-04-30T15:10:41.3545925-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c80f1497-154d-4415-a878-9e63b8186cf6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d467c22-6b98-436d-9249-bad19acb0011" testId="85decf2a-2fd2-31a0-84d7-d6039af47087" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3120727-04:00" endTime="2024-04-30T15:10:41.3120727-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d467c22-6b98-436d-9249-bad19acb0011">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44c69913-e316-4fcd-894c-952f36e5132c" testId="07b53ba5-18d6-2a9b-bdeb-517a3b9924cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2835317-04:00" endTime="2024-04-30T15:10:41.2835317-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44c69913-e316-4fcd-894c-952f36e5132c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ea7dfeb-7563-4d2d-80a4-5683b18c7b9c" testId="b39669b8-6133-4c3f-10c7-b033ce629552" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3336566-04:00" endTime="2024-04-30T15:10:41.3336566-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ea7dfeb-7563-4d2d-80a4-5683b18c7b9c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="805421fc-282c-45f7-a817-420c0d29d1af" testId="4cfc4d99-8f73-00b6-ba7a-87038bff3d98" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.2856652-04:00" endTime="2024-04-30T15:10:41.2856652-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="805421fc-282c-45f7-a817-420c0d29d1af">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0adfe2d8-05db-43f5-a824-531b657c7fe0" testId="db9b66c8-5d08-2351-fe38-435aad3dd716" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3257031-04:00" endTime="2024-04-30T15:10:41.3257032-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0adfe2d8-05db-43f5-a824-531b657c7fe0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54ae8b42-d5e4-4f11-b0f9-692f2c83306d" testId="cbed7b4b-94d1-6b2c-4df8-22f8d9d07ebb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3312863-04:00" endTime="2024-04-30T15:10:41.3312864-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54ae8b42-d5e4-4f11-b0f9-692f2c83306d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8bc0dac-95ed-44b1-9c5a-2c965ae48c57" testId="0342b1bc-0a3b-a04a-7d64-cdddc338d18c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.3833129-04:00" endTime="2024-04-30T15:10:41.3833130-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8bc0dac-95ed-44b1-9c5a-2c965ae48c57">
      <Output>
        <StdOut>Testing pair: '(True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a92d12e-bae7-4667-a08e-5b1e68e56aa0" testId="ccaba2fe-7e3c-fbce-dc4b-8ac3c38ee367" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3239945-04:00" endTime="2024-04-30T15:10:41.3239945-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a92d12e-bae7-4667-a08e-5b1e68e56aa0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99d595d2-b6f4-4b8c-aedd-91a6ff1414c6" testId="a2c244e5-40b5-1ffc-6dba-8f301b743803" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2979087-04:00" endTime="2024-04-30T15:10:41.2979088-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99d595d2-b6f4-4b8c-aedd-91a6ff1414c6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d24f5275-3615-4d11-9b1f-06164b644eec" testId="012dffc6-77a5-6b3a-83ef-514994b77051" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3158241-04:00" endTime="2024-04-30T15:10:41.3158241-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d24f5275-3615-4d11-9b1f-06164b644eec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0a267b8-411e-40d6-80e4-63aff6f08b2e" testId="9ecb089a-3721-0d17-5f51-bbe11a92d3c2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3628545-04:00" endTime="2024-04-30T15:10:41.3628546-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0a267b8-411e-40d6-80e4-63aff6f08b2e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26ba094e-3f58-4833-9cdf-8a7a6b61e908" testId="a4950ead-5b27-d095-1112-7aec64e3ee23" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2886617-04:00" endTime="2024-04-30T15:10:41.2886618-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26ba094e-3f58-4833-9cdf-8a7a6b61e908">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="795f2ae9-1bd6-46e3-a52d-d44c334c30f6" testId="0684640e-2b77-41fd-6d5b-29e563b0ec10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.3056027-04:00" endTime="2024-04-30T15:10:41.3056028-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="795f2ae9-1bd6-46e3-a52d-d44c334c30f6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="618dd392-0477-499d-b7c5-088c1da90c76" testId="c554ba80-6e9b-4756-ee7b-f875dbcef4e4" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2625275-04:00" endTime="2024-04-30T15:10:41.2625276-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="618dd392-0477-499d-b7c5-088c1da90c76" />
    <UnitTestResult executionId="10f4c77d-5de4-4dc9-b720-6ca480b2f29c" testId="1ef487d9-978a-f68d-6bb4-b170f4e99a17" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2988366-04:00" endTime="2024-04-30T15:10:41.2988367-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10f4c77d-5de4-4dc9-b720-6ca480b2f29c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5485c233-92b8-47fd-8f10-5825c613e114" testId="2ecdd2bf-5ead-19da-3c3a-43bc86066452" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3471150-04:00" endTime="2024-04-30T15:10:41.3471151-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5485c233-92b8-47fd-8f10-5825c613e114">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d19dc9b3-f1f2-47b5-9797-0c04bd0aacc8" testId="b80a87c2-c3f7-edaa-13b0-f2afc20b7c07" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.2891211-04:00" endTime="2024-04-30T15:10:41.2891211-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d19dc9b3-f1f2-47b5-9797-0c04bd0aacc8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c9851a1-f9c5-48ce-ad3d-cfd0107059fb" testId="85adb41a-0f43-ced9-5218-5fc86386ea5f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: AndKeyword, text: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000140" startTime="2024-04-30T15:10:41.3864426-04:00" endTime="2024-04-30T15:10:41.3864427-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c9851a1-f9c5-48ce-ad3d-cfd0107059fb">
      <Output>
        <StdOut>Expected kind: AndKeyword, Actual kind: AndKeyword&#xD;
Expected text: 'and', Actual text: 'and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f88d556-ee06-4cc6-bcba-c5b21d1fd7cd" testId="9ae97799-ef2f-5ddd-359b-2880df2ee91f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2776304-04:00" endTime="2024-04-30T15:10:41.2776304-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f88d556-ee06-4cc6-bcba-c5b21d1fd7cd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26630537-8db1-49e1-a812-862a04654414" testId="b0351ef9-2e5b-dba8-1ab1-9aadef153bd2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2977644-04:00" endTime="2024-04-30T15:10:41.2977645-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26630537-8db1-49e1-a812-862a04654414">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7a5fb13-1052-4e8a-8739-796d46346b07" testId="bf47b1bc-f644-af08-a340-d762a489a360" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2707910-04:00" endTime="2024-04-30T15:10:41.2707911-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7a5fb13-1052-4e8a-8739-796d46346b07">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26d53659-2996-406e-b37e-64a7132ec705" testId="8e9e1f35-2378-79ac-f0bd-b697137e3241" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2851723-04:00" endTime="2024-04-30T15:10:41.2851723-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26d53659-2996-406e-b37e-64a7132ec705">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9121afaf-2a82-4e3d-9f99-f1488a928ae8" testId="dd1f5237-f9cb-c893-b47e-ce791a7532ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3140139-04:00" endTime="2024-04-30T15:10:41.3140140-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9121afaf-2a82-4e3d-9f99-f1488a928ae8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="890b9fa7-6ec2-41dd-80a6-ea63d6472966" testId="764842c3-78a1-27f1-8347-b98d7ce4683c" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;10 != 10&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000205" startTime="2024-04-30T15:10:41.2728822-04:00" endTime="2024-04-30T15:10:41.2728822-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="890b9fa7-6ec2-41dd-80a6-ea63d6472966" />
    <UnitTestResult executionId="e18bd266-39d4-455f-998a-41b5f87f2148" testId="5a8e94ab-43f0-8419-9587-651604193209" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2839925-04:00" endTime="2024-04-30T15:10:41.2839926-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e18bd266-39d4-455f-998a-41b5f87f2148">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25f1f2b5-620b-45fe-ae38-7b39461c4813" testId="a5306c4f-12b5-4b21-95b8-49af91f0265b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3419146-04:00" endTime="2024-04-30T15:10:41.3419146-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25f1f2b5-620b-45fe-ae38-7b39461c4813">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="999be773-09f8-4d12-95c8-9e8c008c2f87" testId="f6c10693-0871-15a4-0fe5-deb3593b620b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2771126-04:00" endTime="2024-04-30T15:10:41.2771126-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="999be773-09f8-4d12-95c8-9e8c008c2f87">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d16b690d-ab9e-4235-add5-25a264cb718c" testId="65c9f74f-3de5-4400-889f-2413e04f7b3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2860974-04:00" endTime="2024-04-30T15:10:41.2860975-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d16b690d-ab9e-4235-add5-25a264cb718c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32639bb6-2c21-4150-929a-0acc78538cc3" testId="ea9e57de-c10e-1258-dfbf-54fc34b4d6ce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.3004395-04:00" endTime="2024-04-30T15:10:41.3004395-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32639bb6-2c21-4150-929a-0acc78538cc3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39f28194-27fc-431e-b55d-7812dd044364" testId="ae53641a-4d55-4ed6-a531-052bbb67db4e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3465221-04:00" endTime="2024-04-30T15:10:41.3465221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39f28194-27fc-431e-b55d-7812dd044364">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8af12fa-6a91-4c29-bc37-fc74f67cca8a" testId="613c6fdc-8133-5ab3-460f-e30a8d004262" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3634165-04:00" endTime="2024-04-30T15:10:41.3634166-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8af12fa-6a91-4c29-bc37-fc74f67cca8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3af4cda4-da85-4eeb-8986-71636c3ef354" testId="28572c96-2710-4749-90d7-4db2204ed959" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3471805-04:00" endTime="2024-04-30T15:10:41.3471805-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3af4cda4-da85-4eeb-8986-71636c3ef354">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32fd71a7-c6c8-417c-812e-2ba2f85e5e66" testId="20ad30e1-c057-7894-7d76-0da1b4c713f4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3090333-04:00" endTime="2024-04-30T15:10:41.3090333-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32fd71a7-c6c8-417c-812e-2ba2f85e5e66">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16cb3273-e107-40ee-924a-f7382c6729bf" testId="64e4b180-cf4b-3791-f430-5ee8e568558a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3823968-04:00" endTime="2024-04-30T15:10:41.3823968-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16cb3273-e107-40ee-924a-f7382c6729bf">
      <Output>
        <StdOut>Testing pair: '!=*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a531b4e3-0cb9-4a64-8d9e-8bc2da192adc" testId="89f3fb75-60e2-9524-111d-0966b9fdb5d6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.3823701-04:00" endTime="2024-04-30T15:10:41.3823701-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a531b4e3-0cb9-4a64-8d9e-8bc2da192adc">
      <Output>
        <StdOut>Testing pair: '=loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba1ea35f-167c-442a-87f5-4a7e0ce84cd0" testId="d6703265-a595-e434-ca4f-59b8845689ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000205" startTime="2024-04-30T15:10:41.2912153-04:00" endTime="2024-04-30T15:10:41.2912153-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba1ea35f-167c-442a-87f5-4a7e0ce84cd0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23a617f7-def0-4e98-86f0-e9b1a2de2c5a" testId="8e4b3ccc-8b91-0568-3e1d-72c8922e70d0" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: UnaryExpression)" computerName="BRUNO" duration="00:00:00.0000043" startTime="2024-04-30T15:10:41.2192926-04:00" endTime="2024-04-30T15:10:41.2192926-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23a617f7-def0-4e98-86f0-e9b1a2de2c5a" />
    <UnitTestResult executionId="ca5ce426-ea5b-439b-906a-0c7ffd44875d" testId="e2e42543-5594-89dd-b6a4-6fe238a337e5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3058282-04:00" endTime="2024-04-30T15:10:41.3058282-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca5ce426-ea5b-439b-906a-0c7ffd44875d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3efa08ca-fa93-4ee6-a60b-9e053d80cd33" testId="a0b04c73-ef8f-6dad-daa2-9d570fec0850" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3378284-04:00" endTime="2024-04-30T15:10:41.3378285-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3efa08ca-fa93-4ee6-a60b-9e053d80cd33">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5051df0-6b3b-47e2-aa05-16f8958946bb" testId="b2db76a9-7eed-8b38-833c-486aef3f0bf7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2898013-04:00" endTime="2024-04-30T15:10:41.2898014-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5051df0-6b3b-47e2-aa05-16f8958946bb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3d6167b-87e5-46ca-b891-50e7fc416867" testId="8c3bbfe8-0e53-8b11-6a97-7de9ac2e83cd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3327397-04:00" endTime="2024-04-30T15:10:41.3327397-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3d6167b-87e5-46ca-b891-50e7fc416867">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d9d351e5-e3a6-4034-81d0-61f3107d389b" testId="5b6928fb-c574-8e1f-c05f-0fdeedaaa2c9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3154024-04:00" endTime="2024-04-30T15:10:41.3154024-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9d351e5-e3a6-4034-81d0-61f3107d389b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a184fad2-a9ab-4d75-bda4-05dfbeb5af54" testId="22ccc183-f475-b21f-e4d1-adb25df63f0d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3426339-04:00" endTime="2024-04-30T15:10:41.3426340-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a184fad2-a9ab-4d75-bda4-05dfbeb5af54">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5bff48c3-2caf-4bd8-81be-f0c7614d724f" testId="cccb977c-4018-6daf-19e5-3269b56bda53" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2729077-04:00" endTime="2024-04-30T15:10:41.2729077-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5bff48c3-2caf-4bd8-81be-f0c7614d724f" />
    <UnitTestResult executionId="bf3e88d4-8d04-4cbb-bcde-93874d5f07dd" testId="f3fd3e56-f00c-60c3-5791-562446927538" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2836180-04:00" endTime="2024-04-30T15:10:41.2836180-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf3e88d4-8d04-4cbb-bcde-93874d5f07dd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="450194da-922f-456e-973b-b26dbd76f02a" testId="19ec4286-ebe8-a1b7-ed38-a6efbc62c6e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3503049-04:00" endTime="2024-04-30T15:10:41.3503050-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="450194da-922f-456e-973b-b26dbd76f02a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c51d2cc7-d1a4-4ac4-b560-445a01b1b6d3" testId="6f7f01d5-dcb3-559e-2f3b-bab584a8ca26" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3826899-04:00" endTime="2024-04-30T15:10:41.3826900-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c51d2cc7-d1a4-4ac4-b560-445a01b1b6d3">
      <Output>
        <StdOut>Testing pair: ')or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5fc5de3f-5c13-49ae-abd8-08fd334f98cc" testId="b898a2e0-96be-7f91-4113-4ef4f93f2e11" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000122" startTime="2024-04-30T15:10:41.3686999-04:00" endTime="2024-04-30T15:10:41.3686999-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5fc5de3f-5c13-49ae-abd8-08fd334f98cc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="613a63dc-dc13-485d-aedd-5676ef08713f" testId="74d213da-7b53-ebbf-f2ed-62714b713fde" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.3033087-04:00" endTime="2024-04-30T15:10:41.3033088-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="613a63dc-dc13-485d-aedd-5676ef08713f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a9dbfd0-0227-4f57-8200-51dd642faf60" testId="4629ff8d-7168-9f21-10df-e12d7346c7b7" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;-1&quot;, expectedValue: -1)" computerName="BRUNO" duration="00:00:00.0076596" startTime="2024-04-30T15:10:41.2127958-04:00" endTime="2024-04-30T15:10:41.2128301-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a9dbfd0-0227-4f57-8200-51dd642faf60" />
    <UnitTestResult executionId="64c28fc0-e381-45d6-a310-68bd156cc9fa" testId="16619557-e2e5-c279-cede-669420230d7a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.2820291-04:00" endTime="2024-04-30T15:10:41.2820291-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="64c28fc0-e381-45d6-a310-68bd156cc9fa">
      <Output>
        <StdOut>Testing pair with explicit separator: '123   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="87c46b7d-50cf-458f-8fc1-763fc3c75371" testId="769dc668-6d35-9bcb-d2c3-d4ab100d25c3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000127" startTime="2024-04-30T15:10:41.3145082-04:00" endTime="2024-04-30T15:10:41.3145082-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87c46b7d-50cf-458f-8fc1-763fc3c75371">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc4f2ce6-d3b7-4dcb-bd17-d9fac7d1fa86" testId="d1027dd2-1292-74e6-8440-3654a6bbf454" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3687267-04:00" endTime="2024-04-30T15:10:41.3687267-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc4f2ce6-d3b7-4dcb-bd17-d9fac7d1fa86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11455f07-87f2-40a6-8b24-9643be2d3865" testId="dd68ea8a-9004-065b-344b-20e4010ebaa5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3593489-04:00" endTime="2024-04-30T15:10:41.3593490-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11455f07-87f2-40a6-8b24-9643be2d3865">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0c2db46-5ad1-413c-a5ec-306e81d9ac6a" testId="c0d4ea25-116d-7084-e18e-d337510bfb2d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3677161-04:00" endTime="2024-04-30T15:10:41.3677162-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0c2db46-5ad1-413c-a5ec-306e81d9ac6a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a385c08c-a2be-4963-871a-25ed1d3e82ec" testId="1b8be8e5-1c5d-54f9-ecd2-11a9ebc1603c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3118783-04:00" endTime="2024-04-30T15:10:41.3118783-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a385c08c-a2be-4963-871a-25ed1d3e82ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31addc63-313d-448e-80e6-0d06bec4f298" testId="2f8f99db-cdc5-762a-7f68-b1b810f872a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3739865-04:00" endTime="2024-04-30T15:10:41.3739865-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31addc63-313d-448e-80e6-0d06bec4f298">
      <Output>
        <StdOut>Testing pair: '==not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bd55bbd-5db3-4c13-84ff-9bcee0bce72d" testId="e4aa688d-0813-ddb6-b212-e75c73bddd08" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3642434-04:00" endTime="2024-04-30T15:10:41.3642434-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bd55bbd-5db3-4c13-84ff-9bcee0bce72d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b668a6fb-ba30-4a5b-be26-1df593e28b8b" testId="edf39d1c-2b56-351e-dceb-e574d568c819" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3703557-04:00" endTime="2024-04-30T15:10:41.3703558-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b668a6fb-ba30-4a5b-be26-1df593e28b8b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d89c8201-502d-4b3b-9f40-9a81920a1413" testId="d3fade6d-b041-31a8-aa46-eb996e77fc05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3057631-04:00" endTime="2024-04-30T15:10:41.3057632-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d89c8201-502d-4b3b-9f40-9a81920a1413">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1704d72b-e104-4850-aa88-e04f14d1c1a4" testId="8dcf19e1-3470-926f-5ace-a8141d03d7fa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3198073-04:00" endTime="2024-04-30T15:10:41.3198074-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1704d72b-e104-4850-aa88-e04f14d1c1a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2f7fb2da-0673-47a5-8782-c610a8b1af11" testId="0818a1dc-a99b-f4d7-b0b0-570ef57baa07" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3490286-04:00" endTime="2024-04-30T15:10:41.3490286-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f7fb2da-0673-47a5-8782-c610a8b1af11">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06895172-b9e5-41ef-8d74-3d730287141f" testId="4cafdf66-5fa4-4ee6-5234-8b39983288b5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3155352-04:00" endTime="2024-04-30T15:10:41.3155353-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06895172-b9e5-41ef-8d74-3d730287141f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ceeda65-d9d3-48ed-b1c6-1f108e757c9a" testId="3f8e1488-9058-b01a-c190-d152af34f73e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2610075-04:00" endTime="2024-04-30T15:10:41.2610076-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ceeda65-d9d3-48ed-b1c6-1f108e757c9a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67122c72-d760-446d-b27a-83a4dff8a2e6" testId="78c11c6c-25ad-d110-699e-2a19e2fb2ef3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3280463-04:00" endTime="2024-04-30T15:10:41.3280463-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67122c72-d760-446d-b27a-83a4dff8a2e6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1b937cca-5117-4331-8f10-3328a5c9c3bf" testId="28ecedf6-e67a-57b4-4fcd-5a83da7efba1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2735013-04:00" endTime="2024-04-30T15:10:41.2735014-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b937cca-5117-4331-8f10-3328a5c9c3bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f3d1173-5080-4d3d-8c1e-358aa7b418ec" testId="2dc333f2-fb8f-3896-e8d9-4221f4730023" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.2757106-04:00" endTime="2024-04-30T15:10:41.2757106-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f3d1173-5080-4d3d-8c1e-358aa7b418ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc134e05-87d6-4f65-bce9-d1d28eb3a503" testId="4a51cf95-a5b1-06eb-a384-68b9138bde4b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2946749-04:00" endTime="2024-04-30T15:10:41.2946749-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc134e05-87d6-4f65-bce9-d1d28eb3a503">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="900576cd-f9dc-482a-957d-e4ff64b49356" testId="f4be3847-cc72-0484-24c4-c7433b7f4016" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000136" startTime="2024-04-30T15:10:41.3685632-04:00" endTime="2024-04-30T15:10:41.3685632-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="900576cd-f9dc-482a-957d-e4ff64b49356">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6ebb027-639a-41de-b182-7c8a6e8302bf" testId="0bada7a4-0656-6d48-645f-ae848d1d23d5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000195" startTime="2024-04-30T15:10:41.2626233-04:00" endTime="2024-04-30T15:10:41.2626233-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6ebb027-639a-41de-b182-7c8a6e8302bf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9fd1df30-ac26-44e5-89f2-8d1520f36d9d" testId="4bd7d042-38f9-c8f9-c6ae-14a1fe60d16d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3509041-04:00" endTime="2024-04-30T15:10:41.3509042-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9fd1df30-ac26-44e5-89f2-8d1520f36d9d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f84d2e6-e173-4c11-99c4-3d35ac870868" testId="d16b544b-d6e6-92f1-d0e2-03d883ee34e6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2704341-04:00" endTime="2024-04-30T15:10:41.2704342-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f84d2e6-e173-4c11-99c4-3d35ac870868">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d77a86b-113d-4f34-bc86-cba483acf508" testId="09d9d5d8-3ebb-8bd7-b6dc-31a656d1ef80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3406842-04:00" endTime="2024-04-30T15:10:41.3406842-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d77a86b-113d-4f34-bc86-cba483acf508">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="addefe65-02d2-4d92-9963-54c6715ad530" testId="b6c56780-5fe2-00a6-d4a7-39024888f502" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3073186-04:00" endTime="2024-04-30T15:10:41.3073186-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="addefe65-02d2-4d92-9963-54c6715ad530">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a805b54-a24e-4451-b63e-9a94e39ad074" testId="4d6ba95f-64ca-2b91-3c2a-41bef6c2b114" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000070" startTime="2024-04-30T15:10:41.3766623-04:00" endTime="2024-04-30T15:10:41.3766623-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a805b54-a24e-4451-b63e-9a94e39ad074">
      <Output>
        <StdOut>Testing pair: '==)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93283241-ce8e-475e-8c9c-cb5f0aa5996d" testId="8f7b100c-6d7b-b65b-f4b8-15a206fc5caa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: StarToken, text: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3855742-04:00" endTime="2024-04-30T15:10:41.3855743-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93283241-ce8e-475e-8c9c-cb5f0aa5996d">
      <Output>
        <StdOut>Expected kind: StarToken, Actual kind: StarToken&#xD;
Expected text: '*', Actual text: '*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26024957-cc3d-408b-8459-6105ff0ba910" testId="97af4051-eaed-a27f-8787-ad01bf056dcd" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2665209-04:00" endTime="2024-04-30T15:10:41.2665209-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26024957-cc3d-408b-8459-6105ff0ba910" />
    <UnitTestResult executionId="86c854ce-cd8f-4a11-b5fc-0c320ddb408a" testId="752fd025-80f5-0dc2-bb9e-fd26e1e2b85d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.2901927-04:00" endTime="2024-04-30T15:10:41.2901927-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86c854ce-cd8f-4a11-b5fc-0c320ddb408a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee473498-ed16-484d-a7d6-9eb254944cb5" testId="e94f5737-cf04-b148-8192-38daf599baa6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.2989575-04:00" endTime="2024-04-30T15:10:41.2989575-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee473498-ed16-484d-a7d6-9eb254944cb5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47eb9566-a005-49d8-ace9-b9b93a2fcd39" testId="8f1dc184-32f1-9847-f9da-84ac0a05d222" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3135746-04:00" endTime="2024-04-30T15:10:41.3135746-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47eb9566-a005-49d8-ace9-b9b93a2fcd39">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99edf53f-ff73-4765-8e5a-f006f0501f54" testId="82b8b82e-d510-e24f-344a-de88362d2e89" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3428800-04:00" endTime="2024-04-30T15:10:41.3428801-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99edf53f-ff73-4765-8e5a-f006f0501f54">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="446349c5-b4fe-46ab-8459-67aa025fe933" testId="3c093b0d-eea8-6996-3c81-c348a868dca9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2702542-04:00" endTime="2024-04-30T15:10:41.2702542-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="446349c5-b4fe-46ab-8459-67aa025fe933">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f752e8c0-fb50-415a-b5d9-85ab54456574" testId="37416c20-f604-8893-9847-10f29cecc930" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2810502-04:00" endTime="2024-04-30T15:10:41.2810503-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f752e8c0-fb50-415a-b5d9-85ab54456574">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3eec0d2-eae6-44fb-9260-3ca4d393874a" testId="96bc8447-64d2-32a7-244d-de0c8b356d3e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2885822-04:00" endTime="2024-04-30T15:10:41.2885823-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3eec0d2-eae6-44fb-9260-3ca4d393874a">
      <Output>
        <StdOut>Testing pair with explicit separator: '== ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e330c14-7647-430b-bf49-6fa0f719b69c" testId="fbeaddd1-3d3f-9a85-1f05-71eaa5c45f55" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3200344-04:00" endTime="2024-04-30T15:10:41.3200344-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e330c14-7647-430b-bf49-6fa0f719b69c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff1a93c1-01bb-4b90-a505-11f6258ffde9" testId="04ac183f-dfb2-4243-3403-f58ffb889b77" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3700843-04:00" endTime="2024-04-30T15:10:41.3700843-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff1a93c1-01bb-4b90-a505-11f6258ffde9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2af47e08-ac09-48a9-8982-0b06791696dd" testId="5001e616-8b55-331a-1f95-ef75f9cf7688" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3399876-04:00" endTime="2024-04-30T15:10:41.3399877-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2af47e08-ac09-48a9-8982-0b06791696dd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23a1eec9-41b9-44a8-bdb2-3c9b01b11dad" testId="791d91ea-f7da-72b2-2c33-75d7a471b0ff" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000222" startTime="2024-04-30T15:10:41.2932292-04:00" endTime="2024-04-30T15:10:41.2932292-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23a1eec9-41b9-44a8-bdb2-3c9b01b11dad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f92af3be-2c96-4ae2-8e90-490267cdea5a" testId="1988b293-cc85-fd92-ab09-d155f2ec1ddc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3757954-04:00" endTime="2024-04-30T15:10:41.3757954-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f92af3be-2c96-4ae2-8e90-490267cdea5a">
      <Output>
        <StdOut>Testing pair: ')True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92f436b6-a3cd-4571-81a1-b7f18f95a7fb" testId="53683f5b-88cd-fed5-e45a-12a6a65115ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3672028-04:00" endTime="2024-04-30T15:10:41.3672029-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92f436b6-a3cd-4571-81a1-b7f18f95a7fb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd7e13ac-c9e7-4214-86d2-b3a20c2e9716" testId="423a9cf1-507f-88c0-320c-1466d658562a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3343322-04:00" endTime="2024-04-30T15:10:41.3343323-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd7e13ac-c9e7-4214-86d2-b3a20c2e9716">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0047cd94-587d-46fe-b3e7-f4490d669923" testId="275dd1d5-1dd3-fe33-a1f9-dc3786b661f4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3261591-04:00" endTime="2024-04-30T15:10:41.3261592-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0047cd94-587d-46fe-b3e7-f4490d669923">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90b0845b-bd6e-4c0d-9422-f07ad73ffe74" testId="57aa77ee-b946-2c03-830f-9e9cefd6b4bf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.3703225-04:00" endTime="2024-04-30T15:10:41.3703226-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90b0845b-bd6e-4c0d-9422-f07ad73ffe74">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da4f99b7-9a52-4e8f-85c1-7332f9d1c9ec" testId="d3898ee1-6a92-977c-23db-23685cd83166" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3338597-04:00" endTime="2024-04-30T15:10:41.3338598-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da4f99b7-9a52-4e8f-85c1-7332f9d1c9ec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13a073bb-42b9-4bc0-9e58-7182a34a4aa8" testId="77301279-a302-d15b-c4f2-b0c398e8d511" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3194184-04:00" endTime="2024-04-30T15:10:41.3194184-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13a073bb-42b9-4bc0-9e58-7182a34a4aa8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e44818c8-daee-4371-bc8e-f9e318747fee" testId="d7d4a999-8c0e-190b-0934-b0fad894f7ec" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 + 2&quot;, expectedValue: 3)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2747625-04:00" endTime="2024-04-30T15:10:41.2747626-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e44818c8-daee-4371-bc8e-f9e318747fee" />
    <UnitTestResult executionId="ab03930d-505f-461d-9fa4-2262c52851c0" testId="b3c3bf21-3da7-e041-c98f-922dec8e31ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.2824677-04:00" endTime="2024-04-30T15:10:41.2824678-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab03930d-505f-461d-9fa4-2262c52851c0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3b13b67-b3a5-4ddf-a95a-7dcdd5689ff8" testId="4b510403-7e11-b3b5-160e-c952de1f9d10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000225" startTime="2024-04-30T15:10:41.2748208-04:00" endTime="2024-04-30T15:10:41.2748208-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3b13b67-b3a5-4ddf-a95a-7dcdd5689ff8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf109af2-c09d-426b-8ffe-948141efee9d" testId="3b6f2abb-9a38-5112-18e7-87917ba90bb0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3718504-04:00" endTime="2024-04-30T15:10:41.3718504-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf109af2-c09d-426b-8ffe-948141efee9d">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea188d99-a7a2-4996-b32b-b4cfd57e5d62" testId="ac430569-7b30-affd-0f1e-04ed1017b891" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3581431-04:00" endTime="2024-04-30T15:10:41.3581432-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea188d99-a7a2-4996-b32b-b4cfd57e5d62">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80ce3489-c84f-4e79-b8f8-6f8d839e1181" testId="b218c33b-227b-537b-624a-0cc0e643ee4b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2761289-04:00" endTime="2024-04-30T15:10:41.2761289-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80ce3489-c84f-4e79-b8f8-6f8d839e1181">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6869a894-c92e-430c-b9dd-9ca6e36fc9e0" testId="07b4b32a-3797-0eb8-4d0d-8c30d2a55c58" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000122" startTime="2024-04-30T15:10:41.2831087-04:00" endTime="2024-04-30T15:10:41.2831087-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6869a894-c92e-430c-b9dd-9ca6e36fc9e0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9bf0a1c9-59f3-47e6-aad5-4daf9667fa77" testId="f39d3e44-b8e0-c912-738b-a251c6c53806" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2673800-04:00" endTime="2024-04-30T15:10:41.2673800-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bf0a1c9-59f3-47e6-aad5-4daf9667fa77" />
    <UnitTestResult executionId="e31acad8-8e34-4922-ae3a-c0f02afcf7d4" testId="553f2e4a-cc91-cce4-0d74-6705cd96bbf9" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000123" startTime="2024-04-30T15:10:41.2738448-04:00" endTime="2024-04-30T15:10:41.2738448-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e31acad8-8e34-4922-ae3a-c0f02afcf7d4" />
    <UnitTestResult executionId="7b3f1362-bc30-4f4d-8b52-b8ba6105b0ae" testId="74a8f961-9d51-0311-0d14-1dd0cb7b9aa4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3203961-04:00" endTime="2024-04-30T15:10:41.3203961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b3f1362-bc30-4f4d-8b52-b8ba6105b0ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdb080e3-accf-429a-9f20-9208bea6b3eb" testId="5490218e-be16-8473-364f-0674b286fbc4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000126" startTime="2024-04-30T15:10:41.3722736-04:00" endTime="2024-04-30T15:10:41.3722737-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdb080e3-accf-429a-9f20-9208bea6b3eb">
      <Output>
        <StdOut>Testing pair: '(('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53036180-9f32-4b3f-b33b-77123164e159" testId="28cfd509-62d4-8953-9f7e-2199d0979cfe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3353503-04:00" endTime="2024-04-30T15:10:41.3353503-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53036180-9f32-4b3f-b33b-77123164e159">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03a5db11-13ad-4bda-b8bf-312a1b47722a" testId="36ae5b4a-87b6-a099-e670-7a6d91c4d83d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2697029-04:00" endTime="2024-04-30T15:10:41.2697030-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03a5db11-13ad-4bda-b8bf-312a1b47722a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a71ba074-11e3-4173-acd9-fe199444f176" testId="012acce3-be70-9c52-0079-282537368c45" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2880540-04:00" endTime="2024-04-30T15:10:41.2880540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a71ba074-11e3-4173-acd9-fe199444f176">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="365a571b-9e1a-4a07-a385-d9d0c5528c9c" testId="2d2d3033-a848-df08-a8af-68975afd756b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2918246-04:00" endTime="2024-04-30T15:10:41.2918247-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="365a571b-9e1a-4a07-a385-d9d0c5528c9c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adf5c685-ae48-4820-900c-1c148f96db1a" testId="da68f6d9-f043-fa82-30f4-89885b5beee8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3057092-04:00" endTime="2024-04-30T15:10:41.3057092-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adf5c685-ae48-4820-900c-1c148f96db1a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8fd9ddd8-39a5-4a87-9f33-c4b7b839c450" testId="7494c470-a3e0-23ff-98c9-2ca5a986358e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.2912798-04:00" endTime="2024-04-30T15:10:41.2912798-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fd9ddd8-39a5-4a87-9f33-c4b7b839c450">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03cbbd12-9210-4f71-88c0-b59bd83f9e76" testId="704bb9b2-e8cc-0539-bc1a-31e8b6f137bd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.2762868-04:00" endTime="2024-04-30T15:10:41.2762868-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03cbbd12-9210-4f71-88c0-b59bd83f9e76">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d997708a-0d23-406f-ad69-bd111b347b11" testId="75a43d67-1b2a-5662-88d7-0d35895bf6ce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.3149879-04:00" endTime="2024-04-30T15:10:41.3149879-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d997708a-0d23-406f-ad69-bd111b347b11">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1b0eddec-a6c0-44b5-aedc-5af3ecb5f8f3" testId="299cf12b-f7aa-2866-5f08-3d085d207bbd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3773391-04:00" endTime="2024-04-30T15:10:41.3773391-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b0eddec-a6c0-44b5-aedc-5af3ecb5f8f3">
      <Output>
        <StdOut>Testing pair: '123True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b76855ef-52b1-4a43-a7fd-96843474b207" testId="f47dba5b-d63f-dd03-e974-04fe8e3b3212" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3782737-04:00" endTime="2024-04-30T15:10:41.3782737-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b76855ef-52b1-4a43-a7fd-96843474b207">
      <Output>
        <StdOut>Testing pair: '+and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05d716b2-130b-4dd5-a004-714dd6bf6bf7" testId="02f9c500-2eea-5dd9-f130-06d8f2a813d1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3348815-04:00" endTime="2024-04-30T15:10:41.3348815-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05d716b2-130b-4dd5-a004-714dd6bf6bf7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aaaa3e39-9abc-490e-92c4-368a393fc229" testId="0584e66b-0399-2b53-1a64-82a7074a1818" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2982086-04:00" endTime="2024-04-30T15:10:41.2982086-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aaaa3e39-9abc-490e-92c4-368a393fc229">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2725cc2-140b-4cd8-8cff-d1b570bd369c" testId="cd07e200-61fa-0d64-2512-92e9985b3612" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.3054714-04:00" endTime="2024-04-30T15:10:41.3054715-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2725cc2-140b-4cd8-8cff-d1b570bd369c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b07ae476-ee03-49dd-a9f4-460acc540f76" testId="861271a2-8900-2ceb-93bf-ab7f7d4a4466" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2622058-04:00" endTime="2024-04-30T15:10:41.2622058-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b07ae476-ee03-49dd-a9f4-460acc540f76" />
    <UnitTestResult executionId="826649ad-c83e-451a-9758-2761ca78ae56" testId="098a82a9-6d3b-6182-bafa-c40fc4d60429" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2765890-04:00" endTime="2024-04-30T15:10:41.2765891-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="826649ad-c83e-451a-9758-2761ca78ae56">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8e0e1d3-e642-4ff1-a744-fedbefc23786" testId="85064fbc-f963-b912-332f-7413014b4349" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3591891-04:00" endTime="2024-04-30T15:10:41.3591891-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8e0e1d3-e642-4ff1-a744-fedbefc23786">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1b094dc-8798-482b-933d-701a6998ce86" testId="17acc240-0903-b201-693c-5fa35fb85788" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3286194-04:00" endTime="2024-04-30T15:10:41.3286194-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1b094dc-8798-482b-933d-701a6998ce86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6f11095-30c6-4f85-9cbc-dd75e45c9771" testId="3b296b0c-6adf-cb01-723a-664b88352d30" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3739268-04:00" endTime="2024-04-30T15:10:41.3739269-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6f11095-30c6-4f85-9cbc-dd75e45c9771">
      <Output>
        <StdOut>Testing pair: '--'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30b5e24b-15b6-4378-9151-1a3b940aa98d" testId="156352ea-c069-4b02-af9c-7724dbc0d349" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.3742659-04:00" endTime="2024-04-30T15:10:41.3742659-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30b5e24b-15b6-4378-9151-1a3b940aa98d">
      <Output>
        <StdOut>Testing pair: '+*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c9a91b4-e02e-4b65-851d-0dc07d9aeaf2" testId="ac38bef3-6340-4454-f640-619b9ea69904" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000247" startTime="2024-04-30T15:10:41.2629686-04:00" endTime="2024-04-30T15:10:41.2629687-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c9a91b4-e02e-4b65-851d-0dc07d9aeaf2">
      <Output>
        <StdOut>Testing pair with explicit separator: '123
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3df49285-e6b0-4501-a89b-4c662e06a54c" testId="69cb8a45-2bc4-d23d-48dd-74b4f89aea6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2844483-04:00" endTime="2024-04-30T15:10:41.2844484-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3df49285-e6b0-4501-a89b-4c662e06a54c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e66b7259-bf56-4644-b2d6-612e397f1122" testId="3e5ef830-54d4-6e15-04b0-33e1337e051d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3327673-04:00" endTime="2024-04-30T15:10:41.3327674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e66b7259-bf56-4644-b2d6-612e397f1122">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a038ba1-4cb9-4497-bb48-1e4716797d18" testId="fc304ebf-6e0c-d128-64bb-d7d12ee8e65c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2988991-04:00" endTime="2024-04-30T15:10:41.2988992-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a038ba1-4cb9-4497-bb48-1e4716797d18">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="108a75c7-bae9-4182-b6a5-ec3e9f134053" testId="0408073a-0179-580f-2fe9-dbe9f3cea242" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3536301-04:00" endTime="2024-04-30T15:10:41.3536302-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="108a75c7-bae9-4182-b6a5-ec3e9f134053">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eaa7b27e-0f01-4819-a780-9ab715192d80" testId="98780885-4400-c861-fda8-dc0f54413cde" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3554371-04:00" endTime="2024-04-30T15:10:41.3554372-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eaa7b27e-0f01-4819-a780-9ab715192d80">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ebaa288-1723-4599-b62e-f30c3bb52f8d" testId="37572768-763c-2507-76e0-88ae10ffc169" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2850578-04:00" endTime="2024-04-30T15:10:41.2850579-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ebaa288-1723-4599-b62e-f30c3bb52f8d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2eb0d569-76f3-427b-b595-153cf9e59254" testId="9e9f7c45-e9b6-0779-a26b-f747ed21350a" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: CloseParenthesisToken)" computerName="BRUNO" duration="00:00:00.0000019" startTime="2024-04-30T15:10:41.2531599-04:00" endTime="2024-04-30T15:10:41.2531599-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2eb0d569-76f3-427b-b595-153cf9e59254" />
    <UnitTestResult executionId="30cf4e9b-b77c-4940-9de1-cc8120e7096f" testId="c9d79cd6-5aa4-e12f-1a12-31dfb82bd060" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3256768-04:00" endTime="2024-04-30T15:10:41.3256769-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30cf4e9b-b77c-4940-9de1-cc8120e7096f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f95c2964-a55c-4486-a451-f4aa080ec67d" testId="416f70d6-19f6-3066-c054-a25409ca2939" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000223" startTime="2024-04-30T15:10:41.2546557-04:00" endTime="2024-04-30T15:10:41.2546557-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f95c2964-a55c-4486-a451-f4aa080ec67d" />
    <UnitTestResult executionId="ad31fd3d-fabc-40ed-ab72-588cc53f7867" testId="862f7806-9df9-f6fd-0e4a-b455ba538745" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3650132-04:00" endTime="2024-04-30T15:10:41.3650133-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad31fd3d-fabc-40ed-ab72-588cc53f7867">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9812a8b-b188-4c13-ba42-d3cf83eec22a" testId="a3a849db-e1df-055c-abe8-556ee4708f2c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000235" startTime="2024-04-30T15:10:41.2917725-04:00" endTime="2024-04-30T15:10:41.2917726-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9812a8b-b188-4c13-ba42-d3cf83eec22a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c867f88-3d45-474c-a0ce-17339a3d0ec1" testId="51d00848-040b-ff9b-aad8-72c8cbebe00c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000264" startTime="2024-04-30T15:10:41.2560002-04:00" endTime="2024-04-30T15:10:41.2560002-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c867f88-3d45-474c-a0ce-17339a3d0ec1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75f3bf54-f55d-4739-99b8-ce25b7a1aafa" testId="9a7e0400-23cc-3deb-0ea1-c518d7284095" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3254718-04:00" endTime="2024-04-30T15:10:41.3254719-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75f3bf54-f55d-4739-99b8-ce25b7a1aafa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="34026177-bcac-4138-bbed-9ef6b844f9d8" testId="e812edc5-2934-cc45-255d-9846116b0121" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3754307-04:00" endTime="2024-04-30T15:10:41.3754307-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34026177-bcac-4138-bbed-9ef6b844f9d8">
      <Output>
        <StdOut>Testing pair: '-is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c430bed8-26dc-4e7d-bc90-9fc6af226a0b" testId="626c9d36-46b5-078e-4f38-81a01f436752" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3033357-04:00" endTime="2024-04-30T15:10:41.3033358-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c430bed8-26dc-4e7d-bc90-9fc6af226a0b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73e28e4d-75e5-4342-a3d0-ea1878bd4b41" testId="455ee5b2-6a14-8e52-a211-79222312a84c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3078731-04:00" endTime="2024-04-30T15:10:41.3078732-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73e28e4d-75e5-4342-a3d0-ea1878bd4b41">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="607b6b07-769c-4406-9f97-98b0dbe2a5ed" testId="237aac17-b6ed-978a-3962-43a5fd10e445" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000050" startTime="2024-04-30T15:10:41.2528305-04:00" endTime="2024-04-30T15:10:41.2528307-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="607b6b07-769c-4406-9f97-98b0dbe2a5ed" />
    <UnitTestResult executionId="c8d908b5-f9cc-42d7-9abc-2c36a4526259" testId="550320e5-5c66-0986-209d-1c90aa745c65" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3059377-04:00" endTime="2024-04-30T15:10:41.3059378-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8d908b5-f9cc-42d7-9abc-2c36a4526259">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7df7113-4dcf-4fdc-992e-02801aeee9cf" testId="9d9b031a-42eb-1694-07a2-29494e14750d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000108" startTime="2024-04-30T15:10:41.3728893-04:00" endTime="2024-04-30T15:10:41.3728893-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7df7113-4dcf-4fdc-992e-02801aeee9cf">
      <Output>
        <StdOut>Testing pair: '/is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52d0dc57-db61-4537-b111-b3a3c6c84456" testId="f3230971-3432-235d-e0e5-ed722438a33b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000102" startTime="2024-04-30T15:10:41.3188691-04:00" endTime="2024-04-30T15:10:41.3188691-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52d0dc57-db61-4537-b111-b3a3c6c84456">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d26866c9-b0e0-4ab1-aed2-2a1e39304486" testId="513a3b57-b5ad-87c9-97c8-53046841fe44" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000243" startTime="2024-04-30T15:10:41.2698908-04:00" endTime="2024-04-30T15:10:41.2698909-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d26866c9-b0e0-4ab1-aed2-2a1e39304486">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3804d220-7e8b-4047-90ed-8a8811eedc68" testId="e6f7375e-1401-ba15-ecaf-69a460be3728" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000134" startTime="2024-04-30T15:10:41.2850170-04:00" endTime="2024-04-30T15:10:41.2850170-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3804d220-7e8b-4047-90ed-8a8811eedc68">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9d9b002-9f5d-4166-b7d7-c46206b70c65" testId="d5a3f5df-915f-7e07-ec15-fdb83fb6bb01" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3493712-04:00" endTime="2024-04-30T15:10:41.3493713-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9d9b002-9f5d-4166-b7d7-c46206b70c65">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0088563c-7e3e-47b1-bb69-e80db07f4800" testId="2b27a2e3-0254-2219-104b-92b08d525d93" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3281089-04:00" endTime="2024-04-30T15:10:41.3281090-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0088563c-7e3e-47b1-bb69-e80db07f4800">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c37a89fe-359d-415c-89cf-144fe88bf50f" testId="ed7cff34-308b-2188-765f-9b38a8c15589" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2840201-04:00" endTime="2024-04-30T15:10:41.2840202-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c37a89fe-359d-415c-89cf-144fe88bf50f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c453ba8-5aa2-4812-9201-466cbd898dfa" testId="1dc879b0-75f8-e62f-bebb-d2dc890b5385" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3702237-04:00" endTime="2024-04-30T15:10:41.3702237-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c453ba8-5aa2-4812-9201-466cbd898dfa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="628ebd9a-1b4c-452f-bbcc-d2d49594f080" testId="d86bfd56-da35-62f3-ffb2-408b52750349" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2864990-04:00" endTime="2024-04-30T15:10:41.2864990-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="628ebd9a-1b4c-452f-bbcc-d2d49594f080">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38c96877-4681-491e-9d3d-22eed77110ba" testId="cc131270-69fe-a159-b9d4-933fa46ccf10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3099816-04:00" endTime="2024-04-30T15:10:41.3099816-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38c96877-4681-491e-9d3d-22eed77110ba">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10f1d8aa-c325-4a58-b209-3aa299c9eb95" testId="b7f2a78b-93d1-c6a1-3938-79fb42a22a80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3322611-04:00" endTime="2024-04-30T15:10:41.3322612-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10f1d8aa-c325-4a58-b209-3aa299c9eb95">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d1bb29e-1562-4485-89c4-d73f9d4cedbe" testId="61b290f5-c7a7-0cd5-be1a-4d226956de5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3244692-04:00" endTime="2024-04-30T15:10:41.3244693-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d1bb29e-1562-4485-89c4-d73f9d4cedbe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11fc4b9b-e8d8-4ada-a10b-d6d3fc8e055b" testId="8488c70d-3af5-be62-17a5-f3a7f7d6bf1a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3676894-04:00" endTime="2024-04-30T15:10:41.3676895-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11fc4b9b-e8d8-4ada-a10b-d6d3fc8e055b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f6eb0d40-395a-498b-b38f-0c7bc74a2733" testId="b62effc0-dd9e-8915-b05a-9f77f0fec9af" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000133" startTime="2024-04-30T15:10:41.3260771-04:00" endTime="2024-04-30T15:10:41.3260772-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6eb0d40-395a-498b-b38f-0c7bc74a2733">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1b2a4be-a717-4ab2-8465-47e5dcf08eb2" testId="f3564b2c-77e7-c63c-9682-71a0f9869458" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3491471-04:00" endTime="2024-04-30T15:10:41.3491471-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1b2a4be-a717-4ab2-8465-47e5dcf08eb2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9106f80c-973a-4f6d-8664-79291da343f7" testId="15578177-dd32-65d2-c281-c8c05880e3a9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3168206-04:00" endTime="2024-04-30T15:10:41.3168207-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9106f80c-973a-4f6d-8664-79291da343f7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a1aa058b-44f3-4456-a02d-3d05b86ee943" testId="b9fc2bad-4475-9233-6854-2f48e605d6ef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3387212-04:00" endTime="2024-04-30T15:10:41.3387212-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1aa058b-44f3-4456-a02d-3d05b86ee943">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ebd9d461-7df7-496f-a7e0-c227485ad1ca" testId="90e83e0a-8b16-1e48-624e-11285ee93e11" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3409778-04:00" endTime="2024-04-30T15:10:41.3409779-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ebd9d461-7df7-496f-a7e0-c227485ad1ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c063310-da31-46bf-81bb-81611b781dc6" testId="9c8f545d-e41e-810c-60c8-cdb9dc6007ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2633815-04:00" endTime="2024-04-30T15:10:41.2633815-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c063310-da31-46bf-81bb-81611b781dc6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4fb740e-5867-4bcd-9b2b-d91b3238eccb" testId="49ce95ae-6947-45e6-c831-190f8cec3ef1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3371243-04:00" endTime="2024-04-30T15:10:41.3371244-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4fb740e-5867-4bcd-9b2b-d91b3238eccb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80df3ddd-8249-4bc2-a4a9-6fb2b6be35cd" testId="61058b56-cff4-4119-d079-807a621c3436" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3456553-04:00" endTime="2024-04-30T15:10:41.3456554-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80df3ddd-8249-4bc2-a4a9-6fb2b6be35cd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ef5f74f-2e7a-4f66-9c7d-2ec85fe17a06" testId="49a8efbc-6f2f-7a28-a0c0-0c67e74dd12b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3776518-04:00" endTime="2024-04-30T15:10:41.3776518-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ef5f74f-2e7a-4f66-9c7d-2ec85fe17a06">
      <Output>
        <StdOut>Testing pair: '=+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7fa64feb-1439-4915-aed4-a08d089c6017" testId="6379521b-db8d-bb6a-d193-4a67f679741c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3518242-04:00" endTime="2024-04-30T15:10:41.3518243-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fa64feb-1439-4915-aed4-a08d089c6017">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1d7410b8-4a1b-427d-b484-683261542a05" testId="59cc48e7-5713-77a4-f4f1-473400779c1a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000316" startTime="2024-04-30T15:10:41.2988715-04:00" endTime="2024-04-30T15:10:41.2988715-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d7410b8-4a1b-427d-b484-683261542a05">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fbe1858e-4002-4ebd-a6b9-fb55b8801c97" testId="7f8e3947-0655-8d8b-9307-99ef9480c20a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2977372-04:00" endTime="2024-04-30T15:10:41.2977372-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbe1858e-4002-4ebd-a6b9-fb55b8801c97">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="856556e6-6889-4db2-aa1b-99e6c2cf2568" testId="3470b683-785a-0e31-c0ed-b4792149b323" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2866492-04:00" endTime="2024-04-30T15:10:41.2866492-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="856556e6-6889-4db2-aa1b-99e6c2cf2568">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a3b7164-c50d-45fb-8aa4-b8c7a6202784" testId="245f2443-c738-c132-a903-72f4de2cef73" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.3817073-04:00" endTime="2024-04-30T15:10:41.3817073-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a3b7164-c50d-45fb-8aa4-b8c7a6202784">
      <Output>
        <StdOut>Testing pair: '=123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5b83435-ed98-4496-b0af-f20568fb6cc7" testId="014defa0-47f4-78e1-f10f-60b65ddd5d4e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2906140-04:00" endTime="2024-04-30T15:10:41.2906140-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5b83435-ed98-4496-b0af-f20568fb6cc7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2b61f166-8c58-4523-b8b9-a8dbe6473a09" testId="454f6007-76d6-a992-17fd-468ebfc1c663" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3342780-04:00" endTime="2024-04-30T15:10:41.3342780-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b61f166-8c58-4523-b8b9-a8dbe6473a09">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08fefb1a-501c-4be9-be21-2bfa6f77a4b8" testId="2c0e477a-e084-ffee-e366-443f3330dc5c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.3003786-04:00" endTime="2024-04-30T15:10:41.3003787-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08fefb1a-501c-4be9-be21-2bfa6f77a4b8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2a5a9966-ee89-41b1-bb6e-09112f677f47" testId="ddb47557-d6a3-0769-80db-6838bfa9b518" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3114769-04:00" endTime="2024-04-30T15:10:41.3114769-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a5a9966-ee89-41b1-bb6e-09112f677f47">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd5b3b5d-9239-4d58-8894-ff3d8cd49e6a" testId="5bfd12c9-ebda-74c7-b8e7-80c542893292" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3110408-04:00" endTime="2024-04-30T15:10:41.3110408-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd5b3b5d-9239-4d58-8894-ff3d8cd49e6a">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44a6bce9-a01a-41d1-ab93-225db86e059e" testId="3e056c5b-06aa-d4d7-d2fc-0f30995e22de" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2961947-04:00" endTime="2024-04-30T15:10:41.2961948-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44a6bce9-a01a-41d1-ab93-225db86e059e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7cfebcb4-8dba-4314-af9b-4dc5cf03148c" testId="72f8ebfe-0f3a-6579-1794-af70a0da7d4c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3301175-04:00" endTime="2024-04-30T15:10:41.3301175-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7cfebcb4-8dba-4314-af9b-4dc5cf03148c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee02dd02-0981-4976-bd45-8fe4d3558c16" testId="665aace9-c74f-af3b-205a-dcb76d0d3118" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: MinusToken, text: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3853017-04:00" endTime="2024-04-30T15:10:41.3853018-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee02dd02-0981-4976-bd45-8fe4d3558c16">
      <Output>
        <StdOut>Expected kind: MinusToken, Actual kind: MinusToken&#xD;
Expected text: '-', Actual text: '-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="136b2a93-3256-4cc9-a30e-18e640381dd7" testId="367b93b4-4c67-c69d-066f-e2f5740932be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2932564-04:00" endTime="2024-04-30T15:10:41.2932565-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="136b2a93-3256-4cc9-a30e-18e640381dd7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7cc00402-7c0a-4ab1-b85d-a534245e3107" testId="04a6e469-7af4-6b78-840d-717c082138da" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000136" startTime="2024-04-30T15:10:41.2617207-04:00" endTime="2024-04-30T15:10:41.2617207-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7cc00402-7c0a-4ab1-b85d-a534245e3107" />
    <UnitTestResult executionId="7085ecb6-3429-4332-ab3d-a2b43a90adf2" testId="6ec7cb64-cb36-cd48-7010-19b4158a1c1f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3691892-04:00" endTime="2024-04-30T15:10:41.3691893-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7085ecb6-3429-4332-ab3d-a2b43a90adf2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05e0a75e-c5eb-426f-95a5-e73b6ca8ff3d" testId="1ff976bd-8607-28c7-b9ec-9f76bde4e93b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2906502-04:00" endTime="2024-04-30T15:10:41.2906502-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05e0a75e-c5eb-426f-95a5-e73b6ca8ff3d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="814ab1e9-0b1d-4507-8ba7-2d66a4e9dc6b" testId="8e96ae09-a29e-a808-36c0-8477f2bd660d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3634746-04:00" endTime="2024-04-30T15:10:41.3634747-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="814ab1e9-0b1d-4507-8ba7-2d66a4e9dc6b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e9d74fd-37ca-41cf-891c-038e1deff0cc" testId="1db0614c-1a60-4394-e324-2d5851408d25" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2992883-04:00" endTime="2024-04-30T15:10:41.2992884-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e9d74fd-37ca-41cf-891c-038e1deff0cc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f71fc49-6727-4466-b481-f7a7a7552013" testId="bf85620b-2c13-b33a-56cb-58c7377065af" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3498647-04:00" endTime="2024-04-30T15:10:41.3498648-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f71fc49-6727-4466-b481-f7a7a7552013">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b85fcc29-596b-4136-83dc-58967480e01e" testId="e6428bc6-1927-0bbe-1970-1a21bab1e4de" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3297503-04:00" endTime="2024-04-30T15:10:41.3297504-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b85fcc29-596b-4136-83dc-58967480e01e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf8a0a14-37d2-47e6-8906-e01523f1cde5" testId="1dd75b6f-76e6-951c-2872-d569faffe5a3" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: PlusToken)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2716548-04:00" endTime="2024-04-30T15:10:41.2716548-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf8a0a14-37d2-47e6-8906-e01523f1cde5" />
    <UnitTestResult executionId="b4b2184f-381d-45c4-a614-f49a5421f939" testId="ff2cb129-d760-959d-9970-5ac810598e11" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: MinusToken)" computerName="BRUNO" duration="00:00:00.0000189" startTime="2024-04-30T15:10:41.2724643-04:00" endTime="2024-04-30T15:10:41.2724644-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4b2184f-381d-45c4-a614-f49a5421f939" />
    <UnitTestResult executionId="41aff99c-b4ee-4bbd-879f-7b4f4a0d010c" testId="dccfacd3-fae5-8ee4-af80-022882776018" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3062639-04:00" endTime="2024-04-30T15:10:41.3062640-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41aff99c-b4ee-4bbd-879f-7b4f4a0d010c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="539b7c6f-fd2e-4d53-a9da-58b8c036504e" testId="f888c12b-57ae-15fd-6fbb-5eb8cae0e6db" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3352956-04:00" endTime="2024-04-30T15:10:41.3352957-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="539b7c6f-fd2e-4d53-a9da-58b8c036504e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="257eff3e-286d-412c-b408-f7db08afd8e4" testId="b155706d-f5af-3974-c48a-c3e57f914be3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3795356-04:00" endTime="2024-04-30T15:10:41.3795357-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="257eff3e-286d-412c-b408-f7db08afd8e4">
      <Output>
        <StdOut>Testing pair: '!=)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="edf76309-c30b-4690-8ef7-9f7ad55125ee" testId="bf117e30-27ed-20f3-2003-73f66565238b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3520790-04:00" endTime="2024-04-30T15:10:41.3520790-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edf76309-c30b-4690-8ef7-9f7ad55125ee">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8f47800-2623-4b2c-b805-f41702278b90" testId="a1eb43d1-2e26-88ec-94af-b10f2d89fab6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000213" startTime="2024-04-30T15:10:41.3842512-04:00" endTime="2024-04-30T15:10:41.3842512-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8f47800-2623-4b2c-b805-f41702278b90">
      <Output>
        <StdOut>Testing pair: '==!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc1ec2c5-47f6-4fa5-b1c4-44a060173e1d" testId="a895bd09-e362-8a88-4b9c-81782e66f735" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2901647-04:00" endTime="2024-04-30T15:10:41.2901648-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc1ec2c5-47f6-4fa5-b1c4-44a060173e1d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd057bd9-87ee-4763-b636-f28efb898877" testId="35e51989-4a9b-41b5-612a-2c20c7b72507" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3074890-04:00" endTime="2024-04-30T15:10:41.3074891-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd057bd9-87ee-4763-b636-f28efb898877">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="889a174d-7ad2-4f20-8ef1-ec2ec4fd9073" testId="2b485f0b-2dbe-31e0-bd95-65cf001c6938" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.3145603-04:00" endTime="2024-04-30T15:10:41.3145603-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="889a174d-7ad2-4f20-8ef1-ec2ec4fd9073">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="782f7470-ea10-4d8c-8bb1-fecfbadec13a" testId="b90e1aa6-1d54-19a3-3d52-29efb7d1bb4c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3331940-04:00" endTime="2024-04-30T15:10:41.3331941-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="782f7470-ea10-4d8c-8bb1-fecfbadec13a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c125f97c-866c-46d2-8aa6-ab100b5a7b10" testId="e2d951cf-e480-469b-b7db-38089ce98223" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3553265-04:00" endTime="2024-04-30T15:10:41.3553266-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c125f97c-866c-46d2-8aa6-ab100b5a7b10">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35407bf6-738e-4d13-baab-cda7ab40c91c" testId="eb23603a-5108-c6b8-afb2-7e8255c016f0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3099447-04:00" endTime="2024-04-30T15:10:41.3099448-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35407bf6-738e-4d13-baab-cda7ab40c91c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="189a39b3-113a-467f-b952-4daa3528cf85" testId="6910dc81-7cf1-ae11-02e1-37f11097f48e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.2688089-04:00" endTime="2024-04-30T15:10:41.2688089-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="189a39b3-113a-467f-b952-4daa3528cf85">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90d3eff9-29d4-4197-b46c-0b7547bb1cd7" testId="d0b78af5-d45e-b3cd-9f0a-a6caf685b42e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2952591-04:00" endTime="2024-04-30T15:10:41.2952591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90d3eff9-29d4-4197-b46c-0b7547bb1cd7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a0bcda9-fd21-4c67-98b7-3f5cadb4f559" testId="34453c3b-b472-12c1-e402-d01bae3a6a6c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000201" startTime="2024-04-30T15:10:41.2674238-04:00" endTime="2024-04-30T15:10:41.2674239-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a0bcda9-fd21-4c67-98b7-3f5cadb4f559">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d956aedc-a5a7-4d87-8811-9ff83e50d7f5" testId="9539023c-02bd-bccc-a476-32ba7d1bc93e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3004671-04:00" endTime="2024-04-30T15:10:41.3004671-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d956aedc-a5a7-4d87-8811-9ff83e50d7f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f322175a-11cc-4a1c-8f5b-ce42816de348" testId="59be6f1c-5330-253d-47ff-cefb2866c6cf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3134936-04:00" endTime="2024-04-30T15:10:41.3134937-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f322175a-11cc-4a1c-8f5b-ce42816de348">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d66c85b9-4d56-4e77-8ce2-3dbb9e3de02e" testId="d4d6878d-9b31-864f-eda4-d16aaf3b8ccb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3454428-04:00" endTime="2024-04-30T15:10:41.3454429-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d66c85b9-4d56-4e77-8ce2-3dbb9e3de02e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6edcd507-08b4-496d-9f0f-6a8a86444efe" testId="d6289a1f-1ddd-f2c4-2615-1271e8766494" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3328839-04:00" endTime="2024-04-30T15:10:41.3328839-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6edcd507-08b4-496d-9f0f-6a8a86444efe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="117d3c1c-6076-447e-8bb5-6f601353def2" testId="249440b4-0a71-1e76-25eb-958ffb710349" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2979411-04:00" endTime="2024-04-30T15:10:41.2979412-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="117d3c1c-6076-447e-8bb5-6f601353def2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7147d272-6162-4d6b-89ac-76fb73e00c0e" testId="36698baa-a51d-af03-02d4-cac0f86e8420" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2897209-04:00" endTime="2024-04-30T15:10:41.2897209-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7147d272-6162-4d6b-89ac-76fb73e00c0e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a9eecfe-b858-40d3-b9ea-90b54b6343eb" testId="49a4c055-5280-55bf-c752-20dd20b13c98" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3290317-04:00" endTime="2024-04-30T15:10:41.3290317-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a9eecfe-b858-40d3-b9ea-90b54b6343eb">
      <Output>
        <StdOut>Testing pair with explicit separator: '=
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30dab097-b828-4ae3-90b8-3159fa6ac847" testId="ab422cf1-4d42-932b-550d-f671aca698fc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3163849-04:00" endTime="2024-04-30T15:10:41.3163850-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30dab097-b828-4ae3-90b8-3159fa6ac847">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec0a2a03-291c-4d2a-9546-aff20932f7a9" testId="95cacc02-0531-98ee-b460-a5c47c913440" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3180345-04:00" endTime="2024-04-30T15:10:41.3180345-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec0a2a03-291c-4d2a-9546-aff20932f7a9">
      <Output>
        <StdOut>Testing pair with explicit separator: '=
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="403b1847-8899-42c4-98ad-9ead979b313c" testId="354b0482-c0b1-fef9-9174-55b403cd9a02" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3255315-04:00" endTime="2024-04-30T15:10:41.3255315-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="403b1847-8899-42c4-98ad-9ead979b313c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba313daa-be06-4b13-bef7-771bc7c895cd" testId="2a2d33c4-7a7d-9adb-116b-080b10fa253e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000133" startTime="2024-04-30T15:10:41.3332785-04:00" endTime="2024-04-30T15:10:41.3332786-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba313daa-be06-4b13-bef7-771bc7c895cd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b261ae78-ced4-4796-a42e-a5da1b4db07e" testId="7690d101-d32f-55e3-4d58-d79a088c5404" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3326835-04:00" endTime="2024-04-30T15:10:41.3326836-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b261ae78-ced4-4796-a42e-a5da1b4db07e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="70212474-87ba-4e3a-845f-6071d5fbeb14" testId="79e5f3ca-a451-ddfa-d150-44b754273811" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3388954-04:00" endTime="2024-04-30T15:10:41.3388955-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70212474-87ba-4e3a-845f-6071d5fbeb14">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf3e9a13-81c2-43a8-8d18-062b83580d38" testId="982e2f7d-0b81-b484-4778-e33ac3cc1588" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000200" startTime="2024-04-30T15:10:41.2552156-04:00" endTime="2024-04-30T15:10:41.2552157-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf3e9a13-81c2-43a8-8d18-062b83580d38" />
    <UnitTestResult executionId="4c8ab956-04cc-4e2f-b78d-da59ea8439f3" testId="103fd020-3f19-b932-50dc-e2a1602bb401" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2978481-04:00" endTime="2024-04-30T15:10:41.2978481-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c8ab956-04cc-4e2f-b78d-da59ea8439f3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74a9f3aa-c777-4234-a505-257d922e9b12" testId="417aa184-9281-e207-ffd7-efd7f1b0e0f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3759097-04:00" endTime="2024-04-30T15:10:41.3759098-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74a9f3aa-c777-4234-a505-257d922e9b12">
      <Output>
        <StdOut>Testing pair: '/)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fbdfc61f-819b-4cdd-8e50-458b690343c9" testId="a3687180-e6d8-837f-4ca5-b1145ac982d7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3473992-04:00" endTime="2024-04-30T15:10:41.3473993-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbdfc61f-819b-4cdd-8e50-458b690343c9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="baf20633-2db8-41be-815b-0bf7e1aef92f" testId="6591d89f-2a0a-3965-b5ec-423713b2c205" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3281363-04:00" endTime="2024-04-30T15:10:41.3281363-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="baf20633-2db8-41be-815b-0bf7e1aef92f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac5d68d2-7132-4826-9c66-156eec2c0b5d" testId="eb3c49ae-150d-bb52-7485-ce206265fe6c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3343589-04:00" endTime="2024-04-30T15:10:41.3343589-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac5d68d2-7132-4826-9c66-156eec2c0b5d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17bd7f2f-4358-4143-9f76-bf59e5dc7622" testId="baa099a7-ddde-6ab6-3697-bea6e047176e" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000256" startTime="2024-04-30T15:10:41.2639572-04:00" endTime="2024-04-30T15:10:41.2639573-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17bd7f2f-4358-4143-9f76-bf59e5dc7622" />
    <UnitTestResult executionId="23bde27f-b138-45fb-a1f3-32b5b76fa554" testId="400fae07-37d3-167f-ba30-c1f92fd8965e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2973575-04:00" endTime="2024-04-30T15:10:41.2973575-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23bde27f-b138-45fb-a1f3-32b5b76fa554">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a3e44c1-8bce-4a6e-a8c1-24d18735f063" testId="8bf9438d-3854-1da9-89a9-c835a2aed750" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2746438-04:00" endTime="2024-04-30T15:10:41.2746439-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a3e44c1-8bce-4a6e-a8c1-24d18735f063" />
    <UnitTestResult executionId="4881a90e-6c8e-40db-ad37-b6805317895d" testId="e5076cf3-0f6d-de80-49e7-7bcc69dbbe4f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000126" startTime="2024-04-30T15:10:41.2646942-04:00" endTime="2024-04-30T15:10:41.2646943-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4881a90e-6c8e-40db-ad37-b6805317895d" />
    <UnitTestResult executionId="e1d033cb-da47-4405-8586-fdace1a81967" testId="63c020dd-254c-61b1-3d79-dd52784a1ef0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2942490-04:00" endTime="2024-04-30T15:10:41.2942491-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1d033cb-da47-4405-8586-fdace1a81967">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e080869c-71d8-4fa0-891e-453b78008c5e" testId="e35d4334-93a8-5e9d-e757-198bbcaf081d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.2819672-04:00" endTime="2024-04-30T15:10:41.2819673-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e080869c-71d8-4fa0-891e-453b78008c5e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7495a883-74c4-4071-a3fa-8e6ec6d61827" testId="4560a98e-b5cd-13d6-d888-0299b48a11dd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3282145-04:00" endTime="2024-04-30T15:10:41.3282145-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7495a883-74c4-4071-a3fa-8e6ec6d61827">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9b28b69-e61e-4d0c-b612-7a10e96462ad" testId="cf3ed160-397e-e526-f7fa-dc726d96cc25" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3029431-04:00" endTime="2024-04-30T15:10:41.3029432-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9b28b69-e61e-4d0c-b612-7a10e96462ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dcd16024-4200-4d54-8d66-fb7c76ebe02e" testId="13737a59-ca1c-a4d8-a36b-20a4dcd26802" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3723611-04:00" endTime="2024-04-30T15:10:41.3723611-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dcd16024-4200-4d54-8d66-fb7c76ebe02e">
      <Output>
        <StdOut>Testing pair: '-)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aaa7fcad-1ff9-4dd1-a5da-38d85ecceed4" testId="e9d6960b-1453-223f-c7fb-ddee751024ca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000102" startTime="2024-04-30T15:10:41.3719653-04:00" endTime="2024-04-30T15:10:41.3719654-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aaa7fcad-1ff9-4dd1-a5da-38d85ecceed4">
      <Output>
        <StdOut>Testing pair: '+)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b477f375-9618-4315-af92-7061bf5d972e" testId="39abb43b-7f9f-b04e-d127-799b4d9f2be1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000108" startTime="2024-04-30T15:10:41.3342219-04:00" endTime="2024-04-30T15:10:41.3342219-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b477f375-9618-4315-af92-7061bf5d972e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4398fabc-3458-4f02-8fd5-ea3d0c2db195" testId="35acdb8b-c38d-4a8e-9f18-01db09682693" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3473463-04:00" endTime="2024-04-30T15:10:41.3473464-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4398fabc-3458-4f02-8fd5-ea3d0c2db195">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53729194-f12a-4501-bb3e-ea9535ee2af7" testId="9e57dafa-8ff6-1c0c-4b2c-2616814adddc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3742992-04:00" endTime="2024-04-30T15:10:41.3742992-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53729194-f12a-4501-bb3e-ea9535ee2af7">
      <Output>
        <StdOut>Testing pair: '(is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9150fe21-8fdf-4959-a05d-ff09b49b00d5" testId="d7340824-4a76-2eb4-a932-16bf262381c9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3208284-04:00" endTime="2024-04-30T15:10:41.3208285-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9150fe21-8fdf-4959-a05d-ff09b49b00d5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99a916e0-0cc7-49e5-a2d2-8c9da51a5490" testId="1b705caa-324e-d2e9-a521-6b2a451a71d4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3068078-04:00" endTime="2024-04-30T15:10:41.3068078-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99a916e0-0cc7-49e5-a2d2-8c9da51a5490">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5453f4b2-c9f3-4282-a743-de25f081d8e4" testId="6acc3dda-726e-2430-8372-d9cc9237078e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2870604-04:00" endTime="2024-04-30T15:10:41.2870605-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5453f4b2-c9f3-4282-a743-de25f081d8e4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01f88704-d26c-426e-8734-846cea9fc3a0" testId="67971d7f-8966-085a-7fcf-4c4b94c23809" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.2816105-04:00" endTime="2024-04-30T15:10:41.2816105-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01f88704-d26c-426e-8734-846cea9fc3a0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a03537f-5afb-425d-8430-72aec8c6f1d0" testId="47f63a76-b560-c5a5-a496-1639cc309ae8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2855247-04:00" endTime="2024-04-30T15:10:41.2855247-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a03537f-5afb-425d-8430-72aec8c6f1d0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88c5999b-7111-4227-891a-7e2e13ae2b55" testId="9db89611-6405-4450-f54d-9cf23aae973d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000122" startTime="2024-04-30T15:10:41.3701880-04:00" endTime="2024-04-30T15:10:41.3701881-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88c5999b-7111-4227-891a-7e2e13ae2b55">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e6106d2-d42f-4db8-88be-5c827973d3b7" testId="99cd600e-a1a6-1eca-c7e7-3249de14498f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2742825-04:00" endTime="2024-04-30T15:10:41.2742825-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e6106d2-d42f-4db8-88be-5c827973d3b7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa496413-20ae-4281-a2ff-0b006883a501" testId="c8a4c009-6744-85aa-0bef-4f1cd7a9a8d7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3271939-04:00" endTime="2024-04-30T15:10:41.3271939-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa496413-20ae-4281-a2ff-0b006883a501">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fb97d5a2-f7be-435f-9bc1-398c8839af8c" testId="9644e009-01aa-4834-cefa-4c76f3d62362" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3170280-04:00" endTime="2024-04-30T15:10:41.3170280-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb97d5a2-f7be-435f-9bc1-398c8839af8c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef790f44-50cd-4436-9e0b-aefd73f59eec" testId="00f4036c-2907-7953-0328-b3296a3034f9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.3462946-04:00" endTime="2024-04-30T15:10:41.3462948-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef790f44-50cd-4436-9e0b-aefd73f59eec">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26a01cb9-9859-41ce-afec-6e2fa7f1a305" testId="8dff03e5-2f6c-5e9c-72a5-e3730dcefe57" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3134662-04:00" endTime="2024-04-30T15:10:41.3134662-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26a01cb9-9859-41ce-afec-6e2fa7f1a305">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="00f46d8b-cbad-4ea1-bdd3-fb168eea444e" testId="1aa98c9e-341a-200b-6e27-5917d08404b1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2772678-04:00" endTime="2024-04-30T15:10:41.2772679-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00f46d8b-cbad-4ea1-bdd3-fb168eea444e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3dd5590-96b0-48c2-848c-d5545b82d08f" testId="1466e056-48ee-497e-1c0b-265acdef1176" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2770811-04:00" endTime="2024-04-30T15:10:41.2770812-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3dd5590-96b0-48c2-848c-d5545b82d08f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b275d95d-3725-47c5-8d60-d851adaa708a" testId="8a94eaad-76fe-1c10-f0ed-171663de50e5" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NumberToken)" computerName="BRUNO" duration="00:00:00.0000025" startTime="2024-04-30T15:10:41.2546856-04:00" endTime="2024-04-30T15:10:41.2546857-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b275d95d-3725-47c5-8d60-d851adaa708a" />
    <UnitTestResult executionId="11bb385c-ccbe-4cf2-875d-8e2250ba3acf" testId="f9e67261-6cca-689c-f1d1-0a706e0d7abc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3827760-04:00" endTime="2024-04-30T15:10:41.3827761-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11bb385c-ccbe-4cf2-875d-8e2250ba3acf">
      <Output>
        <StdOut>Testing pair: '!=!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c03c40b3-e916-498d-adfa-401add286365" testId="a5137272-c1b7-1328-54b8-e6d44d49931c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3709614-04:00" endTime="2024-04-30T15:10:41.3709614-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c03c40b3-e916-498d-adfa-401add286365">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d922958-91bf-41e8-8c64-b8a632d16231" testId="10e37091-7c6c-888d-6758-8f069053bcc7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3446790-04:00" endTime="2024-04-30T15:10:41.3446790-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d922958-91bf-41e8-8c64-b8a632d16231">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ea1b623-a6c1-4436-990c-2e766a42c903" testId="1cd7138e-0ca2-078c-7bd3-9f8f307fc273" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3138409-04:00" endTime="2024-04-30T15:10:41.3138410-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ea1b623-a6c1-4436-990c-2e766a42c903">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="424b1e8f-f605-4029-995a-057a59036704" testId="28e8acbc-84c9-b9f3-0fa0-63cc89ff73d7" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.2648078-04:00" endTime="2024-04-30T15:10:41.2648078-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="424b1e8f-f605-4029-995a-057a59036704" />
    <UnitTestResult executionId="99a997a3-271e-4724-8c91-5fb5f06409c3" testId="ae6ab7a8-2646-6333-099f-50c5bf591034" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3563418-04:00" endTime="2024-04-30T15:10:41.3563419-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99a997a3-271e-4724-8c91-5fb5f06409c3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="64255c2d-dc60-43b9-a299-6a1ce5120f3f" testId="739de6a5-3791-efc7-a91e-af875d9f2ddd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2621823-04:00" endTime="2024-04-30T15:10:41.2621823-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="64255c2d-dc60-43b9-a299-6a1ce5120f3f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fde1ec34-7d30-4231-a1b8-8fdebd561043" testId="dd8bb4f7-b50e-0a8d-9152-fc0dbcdaa1fe" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: SlashToken)" computerName="BRUNO" duration="00:00:00.0000045" startTime="2024-04-30T15:10:41.2528818-04:00" endTime="2024-04-30T15:10:41.2528819-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fde1ec34-7d30-4231-a1b8-8fdebd561043" />
    <UnitTestResult executionId="c83d62be-a1d8-4499-8011-4d847da15076" testId="d736ea85-bf26-a143-afcb-f35e82ff9cd4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.2905822-04:00" endTime="2024-04-30T15:10:41.2905823-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c83d62be-a1d8-4499-8011-4d847da15076">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5aea6f1-9600-476f-beb4-1b5edf15780e" testId="e2604e2e-2363-2622-c8b8-4169a69bf9d3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000144" startTime="2024-04-30T15:10:41.3048859-04:00" endTime="2024-04-30T15:10:41.3048860-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5aea6f1-9600-476f-beb4-1b5edf15780e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e2096bf-6fe6-4f1d-a92c-a5ef5dbe048a" testId="e486c347-579e-2f51-6b23-51a750fc38fa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3173187-04:00" endTime="2024-04-30T15:10:41.3173188-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e2096bf-6fe6-4f1d-a92c-a5ef5dbe048a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b35e22e0-654a-4c72-b6ed-e31b9ac18fea" testId="e1b1dab3-c067-dc44-d015-1e9946c97a82" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3302017-04:00" endTime="2024-04-30T15:10:41.3302018-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b35e22e0-654a-4c72-b6ed-e31b9ac18fea">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="503b43ae-3007-46b0-8c1c-b3b930c15a17" testId="a015f9b3-8328-352a-d22f-991e77b13b1c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3256227-04:00" endTime="2024-04-30T15:10:41.3256228-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="503b43ae-3007-46b0-8c1c-b3b930c15a17">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4a660a6-9c8d-41bd-8c1b-ef2c78e23415" testId="de05bbd3-df06-56bf-2144-2691706bfee3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3168528-04:00" endTime="2024-04-30T15:10:41.3168529-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4a660a6-9c8d-41bd-8c1b-ef2c78e23415">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ed179e5-908b-4dc1-a55f-8092d826dcb5" testId="00f2eb3e-8be9-97b1-56e8-b7e0733b4633" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3444090-04:00" endTime="2024-04-30T15:10:41.3444091-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ed179e5-908b-4dc1-a55f-8092d826dcb5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20760d44-c128-4a57-bbf3-f5db175213ad" testId="af3f4007-d296-1177-5269-f1f6ab79f3d4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3133412-04:00" endTime="2024-04-30T15:10:41.3133413-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20760d44-c128-4a57-bbf3-f5db175213ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59b04887-bcda-49ce-a2e9-a0f1faa40a81" testId="bec1547e-9b11-309e-108a-ef1cb719655f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3267140-04:00" endTime="2024-04-30T15:10:41.3267141-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59b04887-bcda-49ce-a2e9-a0f1faa40a81">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f474dd96-1c44-4cb3-8b94-7b3624cae1eb" testId="7d1ef23c-d9a8-c125-71b2-9b0f48ad1725" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3675303-04:00" endTime="2024-04-30T15:10:41.3675304-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f474dd96-1c44-4cb3-8b94-7b3624cae1eb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="19b759ec-2951-4fdd-9b36-c82e889f8680" testId="2e5f1912-5862-356c-7a12-7b5889b82828" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000186" startTime="2024-04-30T15:10:41.3017685-04:00" endTime="2024-04-30T15:10:41.3017685-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19b759ec-2951-4fdd-9b36-c82e889f8680">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84ae8aa5-e7db-48a4-a172-d9459fb26d7b" testId="69c7177b-9463-e131-33c0-74327be87bf6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3481646-04:00" endTime="2024-04-30T15:10:41.3481647-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84ae8aa5-e7db-48a4-a172-d9459fb26d7b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b95232db-e65f-4b51-a06f-49f808e6576d" testId="ab3ed821-239d-43b3-cd8b-8ffad9506219" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3188418-04:00" endTime="2024-04-30T15:10:41.3188418-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b95232db-e65f-4b51-a06f-49f808e6576d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0cd396b4-209a-46b7-a88f-f03df75d9a49" testId="b2bef78f-4ef1-abc3-ea1b-d4318033fb05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.3034683-04:00" endTime="2024-04-30T15:10:41.3034684-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0cd396b4-209a-46b7-a88f-f03df75d9a49">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33755ca0-28c0-4f5b-8e0f-0d00bd342b38" testId="409246ac-c89b-79e7-164a-3be40fad3bbc" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000124" startTime="2024-04-30T15:10:41.2694321-04:00" endTime="2024-04-30T15:10:41.2694321-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33755ca0-28c0-4f5b-8e0f-0d00bd342b38" />
    <UnitTestResult executionId="7c4238e4-b0ca-4350-8644-dc20110e5cf5" testId="af854179-e937-d0bb-518d-15cef4c2c227" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2921352-04:00" endTime="2024-04-30T15:10:41.2921352-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c4238e4-b0ca-4350-8644-dc20110e5cf5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4dce40d2-1793-4878-812d-8e1cba3aa84d" testId="e4ea26ca-f5d1-e377-073b-395a97ee7db1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000140" startTime="2024-04-30T15:10:41.3837012-04:00" endTime="2024-04-30T15:10:41.3837013-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dce40d2-1793-4878-812d-8e1cba3aa84d">
      <Output>
        <StdOut>Testing pair: '==-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36d258ee-2118-4da1-a183-016e2854ec4c" testId="0127a3f1-4b9f-2272-ab52-3848acbb584f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3675622-04:00" endTime="2024-04-30T15:10:41.3675622-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36d258ee-2118-4da1-a183-016e2854ec4c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c81623e-a17c-4ebf-8f5a-287b14a3ac70" testId="a6ba3436-f05f-d637-82ef-962c974df69e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3781400-04:00" endTime="2024-04-30T15:10:41.3781400-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c81623e-a17c-4ebf-8f5a-287b14a3ac70">
      <Output>
        <StdOut>Testing pair: '-ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0799e59-98c0-4142-bc76-40f4537175ab" testId="d11b35ee-f503-18d7-3c2b-0be57da3e1d9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3517229-04:00" endTime="2024-04-30T15:10:41.3517230-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0799e59-98c0-4142-bc76-40f4537175ab">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b5d1630-8304-4f79-9e9b-6bcabad946e4" testId="34491c98-812b-f1ad-1fb1-912463a251fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3445721-04:00" endTime="2024-04-30T15:10:41.3445722-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b5d1630-8304-4f79-9e9b-6bcabad946e4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="94e3a9d2-5185-4c04-9097-91b3edd5b7d8" testId="ff61f6c5-edb2-5414-8279-15dc59d17452" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.2767579-04:00" endTime="2024-04-30T15:10:41.2767579-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94e3a9d2-5185-4c04-9097-91b3edd5b7d8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a90767e-3029-40d9-acde-ab153d99a60c" testId="71f49a81-03d0-a610-b473-4ca78f8047e5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3174318-04:00" endTime="2024-04-30T15:10:41.3174319-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a90767e-3029-40d9-acde-ab153d99a60c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9af567d2-d580-4e75-a003-3515ebdd936a" testId="58eff7f5-7e47-8617-2a7c-4036d4a28a9c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000130" startTime="2024-04-30T15:10:41.3782474-04:00" endTime="2024-04-30T15:10:41.3782474-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9af567d2-d580-4e75-a003-3515ebdd936a">
      <Output>
        <StdOut>Testing pair: '=('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08790e58-f022-490b-a9c1-42b0389db9bc" testId="8677aeb1-5913-c332-d852-05b01b0c46a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000189" startTime="2024-04-30T15:10:41.2983582-04:00" endTime="2024-04-30T15:10:41.2983583-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08790e58-f022-490b-a9c1-42b0389db9bc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa0d3293-134c-4727-851b-1ca790e11f24" testId="55c81bee-3be9-9d88-671b-354fa510d63b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3398219-04:00" endTime="2024-04-30T15:10:41.3398220-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa0d3293-134c-4727-851b-1ca790e11f24">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67b34076-24dd-415c-bff9-a241de24229d" testId="214e9979-0e11-c33f-f5dc-07e6dd3bfea8" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2651891-04:00" endTime="2024-04-30T15:10:41.2651891-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67b34076-24dd-415c-bff9-a241de24229d" />
    <UnitTestResult executionId="65decb2e-d0e4-4286-9f39-c06b08383fa0" testId="379ab016-5707-4c59-ec49-57f0b60c3051" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.2937048-04:00" endTime="2024-04-30T15:10:41.2937049-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65decb2e-d0e4-4286-9f39-c06b08383fa0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcbae167-bfa0-4e3f-929b-ac0dcd7039c5" testId="d455cef2-6145-61b5-ce22-bfe9b401d266" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2820860-04:00" endTime="2024-04-30T15:10:41.2820860-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcbae167-bfa0-4e3f-929b-ac0dcd7039c5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d291c3a2-f1a7-4045-9ac1-1bf89f4389dc" testId="d815b0dc-6b01-b4dd-c3c3-d180dc31beaa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3170019-04:00" endTime="2024-04-30T15:10:41.3170020-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d291c3a2-f1a7-4045-9ac1-1bf89f4389dc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="361236ac-76c5-43c1-8988-830082ed3d56" testId="9f5de07d-2f74-9b66-5f8f-668dafc78abf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3208555-04:00" endTime="2024-04-30T15:10:41.3208555-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="361236ac-76c5-43c1-8988-830082ed3d56">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04382e74-c00e-4cc0-aab5-7f297d5b799b" testId="367a8e40-6494-cd42-e98f-8a54f0affbc9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3502088-04:00" endTime="2024-04-30T15:10:41.3502089-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04382e74-c00e-4cc0-aab5-7f297d5b799b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a3e2d023-b12c-4611-b654-6672bea0f69c" testId="e4f40087-83b2-42e2-8a34-30a5e04132d0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3590225-04:00" endTime="2024-04-30T15:10:41.3590225-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3e2d023-b12c-4611-b654-6672bea0f69c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e2e6bb6e-b2d3-454e-b92b-df2e7d5866c6" testId="8791e29e-fa4d-12ed-5dd7-2ca199626822" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3692467-04:00" endTime="2024-04-30T15:10:41.3692468-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2e6bb6e-b2d3-454e-b92b-df2e7d5866c6">
      <Output>
        <StdOut>Testing pair with explicit separator: '=   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f3c40738-ab8c-454e-a732-8f2c34c83eda" testId="2e1e2aa2-ebc7-58dd-fe2b-a4550f40d5cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2931745-04:00" endTime="2024-04-30T15:10:41.2931745-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3c40738-ab8c-454e-a732-8f2c34c83eda">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d33386f4-00f6-4f34-9c52-4a9d5cfa5ca5" testId="a4f2384d-7d1c-6f25-2a97-d4c510f8534c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2957318-04:00" endTime="2024-04-30T15:10:41.2957318-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d33386f4-00f6-4f34-9c52-4a9d5cfa5ca5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a0bd1f6-19ff-45da-999f-1dd2b683c61c" testId="12220949-71e8-a712-ba67-259b76a39314" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.2917986-04:00" endTime="2024-04-30T15:10:41.2917987-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a0bd1f6-19ff-45da-999f-1dd2b683c61c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11858df5-4fbb-49b7-90a0-df24f74d9c30" testId="d703c53d-b220-02e6-8e34-dc4daf37eaa5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3160587-04:00" endTime="2024-04-30T15:10:41.3160588-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11858df5-4fbb-49b7-90a0-df24f74d9c30">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f72c8e98-7117-45de-839d-bb7a0d2abf69" testId="fddd01ad-3b92-2894-53b8-c40ebef85e6c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3074082-04:00" endTime="2024-04-30T15:10:41.3074082-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f72c8e98-7117-45de-839d-bb7a0d2abf69">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66019e01-4381-4e41-9836-fe0a03431afd" testId="4cc500c8-3ae0-041d-77e4-8fb667af6264" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.2815455-04:00" endTime="2024-04-30T15:10:41.2815455-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66019e01-4381-4e41-9836-fe0a03431afd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a350d347-d3ae-4b05-9687-09a6742a5327" testId="62a030f4-1698-3fd7-ad95-a5649fa8ae16" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2966895-04:00" endTime="2024-04-30T15:10:41.2966895-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a350d347-d3ae-4b05-9687-09a6742a5327">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7524e10f-ea2f-44d4-83fe-3fd5a6fc3747" testId="f1654ff0-c1b7-d09a-ec85-eb38e4bd101b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3547073-04:00" endTime="2024-04-30T15:10:41.3547074-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7524e10f-ea2f-44d4-83fe-3fd5a6fc3747">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e1195ce1-683c-4989-a190-c79e505610a6" testId="f0f7565f-0b1d-362f-8182-5543a95ee675" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3093489-04:00" endTime="2024-04-30T15:10:41.3093489-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1195ce1-683c-4989-a190-c79e505610a6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb5ac064-1a25-4893-812f-23ed29b92c79" testId="e48b5b61-6f81-3d93-e52f-36c739af3f73" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3160058-04:00" endTime="2024-04-30T15:10:41.3160058-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb5ac064-1a25-4893-812f-23ed29b92c79">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e24433d-e083-4472-8b13-74c3a3cbcbed" testId="45f1eccf-4511-2821-5c57-d9806eadd586" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.3034159-04:00" endTime="2024-04-30T15:10:41.3034159-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e24433d-e083-4472-8b13-74c3a3cbcbed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8cc76fb0-80d0-49a6-aa39-00ad901531b5" testId="f7825c15-6955-9c10-2802-be9060546fa9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3836740-04:00" endTime="2024-04-30T15:10:41.3836741-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8cc76fb0-80d0-49a6-aa39-00ad901531b5">
      <Output>
        <StdOut>Testing pair: '123=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73d5d975-81eb-4b89-9092-a82d9294c766" testId="616f78a7-594a-af80-5ffc-de76f568ebcd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000225" startTime="2024-04-30T15:10:41.2688787-04:00" endTime="2024-04-30T15:10:41.2688788-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73d5d975-81eb-4b89-9092-a82d9294c766">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f21411da-8c28-4efe-9013-365989abd534" testId="a109bb21-22d3-9c2b-c9e9-acfdb20e43b9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3580230-04:00" endTime="2024-04-30T15:10:41.3580231-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f21411da-8c28-4efe-9013-365989abd534">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f40498f5-98cf-4c53-a0fc-4b41d9497626" testId="020a0aee-b19d-75b1-e718-e8d539dd81a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2968296-04:00" endTime="2024-04-30T15:10:41.2968296-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f40498f5-98cf-4c53-a0fc-4b41d9497626">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a40daa6e-925a-4800-9f1f-916102beef7b" testId="4c3effb1-73b3-68bf-e87a-411923261072" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2874737-04:00" endTime="2024-04-30T15:10:41.2874737-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a40daa6e-925a-4800-9f1f-916102beef7b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="614f9c08-1514-4bf0-b56b-28db43acadfa" testId="09b27210-9b36-0eda-3afd-880d3cb68602" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3772867-04:00" endTime="2024-04-30T15:10:41.3772868-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="614f9c08-1514-4bf0-b56b-28db43acadfa">
      <Output>
        <StdOut>Testing pair: '==123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eede9116-ca17-40cd-b6ef-e43519c8d78d" testId="3097b537-eff8-5242-b364-c45faafb1314" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.2617683-04:00" endTime="2024-04-30T15:10:41.2617684-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eede9116-ca17-40cd-b6ef-e43519c8d78d" />
    <UnitTestResult executionId="e5bb5b7d-2a1c-4d09-9adb-ca98feae94f6" testId="df1b42b4-19a4-da66-3739-ce01213baec0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3510294-04:00" endTime="2024-04-30T15:10:41.3510295-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5bb5b7d-2a1c-4d09-9adb-ca98feae94f6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7c7e4453-ed11-4cbe-a1d1-f2de96261692" testId="0eaa47b3-dd9d-3e00-669f-e8cbadf2fa36" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2886091-04:00" endTime="2024-04-30T15:10:41.2886092-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c7e4453-ed11-4cbe-a1d1-f2de96261692">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2385fedb-a8f3-41a2-98b2-8df99344c3a3" testId="d09a4c72-054b-a8f1-4db7-1a8b3bdecc33" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.3824230-04:00" endTime="2024-04-30T15:10:41.3824230-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2385fedb-a8f3-41a2-98b2-8df99344c3a3">
      <Output>
        <StdOut>Testing pair: '!=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e1f80f4-64e4-4ba3-a167-925a2e3924c0" testId="06e9a9da-3bcd-2c8b-acfb-ef18ca77a802" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3831965-04:00" endTime="2024-04-30T15:10:41.3831965-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e1f80f4-64e4-4ba3-a167-925a2e3924c0">
      <Output>
        <StdOut>Testing pair: '123/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2376ef50-ffe7-4748-b669-9d2d2a1f7070" testId="5cc7c775-e5e9-3294-d4ab-df25400ac24b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.2763130-04:00" endTime="2024-04-30T15:10:41.2763130-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2376ef50-ffe7-4748-b669-9d2d2a1f7070">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ab89610-b94a-4bde-b747-f271f5f32d6e" testId="ec9d91f2-e860-03df-f360-fd467302876b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000137" startTime="2024-04-30T15:10:41.2650613-04:00" endTime="2024-04-30T15:10:41.2650613-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ab89610-b94a-4bde-b747-f271f5f32d6e" />
    <UnitTestResult executionId="32854f84-15c9-429d-975e-9d1d2fae6144" testId="24e9ef4c-a97d-76ea-8db0-1481e127f493" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2864120-04:00" endTime="2024-04-30T15:10:41.2864121-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32854f84-15c9-429d-975e-9d1d2fae6144">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7894bb59-ea72-49b3-937d-026f19e67861" testId="8b7dd7f2-1952-77c3-f373-97c7b0a59069" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3461310-04:00" endTime="2024-04-30T15:10:41.3461311-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7894bb59-ea72-49b3-937d-026f19e67861">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="db9268b2-34cf-415f-b481-5273681d1ae2" testId="4f6ce076-3cc5-b184-476f-d7388202c246" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000247" startTime="2024-04-30T15:10:41.2982494-04:00" endTime="2024-04-30T15:10:41.2982494-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db9268b2-34cf-415f-b481-5273681d1ae2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0ccceb8-b551-4475-ac87-ec8c423f561c" testId="4a7ec4ec-ba32-0bb8-29d5-4b0e6406f994" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2734366-04:00" endTime="2024-04-30T15:10:41.2734366-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0ccceb8-b551-4475-ac87-ec8c423f561c" />
    <UnitTestResult executionId="9a6e3441-1535-473f-87b9-fd34993b6b21" testId="a9695862-6d4b-57cc-1f6b-01b19c31df97" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.2635297-04:00" endTime="2024-04-30T15:10:41.2635297-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a6e3441-1535-473f-87b9-fd34993b6b21" />
    <UnitTestResult executionId="58a49d0b-acd8-4953-8545-287f3e60d30f" testId="f693ce20-5b70-1c96-fb84-b894d6920ebd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3444628-04:00" endTime="2024-04-30T15:10:41.3444629-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58a49d0b-acd8-4953-8545-287f3e60d30f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f1c91ac-6b55-4e4e-854d-e69cf3f058c5" testId="bdd3ecba-87bd-95a9-1c6d-650cd9ed1ef0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2962540-04:00" endTime="2024-04-30T15:10:41.2962540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f1c91ac-6b55-4e4e-854d-e69cf3f058c5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6af82b4-4766-42a7-a82b-edf75629a353" testId="13c6c706-3c8d-63ae-fadb-12d20f5c0ab7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3598495-04:00" endTime="2024-04-30T15:10:41.3598496-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6af82b4-4766-42a7-a82b-edf75629a353">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95b6fa63-5c3a-4cf7-864d-85718d330bed" testId="1094150b-e81c-1700-8f0d-247edaa0e74d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: SlashToken, text: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000138" startTime="2024-04-30T15:10:41.3860943-04:00" endTime="2024-04-30T15:10:41.3860944-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95b6fa63-5c3a-4cf7-864d-85718d330bed">
      <Output>
        <StdOut>Expected kind: SlashToken, Actual kind: SlashToken&#xD;
Expected text: '/', Actual text: '/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bb8385e-6b09-4691-b57b-eb828b8a811d" testId="3557232a-f63a-617f-ca31-42e504ed4a77" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3178338-04:00" endTime="2024-04-30T15:10:41.3178338-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bb8385e-6b09-4691-b57b-eb828b8a811d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2db548a4-c470-47fc-8804-4150a3d939e8" testId="0e5906b2-d2bc-e1d8-cd2b-12f22212f185" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.3250446-04:00" endTime="2024-04-30T15:10:41.3250447-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2db548a4-c470-47fc-8804-4150a3d939e8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16d29fa7-8e99-47c7-a14c-998c903a8b42" testId="36941d16-f5db-3461-4010-38c9d181c102" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000278" startTime="2024-04-30T15:10:41.2958958-04:00" endTime="2024-04-30T15:10:41.2958959-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16d29fa7-8e99-47c7-a14c-998c903a8b42">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2bfc4afc-feac-492b-8646-360bd802b32d" testId="426d26a7-61d7-c92a-8f45-2114ac069325" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2825893-04:00" endTime="2024-04-30T15:10:41.2825894-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2bfc4afc-feac-492b-8646-360bd802b32d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d0539f1-0f28-4cc9-88d0-3ca0765c18ca" testId="8e0dea92-77e3-53be-777a-0171c358a448" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3472917-04:00" endTime="2024-04-30T15:10:41.3472918-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d0539f1-0f28-4cc9-88d0-3ca0765c18ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b873d2fb-e022-4440-8a26-f5e80c7e55f5" testId="2fc95601-174b-591e-9230-a83d7d1f322a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2993431-04:00" endTime="2024-04-30T15:10:41.2993432-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b873d2fb-e022-4440-8a26-f5e80c7e55f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a07b5cc-640a-4a32-8dc6-f75cd5917237" testId="8a60e5d8-3722-6d1e-2172-a2d772183bbd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3115415-04:00" endTime="2024-04-30T15:10:41.3115415-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a07b5cc-640a-4a32-8dc6-f75cd5917237">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="669362cb-1bf3-48e4-a6de-dd6383a3fda1" testId="fa98d31f-c7bc-d1e5-5b95-d1c7066967c5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3626960-04:00" endTime="2024-04-30T15:10:41.3626961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="669362cb-1bf3-48e4-a6de-dd6383a3fda1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3fb9b17e-da82-441c-8a3d-6fcc9ede04fb" testId="0666f839-a4cf-7fda-34ce-0767cd6677e6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3261936-04:00" endTime="2024-04-30T15:10:41.3261936-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3fb9b17e-da82-441c-8a3d-6fcc9ede04fb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3b3e0d9-0e4d-4807-977a-615c9ff08e03" testId="68ab69e5-31a1-d038-e858-27ba18a29700" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2875904-04:00" endTime="2024-04-30T15:10:41.2875904-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3b3e0d9-0e4d-4807-977a-615c9ff08e03">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06cffc5c-a4f1-43a6-a744-829beb8699fa" testId="608e3f1c-f64a-0864-6159-a878358b4542" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2987549-04:00" endTime="2024-04-30T15:10:41.2987549-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06cffc5c-a4f1-43a6-a744-829beb8699fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9034269c-5abd-4375-9d17-65ce9a90dec5" testId="97188b89-2695-38fc-a66e-b65dd3d51aa5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2875277-04:00" endTime="2024-04-30T15:10:41.2875277-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9034269c-5abd-4375-9d17-65ce9a90dec5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8f9ccc2-52ec-492a-ba48-60d522cfc368" testId="58bb4a4b-d318-9bf2-6a9d-19eef808f5cd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3275248-04:00" endTime="2024-04-30T15:10:41.3275248-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8f9ccc2-52ec-492a-ba48-60d522cfc368">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b491d29-31f4-45ef-b5bf-19d0c6eba543" testId="65625912-7110-58fe-d39b-97644474d36a" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2688603-04:00" endTime="2024-04-30T15:10:41.2688603-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b491d29-31f4-45ef-b5bf-19d0c6eba543" />
    <UnitTestResult executionId="a74dcb13-fd57-4270-ae18-6db385ebfdb5" testId="3ace36df-7b19-7dc7-66b1-0b23ad68e7ee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3353775-04:00" endTime="2024-04-30T15:10:41.3353775-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a74dcb13-fd57-4270-ae18-6db385ebfdb5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9232e097-f4ba-48ee-a6c0-b4dcae9d3d93" testId="edd6fcf5-7034-f862-8f6f-052f101a8282" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.2962265-04:00" endTime="2024-04-30T15:10:41.2962266-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9232e097-f4ba-48ee-a6c0-b4dcae9d3d93">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e0e58c9-a3bc-4fe2-812f-29269f64495a" testId="178fbd62-52fd-54ab-2c05-b44f8fe31448" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000036" startTime="2024-04-30T15:10:41.2545096-04:00" endTime="2024-04-30T15:10:41.2545097-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e0e58c9-a3bc-4fe2-812f-29269f64495a" />
    <UnitTestResult executionId="4b0c65af-e425-40e1-942f-b3f4628242ee" testId="ffbe5a70-5aeb-128e-8f54-97e9d02ba9c1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000227" startTime="2024-04-30T15:10:41.2836710-04:00" endTime="2024-04-30T15:10:41.2836710-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b0c65af-e425-40e1-942f-b3f4628242ee">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2660ca0c-9338-488d-8edb-628b21548874" testId="e53f2de7-8b6d-d1dd-ad5a-f4b6cea6df0e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3754043-04:00" endTime="2024-04-30T15:10:41.3754044-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2660ca0c-9338-488d-8edb-628b21548874">
      <Output>
        <StdOut>Testing pair: '==*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="905980bb-400e-42a4-bf8f-1db31d317515" testId="4dec9f03-e31d-38bb-647a-72258968556a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3390514-04:00" endTime="2024-04-30T15:10:41.3390514-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="905980bb-400e-42a4-bf8f-1db31d317515">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcfe30aa-473e-488e-a5f8-b321542fc29d" testId="39f83c82-ff4d-ac91-804d-1e6b8e3ee9f4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.3103914-04:00" endTime="2024-04-30T15:10:41.3103914-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcfe30aa-473e-488e-a5f8-b321542fc29d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91bfa6b4-f8cb-470c-a997-bf327ae86c3c" testId="a91f24bd-eba9-7759-381c-13904cbe1c6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3318315-04:00" endTime="2024-04-30T15:10:41.3318316-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91bfa6b4-f8cb-470c-a997-bf327ae86c3c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5556e6e-e88f-4da2-a2b3-7a976857b23a" testId="0de504e2-c1bb-b2d3-40b8-05f755f08415" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000138" startTime="2024-04-30T15:10:41.3681806-04:00" endTime="2024-04-30T15:10:41.3681807-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5556e6e-e88f-4da2-a2b3-7a976857b23a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e5f4920-fce8-4aeb-a282-e8517b262eaf" testId="8133ba28-0888-df23-ee42-db7d702a2d5e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000346" startTime="2024-04-30T15:10:41.2941609-04:00" endTime="2024-04-30T15:10:41.2941609-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e5f4920-fce8-4aeb-a282-e8517b262eaf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4229f80-0bc4-45a0-8698-91ea3f48caca" testId="33bdbc1a-784c-f695-e9ea-d9e709942ac9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2880264-04:00" endTime="2024-04-30T15:10:41.2880264-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4229f80-0bc4-45a0-8698-91ea3f48caca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="577fed21-d692-4580-a4e9-2146c21005c2" testId="ba461e44-0c0d-5645-c754-a0378a14299d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2835871-04:00" endTime="2024-04-30T15:10:41.2835872-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="577fed21-d692-4580-a4e9-2146c21005c2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="526075fd-64e2-437e-a3cd-2b7850cb3bb2" testId="13f9a5d8-2bb2-113c-cc4f-1c7d076ba956" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3659665-04:00" endTime="2024-04-30T15:10:41.3659666-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="526075fd-64e2-437e-a3cd-2b7850cb3bb2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="37664507-e4bf-4954-9c3c-fb6904f829b4" testId="92ee789f-d7fe-2328-8fe1-9a2017a63a10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000246" startTime="2024-04-30T15:10:41.2717885-04:00" endTime="2024-04-30T15:10:41.2717885-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37664507-e4bf-4954-9c3c-fb6904f829b4">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c389f35c-70fb-4226-9f95-11e9f487314d" testId="75e3412a-7df5-0c0e-912e-56f982589520" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3063756-04:00" endTime="2024-04-30T15:10:41.3063757-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c389f35c-70fb-4226-9f95-11e9f487314d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5e4b76d-7402-49b5-b081-840b69705bce" testId="f23448ad-2c2f-03e0-8d55-724d70412633" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: BadToken)" computerName="BRUNO" duration="00:00:00.0000027" startTime="2024-04-30T15:10:41.2512389-04:00" endTime="2024-04-30T15:10:41.2512389-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5e4b76d-7402-49b5-b081-840b69705bce" />
    <UnitTestResult executionId="9fa05217-6739-49e0-8a46-3441d664d9ef" testId="eced55ec-0ba4-d364-48ac-e76623af532b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3108299-04:00" endTime="2024-04-30T15:10:41.3108299-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9fa05217-6739-49e0-8a46-3441d664d9ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0df2b0a5-3165-44f6-8cac-b6e9565f4245" testId="7ad5768c-9ff7-5b1f-71c3-55ac5f70113e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2860161-04:00" endTime="2024-04-30T15:10:41.2860162-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0df2b0a5-3165-44f6-8cac-b6e9565f4245">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88c9ec6d-17bc-49f1-b170-d75b73122b1e" testId="5055d80a-b074-4776-a476-517b795199ad" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.2928642-04:00" endTime="2024-04-30T15:10:41.2928643-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88c9ec6d-17bc-49f1-b170-d75b73122b1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5070ae86-6733-413f-8417-c9e244254fb7" testId="f8d03796-c0db-b253-1d1c-3810c9ff1316" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) is not 12&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000335" startTime="2024-04-30T15:10:41.2708686-04:00" endTime="2024-04-30T15:10:41.2708686-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5070ae86-6733-413f-8417-c9e244254fb7" />
    <UnitTestResult executionId="d6e7ed0d-77bc-4bc5-9198-7751ec1c7362" testId="954398a7-0fed-cd17-1f23-3b2250c67c39" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3261325-04:00" endTime="2024-04-30T15:10:41.3261325-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6e7ed0d-77bc-4bc5-9198-7751ec1c7362">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="434af5f7-c8c9-486d-b056-89500ca8bdb6" testId="b6ac5ef3-a60c-a7ae-36ca-96f590be0bdc" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000038" startTime="2024-04-30T15:10:41.2544002-04:00" endTime="2024-04-30T15:10:41.2544003-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="434af5f7-c8c9-486d-b056-89500ca8bdb6" />
    <UnitTestResult executionId="f1c8c6bd-4708-44a0-a3d6-dce82b2c1c34" testId="291a42ac-0ced-1b10-a153-45ac82247332" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000233" startTime="2024-04-30T15:10:41.2670407-04:00" endTime="2024-04-30T15:10:41.2670407-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1c8c6bd-4708-44a0-a3d6-dce82b2c1c34">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8c4c70e-28fc-4de0-9ee5-701f82d6fdfa" testId="50b3c91b-49dd-1f07-51f5-bed2bec06291" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3762382-04:00" endTime="2024-04-30T15:10:41.3762382-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8c4c70e-28fc-4de0-9ee5-701f82d6fdfa">
      <Output>
        <StdOut>Testing pair: ')*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ade2cf01-b010-48ee-b4b2-424454f852c0" testId="f8d5ad6b-71c0-d650-0df4-cf5fb14ab24c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3796615-04:00" endTime="2024-04-30T15:10:41.3796616-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ade2cf01-b010-48ee-b4b2-424454f852c0">
      <Output>
        <StdOut>Testing pair: '**'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa7fe799-ed99-423f-b4d0-f51e91a54e8a" testId="d42ef24e-fd73-71ba-ca10-b5233a720bdf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000138" startTime="2024-04-30T15:10:41.3712285-04:00" endTime="2024-04-30T15:10:41.3712286-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa7fe799-ed99-423f-b4d0-f51e91a54e8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ca6b751-a670-4446-8680-cfaccaa5313e" testId="039e0dad-470d-f08a-22f3-644b6025d750" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.2762038-04:00" endTime="2024-04-30T15:10:41.2762039-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ca6b751-a670-4446-8680-cfaccaa5313e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="147b13c7-7121-439c-a34d-e4481601c63d" testId="c7fdc022-d907-b182-45e4-85d2293dd4e3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3306743-04:00" endTime="2024-04-30T15:10:41.3306744-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="147b13c7-7121-439c-a34d-e4481601c63d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df0d6a89-7f79-44d3-9449-ed6f98364855" testId="86d78e8e-c5b7-39e8-c10f-9c137f87cdab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3693025-04:00" endTime="2024-04-30T15:10:41.3693026-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df0d6a89-7f79-44d3-9449-ed6f98364855">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b85fcc51-de54-461e-906d-f68bacb21a7e" testId="700cea66-18dd-f8a2-3199-e6e934e7bdeb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2953431-04:00" endTime="2024-04-30T15:10:41.2953431-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b85fcc51-de54-461e-906d-f68bacb21a7e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="85355ef2-6fc5-4bef-b93f-5ae3f396d163" testId="85ce88b4-c68a-f38e-eaa9-e9ff0edc49dd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.3729980-04:00" endTime="2024-04-30T15:10:41.3729980-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85355ef2-6fc5-4bef-b93f-5ae3f396d163">
      <Output>
        <StdOut>Testing pair: '==ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f70715ec-4243-4d5c-913c-a025c281e24a" testId="71fb6d07-8805-2958-15a0-1820a3c546b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3028298-04:00" endTime="2024-04-30T15:10:41.3028299-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f70715ec-4243-4d5c-913c-a025c281e24a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4fda756-fe98-4c04-a77d-9c8ca1d34a6a" testId="93c5967b-8aa2-6de6-db09-3ce49be474c1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3128355-04:00" endTime="2024-04-30T15:10:41.3128355-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4fda756-fe98-4c04-a77d-9c8ca1d34a6a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f3fabe5-4d76-4bf7-89df-ab25bf99b2ad" testId="b310265c-d10e-5f47-0138-e012f182f10a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3143994-04:00" endTime="2024-04-30T15:10:41.3143995-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f3fabe5-4d76-4bf7-89df-ab25bf99b2ad">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc690140-0945-4fee-ab93-3191e7cd8306" testId="18d64658-9b0f-06be-42a4-550298d60807" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2777401-04:00" endTime="2024-04-30T15:10:41.2777402-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc690140-0945-4fee-ab93-3191e7cd8306">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7bbdcdb-7aa7-4105-98c9-da874374b626" testId="66906472-cbd5-914f-3fff-0017b2ae75b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3619039-04:00" endTime="2024-04-30T15:10:41.3619040-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7bbdcdb-7aa7-4105-98c9-da874374b626">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="897ddf77-dfa4-4f2c-b69e-1ada372118ac" testId="05ad52bc-4a27-d0ba-b4d8-fe12eb695765" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2860709-04:00" endTime="2024-04-30T15:10:41.2860709-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="897ddf77-dfa4-4f2c-b69e-1ada372118ac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25810cfb-932a-4650-a14f-3c813a6001db" testId="5547e2f8-556e-ee7c-945f-1802eeb1e6a0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3193350-04:00" endTime="2024-04-30T15:10:41.3193351-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25810cfb-932a-4650-a14f-3c813a6001db">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e83895e-2b6f-47a2-89b0-9d123edd88c1" testId="129b88a2-7977-d6f4-b778-9fca7a490bfc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3308127-04:00" endTime="2024-04-30T15:10:41.3308127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e83895e-2b6f-47a2-89b0-9d123edd88c1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44523cd8-177b-4e93-baca-3d954f80bcb5" testId="1a18e30a-f4ae-a7d2-e7de-c1d7ea3dc62b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3095142-04:00" endTime="2024-04-30T15:10:41.3095142-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44523cd8-177b-4e93-baca-3d954f80bcb5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="60ae46d4-0573-4206-b924-40c2bc1ab610" testId="571bf72e-0b9d-9508-739b-4a52e08c199b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3490915-04:00" endTime="2024-04-30T15:10:41.3490916-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60ae46d4-0573-4206-b924-40c2bc1ab610">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ae38f18a-c8dc-4e86-9ac2-a05c22933829" testId="6fda6444-e2e6-2243-10da-3a33e2007b83" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3266877-04:00" endTime="2024-04-30T15:10:41.3266878-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae38f18a-c8dc-4e86-9ac2-a05c22933829">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe07a6e9-f55c-4c87-a867-beb5f6896e56" testId="50e5ed68-a702-3cd7-f018-e01837779d48" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2871511-04:00" endTime="2024-04-30T15:10:41.2871511-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe07a6e9-f55c-4c87-a867-beb5f6896e56">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e7eab168-ef45-4273-afcf-591a876e428e" testId="af425286-20bf-1aba-6a73-c01778af4221" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.2875011-04:00" endTime="2024-04-30T15:10:41.2875012-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7eab168-ef45-4273-afcf-591a876e428e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67541dfd-591f-4889-95cf-0aea4389f691" testId="bd0837cb-8ce8-0352-e69a-23ebdba401d2" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2616373-04:00" endTime="2024-04-30T15:10:41.2616373-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67541dfd-591f-4889-95cf-0aea4389f691" />
    <UnitTestResult executionId="36237dcf-77b5-4ac5-aca0-c61f79309fd9" testId="cebb0766-5c7e-a9fd-83bb-06d25a0b73a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.2973301-04:00" endTime="2024-04-30T15:10:41.2973301-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36237dcf-77b5-4ac5-aca0-c61f79309fd9">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="859423f9-d5d8-48c3-9c5c-e7b4eccdf9bd" testId="6793cdb2-1fa9-c573-12c7-687f212d19a6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.3039207-04:00" endTime="2024-04-30T15:10:41.3039208-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="859423f9-d5d8-48c3-9c5c-e7b4eccdf9bd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa10a46f-4d3d-44e4-a42b-cbbb028cdc25" testId="ab61f069-d7af-6363-23d3-7889d08bba0d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3083895-04:00" endTime="2024-04-30T15:10:41.3083895-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa10a46f-4d3d-44e4-a42b-cbbb028cdc25">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2576f8c4-a657-4cf6-b257-2b8a587a0000" testId="c8763bc6-c204-b842-6764-91aef6141ad0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3667001-04:00" endTime="2024-04-30T15:10:41.3667001-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2576f8c4-a657-4cf6-b257-2b8a587a0000">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf56338f-ccc0-4a82-8ece-92b911f0d77d" testId="517277ef-731b-75ec-5fe7-5a452c0c7b9b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3358771-04:00" endTime="2024-04-30T15:10:41.3358771-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf56338f-ccc0-4a82-8ece-92b911f0d77d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2051d83e-d5f8-4488-92f0-fc2cc1916c60" testId="ee038337-7e83-3829-4541-262112e525dd" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: MinusToken)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2728401-04:00" endTime="2024-04-30T15:10:41.2728401-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2051d83e-d5f8-4488-92f0-fc2cc1916c60" />
    <UnitTestResult executionId="6590dc7e-cab2-4987-80d1-8379210f2618" testId="be84df17-db24-0bb2-915a-c8a1fa417ec3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3511308-04:00" endTime="2024-04-30T15:10:41.3511309-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6590dc7e-cab2-4987-80d1-8379210f2618">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c6dea5c-acb5-4244-872a-78b52b844b11" testId="3940d3a1-0c7f-ac8d-fc35-355df2a6a8e2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3245315-04:00" endTime="2024-04-30T15:10:41.3245315-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c6dea5c-acb5-4244-872a-78b52b844b11">
      <Output>
        <StdOut>Testing pair with explicit separator: '123	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2fe29938-1e75-4a25-b4ed-8b80ac1bd16f" testId="74d5adf3-f8f9-137d-c242-8334cfb33e97" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3327944-04:00" endTime="2024-04-30T15:10:41.3327944-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fe29938-1e75-4a25-b4ed-8b80ac1bd16f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b266e03-826c-4aa2-b407-6d94a0b25c5b" testId="11a0aa3e-dfbe-2d6d-3c87-42de2ce233a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.2621132-04:00" endTime="2024-04-30T15:10:41.2621132-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b266e03-826c-4aa2-b407-6d94a0b25c5b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77952b29-22e2-48ae-b45c-d42f112248c9" testId="058aa5a6-89f0-4e9c-135f-4d9fc11ed546" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NumberToken, text: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3855224-04:00" endTime="2024-04-30T15:10:41.3855225-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77952b29-22e2-48ae-b45c-d42f112248c9">
      <Output>
        <StdOut>Expected kind: NumberToken, Actual kind: NumberToken&#xD;
Expected text: '123', Actual text: '123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b92b2a2-ada4-43fc-a975-77253379d913" testId="7ebbe48b-8d7b-aa11-383f-f8e9a7643e7c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2906779-04:00" endTime="2024-04-30T15:10:41.2906779-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b92b2a2-ada4-43fc-a975-77253379d913">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc02ddb2-d809-4731-a80c-fad65630dd80" testId="20290e42-b99c-08b2-c4e6-46cf308dd005" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2821399-04:00" endTime="2024-04-30T15:10:41.2821400-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc02ddb2-d809-4731-a80c-fad65630dd80">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97e69cce-67b3-4d5f-bde2-de34742086fa" testId="b68d4b60-9985-3219-1ae7-92eb78e2f244" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2907885-04:00" endTime="2024-04-30T15:10:41.2907886-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97e69cce-67b3-4d5f-bde2-de34742086fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a377451a-f7c5-4168-9d9b-6c3f24fb7108" testId="58290772-4edb-9bae-a3f4-2ad48f29d0a8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3553851-04:00" endTime="2024-04-30T15:10:41.3553851-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a377451a-f7c5-4168-9d9b-6c3f24fb7108">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="00de71fb-ddeb-4523-b8c4-973f42b83aa3" testId="cc1a9500-e810-a78c-88c2-7189a5b5ba53" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3369055-04:00" endTime="2024-04-30T15:10:41.3369056-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00de71fb-ddeb-4523-b8c4-973f42b83aa3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a67993f0-dd94-4a2a-8deb-84fafd2a3409" testId="5e512e02-bba4-2cf2-4536-0045d5816e30" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3169140-04:00" endTime="2024-04-30T15:10:41.3169140-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a67993f0-dd94-4a2a-8deb-84fafd2a3409">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54f3b1b2-4837-4f24-8b49-0318039655a1" testId="3e0ccea7-93ae-68bb-50f1-9608ca78398d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3464540-04:00" endTime="2024-04-30T15:10:41.3464540-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54f3b1b2-4837-4f24-8b49-0318039655a1">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da125257-6767-45d3-84cf-a2db772205fb" testId="746b3c8a-d934-231b-7ffc-8f1ad35724fb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3317521-04:00" endTime="2024-04-30T15:10:41.3317521-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da125257-6767-45d3-84cf-a2db772205fb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e7f370e-f101-4443-9439-ba030c286ebb" testId="6b591c96-3b55-7e23-4843-7204d293bb8e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2820561-04:00" endTime="2024-04-30T15:10:41.2820561-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e7f370e-f101-4443-9439-ba030c286ebb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ba80fac-eb71-456b-b4ad-54d00d8657ab" testId="a32eae14-a07f-84bd-5e54-461369523bc1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.2851182-04:00" endTime="2024-04-30T15:10:41.2851183-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ba80fac-eb71-456b-b4ad-54d00d8657ab">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6587715a-da59-4684-a81f-b4df97074f41" testId="26e89c02-6144-d316-7a7b-30fd7c304ef5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3277143-04:00" endTime="2024-04-30T15:10:41.3277144-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6587715a-da59-4684-a81f-b4df97074f41">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="484e10df-f64a-4c89-8ee0-2a4aa3def3eb" testId="f9fd49f9-7453-b747-5aef-6ff46c317e32" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3316698-04:00" endTime="2024-04-30T15:10:41.3316698-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="484e10df-f64a-4c89-8ee0-2a4aa3def3eb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b027951e-deb7-4642-9b2c-fc2470c64a87" testId="47107f4f-71ba-1b0b-c429-d93a17b98798" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3073455-04:00" endTime="2024-04-30T15:10:41.3073455-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b027951e-deb7-4642-9b2c-fc2470c64a87">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4bab75ad-b413-40e5-8af7-211647dfa109" testId="7cf34c74-5e0e-37be-48ed-05e001616231" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3548085-04:00" endTime="2024-04-30T15:10:41.3548086-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bab75ad-b413-40e5-8af7-211647dfa109">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a0e3d6ec-5515-48df-a867-51377b5f9725" testId="48404b21-efa4-8869-cfad-85feef889555" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3829176-04:00" endTime="2024-04-30T15:10:41.3829177-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0e3d6ec-5515-48df-a867-51377b5f9725">
      <Output>
        <StdOut>Testing pair: '123('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="802cb0a0-f90d-49a7-bdac-fef0e6a8785b" testId="93fa8f6a-4cfa-0b97-8ecb-7cd8e09fe238" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.3665855-04:00" endTime="2024-04-30T15:10:41.3665855-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="802cb0a0-f90d-49a7-bdac-fef0e6a8785b">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16365fc7-776b-4937-88f3-468f6d9289df" testId="bd9e7a7c-60b2-e811-9b4d-553ee54a5f4a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3768623-04:00" endTime="2024-04-30T15:10:41.3768624-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16365fc7-776b-4937-88f3-468f6d9289df">
      <Output>
        <StdOut>Testing pair: '(not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55bb8b9e-ae0b-4d73-9a38-c5ebdd5d20aa" testId="4a77ac8a-258d-afe9-e1a8-68e185302b51" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3265808-04:00" endTime="2024-04-30T15:10:41.3265808-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55bb8b9e-ae0b-4d73-9a38-c5ebdd5d20aa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32995318-7e13-4d4e-9b57-48d38636ac61" testId="0922fb92-b11c-d22f-3471-b89a046a1537" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3198393-04:00" endTime="2024-04-30T15:10:41.3198394-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32995318-7e13-4d4e-9b57-48d38636ac61">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4a3dc7f-2782-43c4-a3fc-6a93fc3d4c57" testId="2af27e7e-ee3a-3357-a3b7-c75818007f9e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3733039-04:00" endTime="2024-04-30T15:10:41.3733039-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4a3dc7f-2782-43c4-a3fc-6a93fc3d4c57">
      <Output>
        <StdOut>Testing pair: '!=False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="352d96af-651f-47e5-b43b-25b5b27e55de" testId="5039a68b-c6be-d319-6ca6-ad5b83059696" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3416904-04:00" endTime="2024-04-30T15:10:41.3416904-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="352d96af-651f-47e5-b43b-25b5b27e55de">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a95dc371-4004-4653-a496-95ebf89edddf" testId="a39d1ebf-f122-92aa-193f-145fd0bad93e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.2757911-04:00" endTime="2024-04-30T15:10:41.2757911-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a95dc371-4004-4653-a496-95ebf89edddf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ffbbecbd-3983-4267-beeb-d884092ede8a" testId="4153f852-805b-eb52-4493-8b0b310f83e6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3702869-04:00" endTime="2024-04-30T15:10:41.3702870-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffbbecbd-3983-4267-beeb-d884092ede8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0e9f526-13ad-416f-8777-ebf57908d75b" testId="2a68fa1f-1494-ce05-e599-9ab68236b79a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2922592-04:00" endTime="2024-04-30T15:10:41.2922593-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0e9f526-13ad-416f-8777-ebf57908d75b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d26457a7-9fe6-4253-8ed7-eb1adeb3e205" testId="4b87edc6-5800-273c-b384-567e59d70f26" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2869792-04:00" endTime="2024-04-30T15:10:41.2869792-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d26457a7-9fe6-4253-8ed7-eb1adeb3e205">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5cd55126-1df9-44b0-99d7-894a95f42805" testId="c12c2782-fd33-198b-cb9e-8e3540bfe875" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3445197-04:00" endTime="2024-04-30T15:10:41.3445197-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cd55126-1df9-44b0-99d7-894a95f42805">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="48b496b3-37cd-4a8b-9179-b6d7afec7cc7" testId="e8f4a621-1f8a-a05b-bb03-1010c4114673" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3270763-04:00" endTime="2024-04-30T15:10:41.3270763-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48b496b3-37cd-4a8b-9179-b6d7afec7cc7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f2d1d71-cf69-486f-8800-4d71026ad6c3" testId="ca121c4d-bde8-1c87-8163-9d61a33d29fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3307859-04:00" endTime="2024-04-30T15:10:41.3307859-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f2d1d71-cf69-486f-8800-4d71026ad6c3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6560ac9-4000-436b-8da2-8362edc83a53" testId="8f113ced-fbc9-ab46-7749-a167fed2ab42" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3114498-04:00" endTime="2024-04-30T15:10:41.3114498-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6560ac9-4000-436b-8da2-8362edc83a53">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0fb34a67-8ebc-48ea-899a-1ff16a22cc74" testId="28828dbc-e777-b02c-1ce4-a1c03ee84582" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000201" startTime="2024-04-30T15:10:41.2684351-04:00" endTime="2024-04-30T15:10:41.2684352-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fb34a67-8ebc-48ea-899a-1ff16a22cc74">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78e82ad0-f4ba-4963-935d-0eb6890cb93f" testId="fe74ba3e-2f13-a24c-70b5-eb31994ff7bf" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: MinusToken)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2716089-04:00" endTime="2024-04-30T15:10:41.2716089-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78e82ad0-f4ba-4963-935d-0eb6890cb93f" />
    <UnitTestResult executionId="07fd7942-c621-4ea6-a69e-789486b92667" testId="bbeea391-3856-1f31-5580-3b5d5086be60" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000133" startTime="2024-04-30T15:10:41.3796199-04:00" endTime="2024-04-30T15:10:41.3796199-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07fd7942-c621-4ea6-a69e-789486b92667">
      <Output>
        <StdOut>Testing pair: '++'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f17f187-313c-4b83-b47a-bca7bae9c6de" testId="aeadc46d-47ff-644c-8d18-c48a5e8b6ea0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3654807-04:00" endTime="2024-04-30T15:10:41.3654807-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f17f187-313c-4b83-b47a-bca7bae9c6de">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74aa51e1-1cab-460b-b215-7cdc1c8f36e2" testId="a7e34338-1f42-723e-c674-8be1d5b5abd3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2826720-04:00" endTime="2024-04-30T15:10:41.2826720-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74aa51e1-1cab-460b-b215-7cdc1c8f36e2">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8770c09-0cc0-4a3b-8e27-4053f7705f46" testId="3e12d030-3412-21b4-ded9-c23c1e95e016" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2808497-04:00" endTime="2024-04-30T15:10:41.2808498-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8770c09-0cc0-4a3b-8e27-4053f7705f46">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45ea5575-7825-4d79-b41f-54497d9eee61" testId="e88e2b48-cf17-7f2b-796d-fc356ce0df9f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3600455-04:00" endTime="2024-04-30T15:10:41.3600456-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45ea5575-7825-4d79-b41f-54497d9eee61">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8655585-5f8f-44db-8a70-e15ea0ba0ae4" testId="01d1f829-c199-bb4b-f31a-178340baf2a9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3337429-04:00" endTime="2024-04-30T15:10:41.3337430-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8655585-5f8f-44db-8a70-e15ea0ba0ae4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8498c760-d7f0-4686-9935-ea70f4dfe705" testId="e97be489-2496-70b3-daaa-4e7e68a9bdc3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3575127-04:00" endTime="2024-04-30T15:10:41.3575127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8498c760-d7f0-4686-9935-ea70f4dfe705">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e549a306-f004-41c3-9ca8-2edc1f5c314f" testId="3a28ed6a-e888-34a4-4646-83721ab8aa3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.3781674-04:00" endTime="2024-04-30T15:10:41.3781674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e549a306-f004-41c3-9ca8-2edc1f5c314f">
      <Output>
        <StdOut>Testing pair: '123='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c318b4a-3ad3-479b-bbc3-232bc91b5682" testId="cf9d4b4d-2497-fad4-d5a3-5862e6e5392c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3738450-04:00" endTime="2024-04-30T15:10:41.3738451-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c318b4a-3ad3-479b-bbc3-232bc91b5682">
      <Output>
        <StdOut>Testing pair: '123not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fdc76cba-b391-4e16-91ae-4f7e667d2fa0" testId="898a8d52-7827-606c-bd04-304b333c6834" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2811048-04:00" endTime="2024-04-30T15:10:41.2811048-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdc76cba-b391-4e16-91ae-4f7e667d2fa0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4af94246-87c7-4cf5-b3f2-6a01ab4cb379" testId="c1d9f8e9-41ed-543f-9740-495641f3531d" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2561967-04:00" endTime="2024-04-30T15:10:41.2561968-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4af94246-87c7-4cf5-b3f2-6a01ab4cb379" />
    <UnitTestResult executionId="9d4d84cc-49da-41a5-b0b2-1b1b52cac0c8" testId="ae4512e0-2d4e-6f21-4b8b-631a1dcad613" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000101" startTime="2024-04-30T15:10:41.2829697-04:00" endTime="2024-04-30T15:10:41.2829697-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d4d84cc-49da-41a5-b0b2-1b1b52cac0c8">
      <Output>
        <StdOut>Testing pair with explicit separator: '123 ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9b22b50-c3d9-4966-b365-07ac72d1df52" testId="a75f0aff-a91d-e29c-20b9-e290c9b91a31" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.2743697-04:00" endTime="2024-04-30T15:10:41.2743698-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9b22b50-c3d9-4966-b365-07ac72d1df52" />
    <UnitTestResult executionId="70e4cc7b-2cbe-4216-a74d-0c0d788d5cac" testId="3ecf0277-7de8-07d0-a6e3-d25e0f81ac18" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000238" startTime="2024-04-30T15:10:41.2709043-04:00" endTime="2024-04-30T15:10:41.2709043-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70e4cc7b-2cbe-4216-a74d-0c0d788d5cac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="afb22c35-1b99-4ac6-b838-d94bf2ed2953" testId="9768cb00-f905-4f60-2811-3eca5adb0327" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3418089-04:00" endTime="2024-04-30T15:10:41.3418090-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="afb22c35-1b99-4ac6-b838-d94bf2ed2953">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dca7cb0e-e6cc-4bcf-b205-ff66e8e984b9" testId="8727ed87-1c84-93ff-cdf1-6c012d3ba718" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: BinaryExpression)" computerName="BRUNO" duration="00:00:00.0000017" startTime="2024-04-30T15:10:41.2532189-04:00" endTime="2024-04-30T15:10:41.2532189-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dca7cb0e-e6cc-4bcf-b205-ff66e8e984b9" />
    <UnitTestResult executionId="276c67e1-87c0-45a4-b2be-739f37ceb7e9" testId="6cc3a911-96e9-3990-fbd2-58931e2ca5f7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000130" startTime="2024-04-30T15:10:41.3753239-04:00" endTime="2024-04-30T15:10:41.3753239-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="276c67e1-87c0-45a4-b2be-739f37ceb7e9">
      <Output>
        <StdOut>Testing pair: '/not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d11f5a87-b701-4d1f-918d-e704315ece50" testId="cb074d40-8b56-c027-b574-e1aa5a040151" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3064639-04:00" endTime="2024-04-30T15:10:41.3064639-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d11f5a87-b701-4d1f-918d-e704315ece50">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="345cb50e-316c-4cf0-a4a8-cec026b1b5b4" testId="785be0f1-1806-adee-5dde-a294563b559c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3583522-04:00" endTime="2024-04-30T15:10:41.3583522-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="345cb50e-316c-4cf0-a4a8-cec026b1b5b4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2b9be3aa-068d-4fd3-8609-ca896f15a8e3" testId="9395a4fb-3993-cf09-aabf-5d94a84836d3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3189813-04:00" endTime="2024-04-30T15:10:41.3189813-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b9be3aa-068d-4fd3-8609-ca896f15a8e3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3519281-bec4-43c8-b1c9-5ad126ad5dfd" testId="353a45bc-71e1-2e10-9592-3078160abed1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3363547-04:00" endTime="2024-04-30T15:10:41.3363548-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3519281-bec4-43c8-b1c9-5ad126ad5dfd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1122f295-3886-47bf-94d5-b6f328dc1248" testId="7a0ab956-59b2-4afb-69dd-e64ce5c4a2a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000136" startTime="2024-04-30T15:10:41.3802478-04:00" endTime="2024-04-30T15:10:41.3802478-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1122f295-3886-47bf-94d5-b6f328dc1248">
      <Output>
        <StdOut>Testing pair: '+('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c036c55-8ac8-4bf1-b626-852d83d7739d" testId="7ac4b2dc-1929-c368-4227-4cb7f68560a1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3655892-04:00" endTime="2024-04-30T15:10:41.3655893-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c036c55-8ac8-4bf1-b626-852d83d7739d">
      <Output>
        <StdOut>Testing pair with explicit separator: '== =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1654eca9-38bc-44e4-9f05-18d7baaba264" testId="2d631666-ee6d-bd43-fa1c-1c42d9569e68" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2841088-04:00" endTime="2024-04-30T15:10:41.2841088-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1654eca9-38bc-44e4-9f05-18d7baaba264">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5565b0f5-21bd-4f3a-96a4-12b0da504bf7" testId="cfe36250-fc5b-e0bb-2e30-635019cb1bff" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.3013507-04:00" endTime="2024-04-30T15:10:41.3013507-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5565b0f5-21bd-4f3a-96a4-12b0da504bf7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4d703e60-013e-4d02-873b-e67857be08f5" testId="c439a8da-2dc1-d5bf-7698-eadfb0749901" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3752028-04:00" endTime="2024-04-30T15:10:41.3752029-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d703e60-013e-4d02-873b-e67857be08f5">
      <Output>
        <StdOut>Testing pair: '==+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f01c3f7-f96a-4aa9-ac0d-b4cc86cb6f63" testId="76b63ea7-27c2-73b5-ab88-95b912450203" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: ParenthesizedExpression)" computerName="BRUNO" duration="00:00:00.0000019" startTime="2024-04-30T15:10:41.2510384-04:00" endTime="2024-04-30T15:10:41.2510385-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f01c3f7-f96a-4aa9-ac0d-b4cc86cb6f63" />
    <UnitTestResult executionId="20b2de04-946e-424c-98c5-bcfc05678dd2" testId="3477a61d-b717-dd5a-29dd-176556faac72" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.3362997-04:00" endTime="2024-04-30T15:10:41.3362998-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20b2de04-946e-424c-98c5-bcfc05678dd2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="69d79382-c774-4196-b7c3-ee0c711a91a6" testId="8f9ac562-96f2-b208-2d9b-1fd59e3943e4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3729720-04:00" endTime="2024-04-30T15:10:41.3729720-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69d79382-c774-4196-b7c3-ee0c711a91a6">
      <Output>
        <StdOut>Testing pair: '(+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3644bf25-34a7-4316-91ea-e5d4140122d2" testId="f5a8a390-a377-d9c2-20f7-7892861923e3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3753779-04:00" endTime="2024-04-30T15:10:41.3753779-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3644bf25-34a7-4316-91ea-e5d4140122d2">
      <Output>
        <StdOut>Testing pair: '+123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6507f7c9-4f92-46d1-ae30-0b94a8261193" testId="8b2ac5e1-d300-8bbf-fa90-4a0b691938fa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2849630-04:00" endTime="2024-04-30T15:10:41.2849630-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6507f7c9-4f92-46d1-ae30-0b94a8261193">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="021f4a0d-8cb9-438c-be7b-f1ef203c189d" testId="eff25ff0-56fc-4ee1-87f1-135137e8adb2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3574555-04:00" endTime="2024-04-30T15:10:41.3574556-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="021f4a0d-8cb9-438c-be7b-f1ef203c189d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c4e0434-e64b-48f4-bee2-44a537ce25b3" testId="fdd9df8a-6510-a8d3-0240-a42d6bc9c595" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000130" startTime="2024-04-30T15:10:41.2814232-04:00" endTime="2024-04-30T15:10:41.2814232-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c4e0434-e64b-48f4-bee2-44a537ce25b3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f007f727-4549-4822-9fd0-a6c46f6bfe14" testId="f334652f-6872-d535-5d8e-973f68dc84b5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3637307-04:00" endTime="2024-04-30T15:10:41.3637308-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f007f727-4549-4822-9fd0-a6c46f6bfe14">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adefebcc-e4dd-44b8-be8d-717439a506e6" testId="cbc91c25-bd4a-a5ef-92b3-d49611d21938" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3376533-04:00" endTime="2024-04-30T15:10:41.3376534-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adefebcc-e4dd-44b8-be8d-717439a506e6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91d8245f-06b8-42d2-8290-586fd5cb4979" testId="f87397af-4c7b-a3ad-67fb-5dab9a5624aa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.3672306-04:00" endTime="2024-04-30T15:10:41.3672307-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91d8245f-06b8-42d2-8290-586fd5cb4979">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a1ecfdfb-c7a7-4cad-94e1-21dbd3872fac" testId="2e8aaf6a-6702-b466-7926-345741e5078e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.3018503-04:00" endTime="2024-04-30T15:10:41.3018504-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1ecfdfb-c7a7-4cad-94e1-21dbd3872fac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b5a19e7-044d-4fe0-9aef-4a55678bdbc8" testId="04a0b750-5fd0-655d-24e3-ceaf8247fed0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2743545-04:00" endTime="2024-04-30T15:10:41.2743545-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b5a19e7-044d-4fe0-9aef-4a55678bdbc8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ae2d847-8831-4d15-8da5-aa0f45056e3b" testId="ca44d52f-b56b-5705-6bd4-5df3f329866c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3539450-04:00" endTime="2024-04-30T15:10:41.3539450-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ae2d847-8831-4d15-8da5-aa0f45056e3b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be97237a-099c-43cb-8d94-a94aaf6784c9" testId="4d1888d5-1d67-7dd4-fb50-eaa4f0b471bf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3744597-04:00" endTime="2024-04-30T15:10:41.3744597-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be97237a-099c-43cb-8d94-a94aaf6784c9">
      <Output>
        <StdOut>Testing pair: '-False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68209ed5-12d7-4e72-aa31-9a69791a427e" testId="4e8095da-774e-f38c-8f51-11ac5c142268" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3250991-04:00" endTime="2024-04-30T15:10:41.3250991-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68209ed5-12d7-4e72-aa31-9a69791a427e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66a8b769-39b3-4a3d-941d-19724a0cc914" testId="2d8670dc-23be-1d52-84ac-70b24c4a5473" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000126" startTime="2024-04-30T15:10:41.3150491-04:00" endTime="2024-04-30T15:10:41.3150491-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66a8b769-39b3-4a3d-941d-19724a0cc914">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25aeb6d1-7794-47a6-8f18-7af49d87e92a" testId="2fcad8c7-b322-4b80-08bb-3b73b5aba7ae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3074623-04:00" endTime="2024-04-30T15:10:41.3074623-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25aeb6d1-7794-47a6-8f18-7af49d87e92a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31406b97-3109-4b62-9f2d-2d0e8d042947" testId="58c0c3a4-100f-9be0-cbe6-ac05579be817" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3591364-04:00" endTime="2024-04-30T15:10:41.3591365-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31406b97-3109-4b62-9f2d-2d0e8d042947">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="912b5c90-e6f2-4733-a026-f14e3fe51cae" testId="ed89ba17-bb8b-bff2-9e02-842d4519bcad" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2832052-04:00" endTime="2024-04-30T15:10:41.2832052-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="912b5c90-e6f2-4733-a026-f14e3fe51cae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="98e02658-c2d2-4824-8140-79ea2d44788a" testId="bee071d7-7fe8-f1e5-2324-362f0cd9dabe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2953156-04:00" endTime="2024-04-30T15:10:41.2953156-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98e02658-c2d2-4824-8140-79ea2d44788a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cec4e6c6-3fa0-47ef-b74b-4f20473671d3" testId="722b8766-7286-b23a-ec20-4ddbb66355ef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3610611-04:00" endTime="2024-04-30T15:10:41.3610611-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cec4e6c6-3fa0-47ef-b74b-4f20473671d3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ecbb1e86-3c37-40d2-b918-78e30f5ff176" testId="d2b5c28e-4b0f-eeab-0936-1bc69d41f584" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3625345-04:00" endTime="2024-04-30T15:10:41.3625346-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ecbb1e86-3c37-40d2-b918-78e30f5ff176">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="98341b43-ec98-4134-ad28-a7798cd44fe5" testId="ae780021-7678-b319-14f0-acb88805a459" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2987827-04:00" endTime="2024-04-30T15:10:41.2987827-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98341b43-ec98-4134-ad28-a7798cd44fe5">
      <Output>
        <StdOut>Testing pair with explicit separator: '123
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35d8f910-c662-4c68-a16e-fba7f8aa1037" testId="bddc6ea0-a097-4e85-b5c2-7380547046be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3094323-04:00" endTime="2024-04-30T15:10:41.3094323-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35d8f910-c662-4c68-a16e-fba7f8aa1037">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd463d34-669a-4bea-a303-e56b90156429" testId="cb218683-84fa-84f8-36c5-b189f9b8cd96" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.2637881-04:00" endTime="2024-04-30T15:10:41.2637881-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd463d34-669a-4bea-a303-e56b90156429" />
    <UnitTestResult executionId="bd9e422e-a1ad-4447-9b16-750fb0de9984" testId="0731f931-8ad7-373e-5bdf-742442555b3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2977936-04:00" endTime="2024-04-30T15:10:41.2977937-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd9e422e-a1ad-4447-9b16-750fb0de9984">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aae35cfc-4e8f-4f8f-89bb-45b1a8ff7582" testId="dd0950fa-4ab7-98d0-c249-b6cb8c0b8517" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2638523-04:00" endTime="2024-04-30T15:10:41.2638523-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aae35cfc-4e8f-4f8f-89bb-45b1a8ff7582" />
    <UnitTestResult executionId="9d7f1b63-36a3-49b1-a9a3-e1a556cc0cdf" testId="67c7784d-5169-644d-8592-d1f2dd2cee63" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: LiteralExpression)" computerName="BRUNO" duration="00:00:00.0001121" startTime="2024-04-30T15:10:41.2188257-04:00" endTime="2024-04-30T15:10:41.2188258-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d7f1b63-36a3-49b1-a9a3-e1a556cc0cdf" />
    <UnitTestResult executionId="d679c570-d72b-4d0b-9e78-acd0ed5b6c3e" testId="3239baa6-e267-dbe2-0c1f-cf40886141e5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.3318053-04:00" endTime="2024-04-30T15:10:41.3318053-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d679c570-d72b-4d0b-9e78-acd0ed5b6c3e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0baf9514-295b-41ae-bc8c-2fdee12c104c" testId="50ddcb2f-913a-d660-942e-a66dd9e79dc8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3302569-04:00" endTime="2024-04-30T15:10:41.3302569-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0baf9514-295b-41ae-bc8c-2fdee12c104c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ec929ba-8f63-4254-8a79-e97aec7b663c" testId="b7873f42-93b9-3e2c-3380-efc4bf3f8250" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3203333-04:00" endTime="2024-04-30T15:10:41.3203334-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ec929ba-8f63-4254-8a79-e97aec7b663c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f863e82f-d521-4d9b-a8b0-386875a23976" testId="e7a0c95b-54bf-d542-28e0-dfc7363ae16d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.2998085-04:00" endTime="2024-04-30T15:10:41.2998086-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f863e82f-d521-4d9b-a8b0-386875a23976">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="938de7f1-1315-48fa-863c-e177c8d30236" testId="9b5bbc78-c55e-abcd-76c4-de671ffb596a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3110674-04:00" endTime="2024-04-30T15:10:41.3110674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="938de7f1-1315-48fa-863c-e177c8d30236">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66d402d3-6a4c-4664-aa29-5d3a811a6adb" testId="87bbc937-ec1d-6f92-9f66-de5f666eadb5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3302289-04:00" endTime="2024-04-30T15:10:41.3302289-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66d402d3-6a4c-4664-aa29-5d3a811a6adb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9959a76c-dbc2-400c-a6d2-3f76638f973a" testId="e446c4c6-a872-1b19-3a95-a77520104b91" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3409085-04:00" endTime="2024-04-30T15:10:41.3409085-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9959a76c-dbc2-400c-a6d2-3f76638f973a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee10b6e1-b6fe-4a9d-aa91-884dceb91112" testId="12da865b-7ff7-e1b4-5ace-3bf0d494e7ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.3014126-04:00" endTime="2024-04-30T15:10:41.3014126-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee10b6e1-b6fe-4a9d-aa91-884dceb91112">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c2b9d6e-d14e-44a0-b5b5-dfaebb332e46" testId="d374f746-3f17-ee0d-7224-30b5c7012ea5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3677689-04:00" endTime="2024-04-30T15:10:41.3677689-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c2b9d6e-d14e-44a0-b5b5-dfaebb332e46">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="71cfd5fd-a743-427b-9bf6-180982ff4b19" testId="385f39cf-6b75-5eb5-ccee-2b5104df2a07" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3185163-04:00" endTime="2024-04-30T15:10:41.3185163-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71cfd5fd-a743-427b-9bf6-180982ff4b19">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4d740c28-9b7e-4127-a2ee-8cb9615ad1cc" testId="9b8eef15-b53f-3a32-b6b0-2ab15c6af564" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000110" startTime="2024-04-30T15:10:41.3724777-04:00" endTime="2024-04-30T15:10:41.3724777-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d740c28-9b7e-4127-a2ee-8cb9615ad1cc">
      <Output>
        <StdOut>Testing pair: '!=-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="240243d0-facc-4cae-8025-c482ccfa8ec4" testId="95eaec89-c84d-a811-39af-b3e0502c4c79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.3012686-04:00" endTime="2024-04-30T15:10:41.3012687-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="240243d0-facc-4cae-8025-c482ccfa8ec4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31f35473-ce57-4cf9-b4e8-ada9d2c82707" testId="492ab3e7-a934-32e3-c9e8-215d9345387f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2558938-04:00" endTime="2024-04-30T15:10:41.2558939-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31f35473-ce57-4cf9-b4e8-ada9d2c82707">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7194d54f-c42f-4827-a973-ee915e47c65b" testId="b25a9a3b-513b-733e-d129-c498ec726eb5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000073" startTime="2024-04-30T15:10:41.3768018-04:00" endTime="2024-04-30T15:10:41.3768018-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7194d54f-c42f-4827-a973-ee915e47c65b">
      <Output>
        <StdOut>Testing pair: '=)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e35b6b9-4ce7-4cb0-aa0e-e08f7d7e7c2a" testId="8e8c9731-737a-e237-dfe5-8e05e515fb0d" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NameExpression)" computerName="BRUNO" duration="00:00:00.0000016" startTime="2024-04-30T15:10:41.2538753-04:00" endTime="2024-04-30T15:10:41.2538753-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e35b6b9-4ce7-4cb0-aa0e-e08f7d7e7c2a" />
    <UnitTestResult executionId="96093f4b-e9bb-4b66-9754-6e1d4171641e" testId="144b311e-9fd4-86d9-8480-fe2713e17baa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3306364-04:00" endTime="2024-04-30T15:10:41.3306364-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96093f4b-e9bb-4b66-9754-6e1d4171641e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59337dea-d535-4935-8a4f-4b97e220fdfe" testId="5045f4d4-7073-9e6d-bc5e-26a9d527242a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3354039-04:00" endTime="2024-04-30T15:10:41.3354040-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59337dea-d535-4935-8a4f-4b97e220fdfe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f3fa754-1578-446b-8728-870104cc4749" testId="01c43de7-2ee6-3dfe-a4da-740c997ffb6e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3276348-04:00" endTime="2024-04-30T15:10:41.3276348-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f3fa754-1578-446b-8728-870104cc4749">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="00325ee9-0689-4219-b132-5d67e83a45fd" testId="3715b5d5-0839-4e57-9666-04e304517ed7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3291766-04:00" endTime="2024-04-30T15:10:41.3291766-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00325ee9-0689-4219-b132-5d67e83a45fd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7dc7138-534b-4126-8512-5400ec167b49" testId="5417918f-f136-1971-817d-b9a0ce01ca07" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3341935-04:00" endTime="2024-04-30T15:10:41.3341936-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7dc7138-534b-4126-8512-5400ec167b49">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f14efb4-2101-4830-be6a-4e60aa7380ed" testId="2225e452-b7e5-4c55-c00d-4b6a9043e20b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3641883-04:00" endTime="2024-04-30T15:10:41.3641884-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f14efb4-2101-4830-be6a-4e60aa7380ed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c7b4de3-d8f2-4b01-bc0e-967d2cce119d" testId="4c13b311-2f3e-ca8b-32fa-3915ed957ae4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.2886358-04:00" endTime="2024-04-30T15:10:41.2886358-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c7b4de3-d8f2-4b01-bc0e-967d2cce119d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a19b7806-e242-43b4-ac6c-726923a50648" testId="37cbb153-75d3-2605-5c75-cc9b39e7afba" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: MinusToken)" computerName="BRUNO" duration="00:00:00.0051049" startTime="2024-04-30T15:10:41.2164196-04:00" endTime="2024-04-30T15:10:41.2164198-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a19b7806-e242-43b4-ac6c-726923a50648" />
    <UnitTestResult executionId="ce5a0273-bb44-4518-a6a7-3f925ccdc631" testId="dd02a14c-ffbd-de4f-d618-0b7a01870273" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000102" startTime="2024-04-30T15:10:41.3291500-04:00" endTime="2024-04-30T15:10:41.3291501-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce5a0273-bb44-4518-a6a7-3f925ccdc631">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9ef8a30-dfbc-41c0-ac7a-8b9b7b738551" testId="f8fd5dfd-38e1-80a0-9c7e-8b93183aa940" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.3165450-04:00" endTime="2024-04-30T15:10:41.3165450-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9ef8a30-dfbc-41c0-ac7a-8b9b7b738551">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c5f07ab-3371-40ba-ac2a-f135b414af5c" testId="8a3ff86a-3739-1b12-beaf-ff4b1fc946f4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3662190-04:00" endTime="2024-04-30T15:10:41.3662190-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c5f07ab-3371-40ba-ac2a-f135b414af5c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2d88459-a46b-463d-8947-018488e1dd08" testId="0571478f-a537-74a2-bd2d-b7358040f25e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2841354-04:00" endTime="2024-04-30T15:10:41.2841354-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2d88459-a46b-463d-8947-018488e1dd08">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4510bdfd-75b7-4daf-9c53-df690ef4824f" testId="4ff99611-0353-5a01-8b98-38f88cbd50e3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3163257-04:00" endTime="2024-04-30T15:10:41.3163257-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4510bdfd-75b7-4daf-9c53-df690ef4824f">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8f8f5f2-0acf-41e0-af1f-846ab28dbc0c" testId="caacbb24-c998-5982-b46d-618556934016" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3352677-04:00" endTime="2024-04-30T15:10:41.3352677-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8f8f5f2-0acf-41e0-af1f-846ab28dbc0c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="94de627e-110d-4bf9-b9ea-d41ea26ca6f9" testId="d22c708b-3e50-d5af-f235-078e4b2b7a1b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2669202-04:00" endTime="2024-04-30T15:10:41.2669203-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94de627e-110d-4bf9-b9ea-d41ea26ca6f9" />
    <UnitTestResult executionId="455a4760-89cb-4ae6-98b2-60b32462d5ca" testId="1c078c04-55e4-a191-6aff-9b3e70c076e6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3747583-04:00" endTime="2024-04-30T15:10:41.3747584-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="455a4760-89cb-4ae6-98b2-60b32462d5ca">
      <Output>
        <StdOut>Testing pair: '-not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c427fb8f-f3c0-4f6e-bb21-2bfbc90d8876" testId="6916d7ec-6d38-30dd-6143-5bae873536d7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3519333-04:00" endTime="2024-04-30T15:10:41.3519334-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c427fb8f-f3c0-4f6e-bb21-2bfbc90d8876">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d39fa4f9-6d8a-42fc-b101-314eb530ce30" testId="5b9b361d-76e2-a372-51f9-8376bcb933f6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.2864724-04:00" endTime="2024-04-30T15:10:41.2864724-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d39fa4f9-6d8a-42fc-b101-314eb530ce30">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dcc910ff-1624-4b26-9f76-c37a530f3c6f" testId="8dea5209-632c-ac1b-2ef8-e02792992681" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000236" startTime="2024-04-30T15:10:41.3009640-04:00" endTime="2024-04-30T15:10:41.3009641-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dcc910ff-1624-4b26-9f76-c37a530f3c6f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="150ebbc9-e26b-4d21-83b4-aa4a805b0c22" testId="c211c607-5343-f2de-34f3-bbe67d91c19b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.3044399-04:00" endTime="2024-04-30T15:10:41.3044399-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="150ebbc9-e26b-4d21-83b4-aa4a805b0c22">
      <Output>
        <StdOut>Testing pair with explicit separator: '123 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c56da7cf-cd90-44c9-82f7-760a5e7dacdc" testId="ee15c058-888c-e704-0270-7a291244fdee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3682672-04:00" endTime="2024-04-30T15:10:41.3682672-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c56da7cf-cd90-44c9-82f7-760a5e7dacdc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7df88e48-2ed5-4090-963e-2403b41cb73b" testId="c96992e4-ca6c-115e-f054-0bd8e3255da1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3321354-04:00" endTime="2024-04-30T15:10:41.3321354-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7df88e48-2ed5-4090-963e-2403b41cb73b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="497b25bf-8ed0-4dee-8912-df7c98ca3710" testId="8688c188-61ce-2426-a2f9-1579fb2997bd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2755693-04:00" endTime="2024-04-30T15:10:41.2755693-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="497b25bf-8ed0-4dee-8912-df7c98ca3710">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7f87ab2-2f3c-41b6-955b-a43776132175" testId="217b8b61-8316-0232-a090-7e3b4bf18884" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3405879-04:00" endTime="2024-04-30T15:10:41.3405880-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7f87ab2-2f3c-41b6-955b-a43776132175">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="27edb798-683f-4164-872b-8fb671f6dd20" testId="03add391-fd70-d731-6b05-7eea271f1ff3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000223" startTime="2024-04-30T15:10:41.2927219-04:00" endTime="2024-04-30T15:10:41.2927219-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27edb798-683f-4164-872b-8fb671f6dd20">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c0477a4-1eb5-4fea-aca0-1951e4153308" testId="bf648ebf-2fa2-42af-4ae0-976a1c2e654f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3271048-04:00" endTime="2024-04-30T15:10:41.3271048-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c0477a4-1eb5-4fea-aca0-1951e4153308">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c335394-a50c-4422-8202-bfbf021a1785" testId="0c236f33-6233-832a-f108-d4e750bdad0d" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000155" startTime="2024-04-30T15:10:41.2626343-04:00" endTime="2024-04-30T15:10:41.2626343-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c335394-a50c-4422-8202-bfbf021a1785" />
    <UnitTestResult executionId="a1188f1c-db6e-45c9-aa35-1be5aa9c1fd4" testId="171f6e95-7ed9-0e3c-3d72-638ccd34b1a9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3537442-04:00" endTime="2024-04-30T15:10:41.3537442-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1188f1c-db6e-45c9-aa35-1be5aa9c1fd4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0415ceae-d159-4990-88e2-a4c39c99e55c" testId="d7677b83-db3b-e51d-0c20-a252267b6102" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3377160-04:00" endTime="2024-04-30T15:10:41.3377161-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0415ceae-d159-4990-88e2-a4c39c99e55c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a219256c-f189-47b4-ac6f-4e2fb7b0b98f" testId="f4144a4b-3866-4b81-64d2-857c6a9f450a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2778029-04:00" endTime="2024-04-30T15:10:41.2778029-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a219256c-f189-47b4-ac6f-4e2fb7b0b98f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f12dc81-bd7e-4ce5-aed6-30fb506e03ec" testId="08b1e2c9-887b-6fe8-d17a-d6c3be09e65e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IsKeyword, text: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.3852490-04:00" endTime="2024-04-30T15:10:41.3852490-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f12dc81-bd7e-4ce5-aed6-30fb506e03ec">
      <Output>
        <StdOut>Expected kind: IsKeyword, Actual kind: IsKeyword&#xD;
Expected text: 'is', Actual text: 'is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a01052c8-b9d6-46c6-ba51-3f8ee59f7860" testId="6cefad50-1051-db8f-b38a-cb9304e8df01" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000144" startTime="2024-04-30T15:10:41.3821794-04:00" endTime="2024-04-30T15:10:41.3821794-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a01052c8-b9d6-46c6-ba51-3f8ee59f7860">
      <Output>
        <StdOut>Testing pair: '=!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ac1447b-d3ce-4cc5-a01e-220dd08e346b" testId="809a06a8-67ad-14ed-a615-fabb2a11e91b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3424578-04:00" endTime="2024-04-30T15:10:41.3424579-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ac1447b-d3ce-4cc5-a01e-220dd08e346b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f75c382a-d7de-4dfb-9aa6-76750839fb86" testId="1ad04a27-a1af-5939-ec05-361baff5f24e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3654492-04:00" endTime="2024-04-30T15:10:41.3654493-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f75c382a-d7de-4dfb-9aa6-76750839fb86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97f4bc0e-8be7-429f-bc75-549c5afb2167" testId="53c43bc3-9298-d204-5229-257d6bc0798d" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000113" startTime="2024-04-30T15:10:41.2729462-04:00" endTime="2024-04-30T15:10:41.2729463-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97f4bc0e-8be7-429f-bc75-549c5afb2167" />
    <UnitTestResult executionId="e3496069-ddff-478d-9bdb-dc92b556ddd6" testId="fcc11dbf-c889-ddbe-0ce9-0be7e966b8b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3179552-04:00" endTime="2024-04-30T15:10:41.3179553-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3496069-ddff-478d-9bdb-dc92b556ddd6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d168a0a7-cec4-4ea3-86b3-c7fd8bbcffd3" testId="d0e5bed3-18e7-1d5a-0193-86f5497fc9e1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3158834-04:00" endTime="2024-04-30T15:10:41.3158834-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d168a0a7-cec4-4ea3-86b3-c7fd8bbcffd3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="839f856f-1ff9-4072-8207-20b308861b08" testId="7b0594d4-e75f-f801-a743-e2ef210a388e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3608883-04:00" endTime="2024-04-30T15:10:41.3608884-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="839f856f-1ff9-4072-8207-20b308861b08">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3535b197-53e0-44bb-9849-2ed94a32b812" testId="0fcba43d-6d85-f463-4e8a-dc2415cf9152" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000220" startTime="2024-04-30T15:10:41.2921960-04:00" endTime="2024-04-30T15:10:41.2921961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3535b197-53e0-44bb-9849-2ed94a32b812">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05a981ce-973a-4dc0-a80c-d938559d08a0" testId="34f40090-226b-f26e-9e08-927ff3a66910" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000186" startTime="2024-04-30T15:10:41.3028847-04:00" endTime="2024-04-30T15:10:41.3028847-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05a981ce-973a-4dc0-a80c-d938559d08a0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95def0bc-c819-47e2-8c14-f1caf4e6cd99" testId="2690ede7-8456-c0c1-0ba1-6c20f9b52895" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3128677-04:00" endTime="2024-04-30T15:10:41.3128677-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95def0bc-c819-47e2-8c14-f1caf4e6cd99">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e34b187e-9547-4a8f-b3e8-d1e99f7b7669" testId="12b40b79-c0f4-6f93-9fb1-20d5a6270ccf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000112" startTime="2024-04-30T15:10:41.3701419-04:00" endTime="2024-04-30T15:10:41.3701420-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e34b187e-9547-4a8f-b3e8-d1e99f7b7669">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="432001e5-d860-476a-89dc-07341d647cb7" testId="c6181595-2d9b-765e-f7ad-89a36e61082f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3694102-04:00" endTime="2024-04-30T15:10:41.3694102-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="432001e5-d860-476a-89dc-07341d647cb7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6071f668-1022-4f08-b077-e7e65cd3bcc9" testId="3dce1c93-0c0a-d2a7-3ab4-42548ebff9f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3120464-04:00" endTime="2024-04-30T15:10:41.3120464-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6071f668-1022-4f08-b077-e7e65cd3bcc9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e250ab3d-be0c-4059-aab1-daef2e03736b" testId="e1547bbf-91f5-b718-126d-80f7372a4867" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3348002-04:00" endTime="2024-04-30T15:10:41.3348002-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e250ab3d-be0c-4059-aab1-daef2e03736b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b35a1799-90e3-4dde-944e-8e48ceed1af8" testId="27179903-07e7-a781-c7bf-fe297d4436cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.3744078-04:00" endTime="2024-04-30T15:10:41.3744079-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b35a1799-90e3-4dde-944e-8e48ceed1af8">
      <Output>
        <StdOut>Testing pair: '+/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18095597-3a64-43ad-a1a1-10beef23c2e3" testId="aaf14c98-61c7-8de7-3073-d58602844ece" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2633498-04:00" endTime="2024-04-30T15:10:41.2633498-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18095597-3a64-43ad-a1a1-10beef23c2e3" />
    <UnitTestResult executionId="77e38ef7-268d-47f3-a4b4-2b4e01eb3585" testId="ef901d08-6a2c-0aa7-d1b8-e0ee187f63c3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0042295" startTime="2024-04-30T15:10:41.3461971-04:00" endTime="2024-04-30T15:10:41.3461972-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77e38ef7-268d-47f3-a4b4-2b4e01eb3585">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce834752-2d58-4ab7-96ab-04fa97864486" testId="2857f229-a141-eadf-e4db-b95cd4eb5d04" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000192" startTime="2024-04-30T15:10:41.2978210-04:00" endTime="2024-04-30T15:10:41.2978210-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce834752-2d58-4ab7-96ab-04fa97864486">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f09500c6-241e-4d9c-8b59-33165e9e5b23" testId="0cce541d-e87c-72d2-a6ac-27960277941c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3685911-04:00" endTime="2024-04-30T15:10:41.3685912-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f09500c6-241e-4d9c-8b59-33165e9e5b23">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44518620-dcc2-4f59-8d88-c3a7cd268b07" testId="f9d463f6-07ff-cd6b-63ed-eb96a2221272" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2967215-04:00" endTime="2024-04-30T15:10:41.2967216-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44518620-dcc2-4f59-8d88-c3a7cd268b07">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="98a95a6a-5bcf-4df2-bb0d-99ead4d47d78" testId="073babc4-9763-cc0c-7466-a5710e36d6db" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3255956-04:00" endTime="2024-04-30T15:10:41.3255957-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98a95a6a-5bcf-4df2-bb0d-99ead4d47d78">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8208770-3027-42a4-bdd5-a16e413ceefc" testId="5a838e27-d7d9-e803-67c6-adf4d20225b8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000194" startTime="2024-04-30T15:10:41.2727920-04:00" endTime="2024-04-30T15:10:41.2727921-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8208770-3027-42a4-bdd5-a16e413ceefc">
      <Output>
        <StdOut>Testing pair with explicit separator: '=   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="854a92fe-d681-4458-ad87-3d69360595fc" testId="5514a06f-242e-0af8-9dad-b95bba7e5d0a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3291234-04:00" endTime="2024-04-30T15:10:41.3291234-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="854a92fe-d681-4458-ad87-3d69360595fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b09facb-0a77-40fe-b734-70e810598b35" testId="9f1c12d9-7a29-d288-fd0c-6e3d3a3fa700" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3307310-04:00" endTime="2024-04-30T15:10:41.3307310-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b09facb-0a77-40fe-b734-70e810598b35">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73e93b61-d5eb-4db9-8243-4ad43bf7979a" testId="b7c31353-afd1-ec7b-cced-9abc15a585db" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3349079-04:00" endTime="2024-04-30T15:10:41.3349080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73e93b61-d5eb-4db9-8243-4ad43bf7979a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c271608-f919-4ab1-a58f-fc16b3ba4fc7" testId="e1caaeaf-2b43-9364-f1b5-b5f3f75d7919" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3565072-04:00" endTime="2024-04-30T15:10:41.3565073-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c271608-f919-4ab1-a58f-fc16b3ba4fc7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09c5b42b-05a4-4660-b128-809e6c10d4d4" testId="cd2abbba-32f9-ce04-569e-7a401e651b01" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3681259-04:00" endTime="2024-04-30T15:10:41.3681259-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09c5b42b-05a4-4660-b128-809e6c10d4d4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84eedc4e-6bf2-4c22-95ec-125022a50b4d" testId="e3851a04-87fb-3c75-a227-b90a1bfccd0a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2948842-04:00" endTime="2024-04-30T15:10:41.2948842-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84eedc4e-6bf2-4c22-95ec-125022a50b4d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55cbd604-6763-4075-adf1-671c14bc845a" testId="164dd723-c912-08ca-effb-aa29b50daef1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000268" startTime="2024-04-30T15:10:41.2629126-04:00" endTime="2024-04-30T15:10:41.2629127-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55cbd604-6763-4075-adf1-671c14bc845a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2192f864-2f0e-4a8a-b11a-a66734412831" testId="09961795-4559-55ab-8bd2-54abbba399ac" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3743542-04:00" endTime="2024-04-30T15:10:41.3743543-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2192f864-2f0e-4a8a-b11a-a66734412831">
      <Output>
        <StdOut>Testing pair: '+reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c81c224-0a17-4cd3-b736-c7ee6fed2191" testId="1c350888-adb4-3dfd-ba53-9499785a8519" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2854984-04:00" endTime="2024-04-30T15:10:41.2854985-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c81c224-0a17-4cd3-b736-c7ee6fed2191">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1361f52a-f762-4957-99a8-8b1ba4638d79" testId="1f939fc3-323b-d2f1-acf8-d232bd60dbf2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3676039-04:00" endTime="2024-04-30T15:10:41.3676040-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1361f52a-f762-4957-99a8-8b1ba4638d79">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d937b4a8-8ebc-4a37-be41-fd064bbaf08d" testId="b8416299-d53c-c8e9-3380-58cc469d9afe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000145" startTime="2024-04-30T15:10:41.3749183-04:00" endTime="2024-04-30T15:10:41.3749184-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d937b4a8-8ebc-4a37-be41-fd064bbaf08d">
      <Output>
        <StdOut>Testing pair: '(-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92c77724-525e-4a07-a506-12de9c7b6463" testId="b3e95e52-ba53-f5d4-58d2-b501b761f33b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3203013-04:00" endTime="2024-04-30T15:10:41.3203013-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92c77724-525e-4a07-a506-12de9c7b6463">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4600f69-22ae-4b78-b891-d0fc95352258" testId="be4d338d-16b2-a32d-798a-61452725088b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2693491-04:00" endTime="2024-04-30T15:10:41.2693491-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4600f69-22ae-4b78-b891-d0fc95352258" />
    <UnitTestResult executionId="55db7ab8-f322-4bf7-bd72-897abc608957" testId="bbe735d6-fcbd-d59a-5d62-49868141a1d0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3418619-04:00" endTime="2024-04-30T15:10:41.3418620-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55db7ab8-f322-4bf7-bd72-897abc608957">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75832943-79ad-4a79-a4af-388a2bb95b30" testId="80335936-ceb3-2cff-faba-1752411fe5a2" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000138" startTime="2024-04-30T15:10:41.2669590-04:00" endTime="2024-04-30T15:10:41.2669591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75832943-79ad-4a79-a4af-388a2bb95b30" />
    <UnitTestResult executionId="fdf09551-5b47-42ce-9b5a-19c69c7143f1" testId="15318aa0-67bb-bf62-c310-87f87cfb0039" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3627439-04:00" endTime="2024-04-30T15:10:41.3627439-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdf09551-5b47-42ce-9b5a-19c69c7143f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7079635-92e7-4270-9752-5ad3c2db1da5" testId="970cd828-1d55-7f07-5605-8f46841926a2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3240268-04:00" endTime="2024-04-30T15:10:41.3240269-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7079635-92e7-4270-9752-5ad3c2db1da5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54f2e45f-0964-44ac-8075-e924e6ba1618" testId="d597a756-60a2-2066-3c2c-55715d9f6e44" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000196" startTime="2024-04-30T15:10:41.2984373-04:00" endTime="2024-04-30T15:10:41.2984373-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54f2e45f-0964-44ac-8075-e924e6ba1618">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2740ebbd-0e4a-422e-9611-c83666cbbe29" testId="0a81c69e-727a-72eb-53bb-371d696f4fa9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2625685-04:00" endTime="2024-04-30T15:10:41.2625685-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2740ebbd-0e4a-422e-9611-c83666cbbe29">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86b31119-5859-447e-bc4f-35f4d99aab5c" testId="392728e8-5bbd-416b-cdd0-2a5ebec0dde6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3179234-04:00" endTime="2024-04-30T15:10:41.3179234-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86b31119-5859-447e-bc4f-35f4d99aab5c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06fbd80e-903d-4efc-a1f9-3f744fba0c12" testId="2f49b75c-26bd-4d6e-c6b9-73b9b81f5b60" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3363269-04:00" endTime="2024-04-30T15:10:41.3363270-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06fbd80e-903d-4efc-a1f9-3f744fba0c12">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17b1248a-2fa1-41f5-a968-8b7cd937e511" testId="d7dfe2ed-298b-e1f7-baae-883c747b7b4f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2742025-04:00" endTime="2024-04-30T15:10:41.2742026-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17b1248a-2fa1-41f5-a968-8b7cd937e511">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9033cfd-393f-4742-960a-addb1bf117d4" testId="02c42386-c9df-7fd0-92e9-b023eae4023f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3437031-04:00" endTime="2024-04-30T15:10:41.3437032-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9033cfd-393f-4742-960a-addb1bf117d4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50c83b99-f836-406d-a74d-5c0e225c8b50" testId="b30aa6af-5d68-1a89-e989-d5e616935c91" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3245867-04:00" endTime="2024-04-30T15:10:41.3245867-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50c83b99-f836-406d-a74d-5c0e225c8b50">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4484acfd-1927-4a4c-8a7c-3881eb76e0b2" testId="2e4ceef4-90d4-d9be-16a7-1baf4fa8f7dd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3573458-04:00" endTime="2024-04-30T15:10:41.3573458-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4484acfd-1927-4a4c-8a7c-3881eb76e0b2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b37e5ff-20d2-4b71-91fd-062068399b7e" testId="6f9a5faf-ab02-437b-94a6-b768d359327f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.2954049-04:00" endTime="2024-04-30T15:10:41.2954049-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b37e5ff-20d2-4b71-91fd-062068399b7e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d961d08e-df8b-4e6c-9eaf-ce505ad3f9cb" testId="7285e30b-512c-3fb1-13f0-26b4b100e1bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2949106-04:00" endTime="2024-04-30T15:10:41.2949106-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d961d08e-df8b-4e6c-9eaf-ce505ad3f9cb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa6758fe-1889-4865-9a47-eeb61d247f38" testId="053cfb21-cca1-ac05-d4fb-4e5435332792" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.2936769-04:00" endTime="2024-04-30T15:10:41.2936770-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa6758fe-1889-4865-9a47-eeb61d247f38">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb8e9015-fe65-4429-ab17-50591d3fe3f1" testId="7d413269-e355-eb50-397b-daa79985694b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3119674-04:00" endTime="2024-04-30T15:10:41.3119674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb8e9015-fe65-4429-ab17-50591d3fe3f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66b31adf-0d92-451e-97fa-0a81e33d8685" testId="28d367e1-973f-baa7-5e17-faef9167b176" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.2562519-04:00" endTime="2024-04-30T15:10:41.2562520-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66b31adf-0d92-451e-97fa-0a81e33d8685" />
    <UnitTestResult executionId="6571e822-8445-4729-af17-ab87fa606bb0" testId="e21b315a-b699-650d-1b81-722cee4b0d7c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.3148727-04:00" endTime="2024-04-30T15:10:41.3148727-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6571e822-8445-4729-af17-ab87fa606bb0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb90c987-543d-48cf-8fde-134e27901ca6" testId="0327bd49-4410-a9f2-6e19-ddfa3b7779c4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3738987-04:00" endTime="2024-04-30T15:10:41.3738987-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb90c987-543d-48cf-8fde-134e27901ca6">
      <Output>
        <StdOut>Testing pair: ')('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d1cf0c2-7715-4fc9-ab8f-eba6c0ad8bb9" testId="fbca1f90-d3ec-7e81-b220-5d992083df67" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3686467-04:00" endTime="2024-04-30T15:10:41.3686467-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d1cf0c2-7715-4fc9-ab8f-eba6c0ad8bb9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c34da40-bd28-41c0-b750-55ecb76cd507" testId="07fdeb2a-f512-5f85-7505-901c93821cbf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000236" startTime="2024-04-30T15:10:41.2651000-04:00" endTime="2024-04-30T15:10:41.2651000-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c34da40-bd28-41c0-b750-55ecb76cd507">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df891e0d-aa73-4547-bfcb-04d255bb4710" testId="a2c5e1dc-a090-8f95-0a7a-60758f8296b5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3814156-04:00" endTime="2024-04-30T15:10:41.3814156-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df891e0d-aa73-4547-bfcb-04d255bb4710">
      <Output>
        <StdOut>Testing pair: ')not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8ab4d42-95fd-444c-b044-c5ca1188e02e" testId="754fbe09-094d-38d9-5abf-92e2d7a8c418" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2820011-04:00" endTime="2024-04-30T15:10:41.2820011-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8ab4d42-95fd-444c-b044-c5ca1188e02e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="15d93bab-1521-4992-ba44-631cf88eeb00" testId="3005ec13-dbf5-14e2-e530-058c4bb5f308" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000108" startTime="2024-04-30T15:10:41.3475226-04:00" endTime="2024-04-30T15:10:41.3475227-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15d93bab-1521-4992-ba44-631cf88eeb00">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2d91f108-e054-4cf1-81f8-b0616c3efaf0" testId="b67a550b-bb2d-c2ca-834a-5311283fb41a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3200078-04:00" endTime="2024-04-30T15:10:41.3200079-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2d91f108-e054-4cf1-81f8-b0616c3efaf0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adfa5ed1-0953-4e93-b4e1-238110e274c0" testId="037c9e3f-2fc8-dac9-3f4c-ca47fc564681" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.2884924-04:00" endTime="2024-04-30T15:10:41.2884925-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adfa5ed1-0953-4e93-b4e1-238110e274c0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa85b023-8236-4b91-a9cb-10e3eb469bd6" testId="4f46b363-ac14-b826-9621-fd802f24ec03" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3179817-04:00" endTime="2024-04-30T15:10:41.3179818-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa85b023-8236-4b91-a9cb-10e3eb469bd6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6221099-daa8-4bc7-987d-86e3df107200" testId="cfdde934-033f-09be-9725-a9c5901283e9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2977052-04:00" endTime="2024-04-30T15:10:41.2977052-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6221099-daa8-4bc7-987d-86e3df107200">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ab697a4-371b-47ea-a8d1-de9c6fa33ddc" testId="f0b63aac-d829-5d9e-8fc9-664338d1b279" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3695338-04:00" endTime="2024-04-30T15:10:41.3695339-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ab697a4-371b-47ea-a8d1-de9c6fa33ddc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e2c5507d-d5b1-439d-8b57-870bbaea7cb7" testId="01d764fc-9fd6-3840-ec0a-c18d9ff90cfe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3758496-04:00" endTime="2024-04-30T15:10:41.3758496-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2c5507d-d5b1-439d-8b57-870bbaea7cb7">
      <Output>
        <StdOut>Testing pair: ')reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3000a95-00e6-4d14-b646-e015e0306457" testId="2c6868e4-20a6-b561-cce9-8c434590924b" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: SlashToken)" computerName="BRUNO" duration="00:00:00.0000299" startTime="2024-04-30T15:10:41.2712385-04:00" endTime="2024-04-30T15:10:41.2712386-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3000a95-00e6-4d14-b646-e015e0306457" />
    <UnitTestResult executionId="90ec4a5f-db34-4170-a2fc-59315cd3f250" testId="695c9ae4-930c-39ac-9284-e52198b5f009" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.3003510-04:00" endTime="2024-04-30T15:10:41.3003510-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90ec4a5f-db34-4170-a2fc-59315cd3f250">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08af0dd4-b36c-4e2b-bbca-698d88ae2b9b" testId="2cb25b3f-e618-5b6b-5e54-3bb03288b28a" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: TrueKeyword)" computerName="BRUNO" duration="00:00:00.0000987" startTime="2024-04-30T15:10:41.2507714-04:00" endTime="2024-04-30T15:10:41.2507716-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08af0dd4-b36c-4e2b-bbca-698d88ae2b9b" />
    <UnitTestResult executionId="3d519113-a8e3-447c-9893-69cb246ffc61" testId="19d98804-c911-4824-6e6e-d8213db96bd2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3481086-04:00" endTime="2024-04-30T15:10:41.3481087-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d519113-a8e3-447c-9893-69cb246ffc61">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42c766b3-8849-4985-a44e-8b7b1d66adbe" testId="64c5ddce-ae61-4e51-0469-dd186750bc2c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3519877-04:00" endTime="2024-04-30T15:10:41.3519878-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42c766b3-8849-4985-a44e-8b7b1d66adbe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4209f25-cf99-43a2-9f14-04e32b0b6be3" testId="5164a3f1-84d5-a931-d10b-2f77edad0aae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2947757-04:00" endTime="2024-04-30T15:10:41.2947758-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4209f25-cf99-43a2-9f14-04e32b0b6be3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e6d024a-24bf-4380-90d1-6f87f913491b" testId="a8fff263-616a-ed9e-e6f6-c57bf505cb31" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2702941-04:00" endTime="2024-04-30T15:10:41.2702941-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e6d024a-24bf-4380-90d1-6f87f913491b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55aa2e57-f184-4f7b-8787-af769bf7e611" testId="fed6fe1f-e52f-cbf7-ebe4-951ff14c63a9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3667265-04:00" endTime="2024-04-30T15:10:41.3667266-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55aa2e57-f184-4f7b-8787-af769bf7e611">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dee8ce9b-1347-4d15-857e-3ee76a018646" testId="681d1fc0-91ed-812c-98d8-18c7305416c1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2997469-04:00" endTime="2024-04-30T15:10:41.2997469-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dee8ce9b-1347-4d15-857e-3ee76a018646">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="487335e9-070e-40fb-9073-5d92bd582dc2" testId="086ddfd9-8954-5689-f5af-bc08ac306e47" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000197" startTime="2024-04-30T15:10:41.2747534-04:00" endTime="2024-04-30T15:10:41.2747535-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="487335e9-070e-40fb-9073-5d92bd582dc2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="581eccb4-5f2d-4b4a-ab22-dc38b53dc4fa" testId="028d767f-19bc-4b1a-74fb-f7bdde096233" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.2830012-04:00" endTime="2024-04-30T15:10:41.2830012-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="581eccb4-5f2d-4b4a-ab22-dc38b53dc4fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef2a2c75-3d32-4879-8775-f2f09024ff5a" testId="55734c88-0e7e-b987-d1ef-a5f600957170" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3165184-04:00" endTime="2024-04-30T15:10:41.3165184-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef2a2c75-3d32-4879-8775-f2f09024ff5a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a3c3480e-a0da-4741-9a0b-ce5889ea5a67" testId="10c047d2-21aa-49d4-3ef1-c73100e8afc5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3039811-04:00" endTime="2024-04-30T15:10:41.3039811-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3c3480e-a0da-4741-9a0b-ce5889ea5a67">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92612fac-07d3-4908-af4c-4b90f56bfef2" testId="27893442-69f8-db3b-5381-21e812cdbd8e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3175111-04:00" endTime="2024-04-30T15:10:41.3175111-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92612fac-07d3-4908-af4c-4b90f56bfef2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="676f1eb6-7afb-4d41-aaea-6727f1c5e980" testId="3402b273-8416-0af3-3186-1f9fa4823f7d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3748380-04:00" endTime="2024-04-30T15:10:41.3748380-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="676f1eb6-7afb-4d41-aaea-6727f1c5e980">
      <Output>
        <StdOut>Testing pair: '=a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1ce91f5-63f5-4658-a8f6-beed20b21ab8" testId="9dba3a61-fd4a-2065-5987-f970272c7145" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3777595-04:00" endTime="2024-04-30T15:10:41.3777595-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1ce91f5-63f5-4658-a8f6-beed20b21ab8">
      <Output>
        <StdOut>Testing pair: '(loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a9fa2e4-afa3-4c09-8708-08aed6e20f66" testId="b6f77f76-07dc-f7d5-0458-ddc947095e88" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3194535-04:00" endTime="2024-04-30T15:10:41.3194536-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a9fa2e4-afa3-4c09-8708-08aed6e20f66">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e891fd83-f3bb-4e3b-8d67-baa921ae8aff" testId="57e8aee0-ff63-3635-b398-bb18c3b7251e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0051317" startTime="2024-04-30T15:10:41.2170312-04:00" endTime="2024-04-30T15:10:41.2170313-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e891fd83-f3bb-4e3b-8d67-baa921ae8aff">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01443603-19b7-4d91-b4a9-39d05462a143" testId="5bae3047-df7b-9c7d-e558-c27a0883e8c8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2861505-04:00" endTime="2024-04-30T15:10:41.2861505-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01443603-19b7-4d91-b4a9-39d05462a143">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c1447b1-94e9-4ef1-ac0c-2db821517271" testId="ae404166-de87-63fd-a901-a2021c260a88" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3093083-04:00" endTime="2024-04-30T15:10:41.3093084-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c1447b1-94e9-4ef1-ac0c-2db821517271">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2a10b27e-41ae-4a34-97af-bcd0f44fee77" testId="653c09a7-70be-4c34-7782-419c8b7e51e8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2836444-04:00" endTime="2024-04-30T15:10:41.2836444-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a10b27e-41ae-4a34-97af-bcd0f44fee77">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdeb4bd6-2e27-4f7d-8832-b968132fd4ff" testId="90ea04cc-0b21-4e87-f49c-3428cc4e4516" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2720322-04:00" endTime="2024-04-30T15:10:41.2720322-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdeb4bd6-2e27-4f7d-8832-b968132fd4ff" />
    <UnitTestResult executionId="9cacde8f-33f8-47cb-a41e-483ad6fd7636" testId="3649a616-d1f0-dc94-834c-e74fd02da661" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.2675710-04:00" endTime="2024-04-30T15:10:41.2675711-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9cacde8f-33f8-47cb-a41e-483ad6fd7636" />
    <UnitTestResult executionId="7fd5cff2-9bc9-494c-8f87-341a3d613874" testId="097e25a8-7a7b-218e-969e-d9e317bb5de9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000130" startTime="2024-04-30T15:10:41.3797022-04:00" endTime="2024-04-30T15:10:41.3797023-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fd5cff2-9bc9-494c-8f87-341a3d613874">
      <Output>
        <StdOut>Testing pair: '!=+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ffc3e5b-b232-487f-8cca-bf058e6c18bd" testId="a6ab4938-1062-b240-784f-5c0ff39ec2fe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.3145343-04:00" endTime="2024-04-30T15:10:41.3145344-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ffc3e5b-b232-487f-8cca-bf058e6c18bd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63131f25-0871-472e-bb9b-924f61ee891e" testId="8908d670-0648-87a1-686f-bf0e3444597f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3311960-04:00" endTime="2024-04-30T15:10:41.3311960-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63131f25-0871-472e-bb9b-924f61ee891e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eba7760c-e81e-4fa9-aa0a-864510eb7803" testId="e1818161-b7f3-3085-65f9-97f01f397f0f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000111" startTime="2024-04-30T15:10:41.2879988-04:00" endTime="2024-04-30T15:10:41.2879988-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eba7760c-e81e-4fa9-aa0a-864510eb7803">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b5a18b7-0ab7-415e-b2b3-abc6723c17d7" testId="b91d708e-5ed6-d58d-25c0-77f98067f581" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: EqualsToken, text: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.3854698-04:00" endTime="2024-04-30T15:10:41.3854699-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b5a18b7-0ab7-415e-b2b3-abc6723c17d7">
      <Output>
        <StdOut>Expected kind: EqualsToken, Actual kind: EqualsToken&#xD;
Expected text: '=', Actual text: '='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a3792a4e-3609-41db-80b8-f7fb9d63585f" testId="80741bef-cc26-62e1-3193-ed868fd8abd5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3195068-04:00" endTime="2024-04-30T15:10:41.3195068-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3792a4e-3609-41db-80b8-f7fb9d63585f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="661c3ae6-56dd-44de-a296-710afc06da81" testId="a1f2041e-e40d-8cc8-6e07-bf3e0de7eb4b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3399319-04:00" endTime="2024-04-30T15:10:41.3399320-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="661c3ae6-56dd-44de-a296-710afc06da81">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04d52ccf-64ab-42d3-b02c-ce0274c2c891" testId="48add3e9-5bc6-632d-4c14-6a49aa32c663" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2665599-04:00" endTime="2024-04-30T15:10:41.2665600-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04d52ccf-64ab-42d3-b02c-ce0274c2c891" />
    <UnitTestResult executionId="d21e790f-a0bb-490c-b6a1-c24cd0937f5e" testId="4132fb32-1e4e-54d5-65c8-3f10dc41226e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3184287-04:00" endTime="2024-04-30T15:10:41.3184287-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d21e790f-a0bb-490c-b6a1-c24cd0937f5e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f5f3e90-6628-4344-a6f7-b1f48e3075d9" testId="3b530098-4933-04ea-97b6-97a820cd10bb" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000254" startTime="2024-04-30T15:10:41.2639886-04:00" endTime="2024-04-30T15:10:41.2639886-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f5f3e90-6628-4344-a6f7-b1f48e3075d9" />
    <UnitTestResult executionId="9e27daa0-84dc-474a-a78c-533d103a0497" testId="75c2e1a2-8def-69bd-46cc-9978c5631ae3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3427727-04:00" endTime="2024-04-30T15:10:41.3427728-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e27daa0-84dc-474a-a78c-533d103a0497">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf4ced01-376e-4aa8-8b5f-b0d8eec631c5" testId="9806327e-d986-5657-5ef6-5918aeb29464" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3772056-04:00" endTime="2024-04-30T15:10:41.3772057-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf4ced01-376e-4aa8-8b5f-b0d8eec631c5">
      <Output>
        <StdOut>Testing pair: '+='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f3b330a-f589-44cd-910e-d050463e40b3" testId="de167297-0dbc-b971-26ea-f4e823b9d489" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.2902471-04:00" endTime="2024-04-30T15:10:41.2902472-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f3b330a-f589-44cd-910e-d050463e40b3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9973539-bb00-4ac8-b4d9-843da14ba883" testId="1aac750b-370b-3d51-d272-28664835bf62" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(1 + 2) * 3&quot;, expectedValue: 9)" computerName="BRUNO" duration="00:00:00.0001135" startTime="2024-04-30T15:10:41.2703480-04:00" endTime="2024-04-30T15:10:41.2703481-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9973539-bb00-4ac8-b4d9-843da14ba883" />
    <UnitTestResult executionId="96f18a2a-7a3f-477e-8186-560801b485b2" testId="ff2ca775-6d9a-2740-83d2-5e94759910c7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000218" startTime="2024-04-30T15:10:41.2923392-04:00" endTime="2024-04-30T15:10:41.2923392-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96f18a2a-7a3f-477e-8186-560801b485b2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be87c4a1-da60-43c9-a83a-28a2f5a4a2be" testId="a14448c4-61f4-e68d-a70d-ec29fe8951ad" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.2947075-04:00" endTime="2024-04-30T15:10:41.2947075-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be87c4a1-da60-43c9-a83a-28a2f5a4a2be">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d570bc52-576f-4cae-a1f3-a3653e6c9c2b" testId="54144699-a9d3-b2bf-967b-acebf5d92b05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2612234-04:00" endTime="2024-04-30T15:10:41.2612235-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d570bc52-576f-4cae-a1f3-a3653e6c9c2b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d660f87-1fe0-4bfb-9994-59b31d865927" testId="70266596-319b-559c-2957-01ac7d9ec97f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3072580-04:00" endTime="2024-04-30T15:10:41.3072580-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d660f87-1fe0-4bfb-9994-59b31d865927">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7fa06fa6-8b1f-409d-9b02-d67fe0a19e5f" testId="b60a39ec-5911-415d-75fb-8c08669491b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000134" startTime="2024-04-30T15:10:41.3643470-04:00" endTime="2024-04-30T15:10:41.3643471-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fa06fa6-8b1f-409d-9b02-d67fe0a19e5f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e679ff0d-8e4c-48c4-b43d-2f5ea57f771a" testId="43dd3148-3dfe-b6bb-784c-7043d9536dea" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3500520-04:00" endTime="2024-04-30T15:10:41.3500521-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e679ff0d-8e4c-48c4-b43d-2f5ea57f771a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a586743b-78a8-49ec-8880-2b3401e8bed5" testId="9919c738-d4df-0f33-e473-29c8a9de4a9e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3098231-04:00" endTime="2024-04-30T15:10:41.3098232-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a586743b-78a8-49ec-8880-2b3401e8bed5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca41df01-a2af-4a42-83c8-09bf25e6676e" testId="9eced631-6690-4f0d-b334-ac2e1ad045e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.3038046-04:00" endTime="2024-04-30T15:10:41.3038046-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca41df01-a2af-4a42-83c8-09bf25e6676e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03a2fdc6-ab6c-4cac-b5f7-f56ab486a759" testId="137836f0-201a-7615-d8af-56cc6df7f3cc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3280729-04:00" endTime="2024-04-30T15:10:41.3280729-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03a2fdc6-ab6c-4cac-b5f7-f56ab486a759">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9324c1b-19d7-4b16-95ec-c065283a3d8d" testId="f7ae3281-a1c9-01b9-5f89-41086b48662c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000209" startTime="2024-04-30T15:10:41.2937323-04:00" endTime="2024-04-30T15:10:41.2937324-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9324c1b-19d7-4b16-95ec-c065283a3d8d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d7946b9-3d86-4b34-8a37-2a00a842ed09" testId="a5c847e9-374d-342c-6593-0919f640a50c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2865796-04:00" endTime="2024-04-30T15:10:41.2865797-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d7946b9-3d86-4b34-8a37-2a00a842ed09">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c855781c-816c-40db-9fa6-b8c58b906a02" testId="3c24272b-36e1-6eef-4428-7de31da8c6bf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3139611-04:00" endTime="2024-04-30T15:10:41.3139611-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c855781c-816c-40db-9fa6-b8c58b906a02">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c73c76fd-531d-41e2-8510-d1d7ee7a74ae" testId="1833d4d5-596c-48c3-44a0-608e8b40d511" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2907086-04:00" endTime="2024-04-30T15:10:41.2907086-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c73c76fd-531d-41e2-8510-d1d7ee7a74ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6b651c97-dc64-4194-b4c5-7fb589a7c38b" testId="a38aad17-04e4-0fd3-a043-f2cb546da0cb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2892337-04:00" endTime="2024-04-30T15:10:41.2892338-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6b651c97-dc64-4194-b4c5-7fb589a7c38b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c77d56e5-6ae3-4456-bc32-5eb423cd198a" testId="ec5f0d4f-387c-0c07-870a-4267daec8c36" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3338324-04:00" endTime="2024-04-30T15:10:41.3338325-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c77d56e5-6ae3-4456-bc32-5eb423cd198a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f453963f-aa70-4853-a289-19dd37914b1e" testId="553c73cb-20b2-dfd0-e3e6-fdbd2e4b1ee4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3155610-04:00" endTime="2024-04-30T15:10:41.3155610-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f453963f-aa70-4853-a289-19dd37914b1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="237b3713-3eee-4e6b-afb9-d8716421dafc" testId="16a46364-bb02-cfff-a791-1885b1da0e9a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3255036-04:00" endTime="2024-04-30T15:10:41.3255036-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="237b3713-3eee-4e6b-afb9-d8716421dafc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97772db0-f87e-4f0c-920e-620fa521bb81" testId="d582a3a4-33ce-d84c-edb4-ab8ea031d52e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3434717-04:00" endTime="2024-04-30T15:10:41.3434718-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97772db0-f87e-4f0c-920e-620fa521bb81">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2d6de4af-f21c-43c8-ba28-a5bf549390d3" testId="721a6d40-2ae3-6612-7f9a-7c8234775d74" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.2860441-04:00" endTime="2024-04-30T15:10:41.2860442-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2d6de4af-f21c-43c8-ba28-a5bf549390d3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e8ff00e-0f76-41ac-bf76-c21810b78bb9" testId="86f416ae-c1b2-8f94-82e0-05fed12a5d8b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2913335-04:00" endTime="2024-04-30T15:10:41.2913335-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e8ff00e-0f76-41ac-bf76-c21810b78bb9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f40a957-a88d-4273-ad90-8b595af20d85" testId="6451027a-ae47-8334-a04d-000f4719a66b" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: NotEqualsToken)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.2725670-04:00" endTime="2024-04-30T15:10:41.2725671-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f40a957-a88d-4273-ad90-8b595af20d85" />
    <UnitTestResult executionId="0f03221c-33bc-4749-bd1c-2a564372abc1" testId="6a742b88-870e-529c-4a86-d85ed0d8bc4d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3245029-04:00" endTime="2024-04-30T15:10:41.3245029-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f03221c-33bc-4749-bd1c-2a564372abc1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b081c2d-5472-45e5-a2e3-8772821ca799" testId="b9a4c94d-c360-210d-577e-1b0fc4e0b9b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3615196-04:00" endTime="2024-04-30T15:10:41.3615197-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b081c2d-5472-45e5-a2e3-8772821ca799">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="242d393a-1938-413c-be50-5f2a4d69e25d" testId="f54c69dc-1abc-c069-cdb5-72354020d797" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3337160-04:00" endTime="2024-04-30T15:10:41.3337160-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="242d393a-1938-413c-be50-5f2a4d69e25d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3856832-5779-4cef-991c-33033b6e0a1d" testId="cb8372ab-5916-290d-fdbd-c271b4ec8b30" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3286724-04:00" endTime="2024-04-30T15:10:41.3286725-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3856832-5779-4cef-991c-33033b6e0a1d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc5c3397-05e6-4a6b-9ab1-e807b9a83f32" testId="7aa0b704-640b-7ad3-deb3-a8c1fdc12712" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3104457-04:00" endTime="2024-04-30T15:10:41.3104457-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc5c3397-05e6-4a6b-9ab1-e807b9a83f32">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f2fc169-51c6-4825-bf63-987a68fa94d9" testId="e1073c8b-dc47-9489-63c6-4d389107b031" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3012967-04:00" endTime="2024-04-30T15:10:41.3012968-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f2fc169-51c6-4825-bf63-987a68fa94d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee97d302-4c7a-47da-ad45-e8821f166a60" testId="e6f500d8-0054-aee8-79fe-ff8f7888a3cb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000073" startTime="2024-04-30T15:10:41.3773652-04:00" endTime="2024-04-30T15:10:41.3773652-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee97d302-4c7a-47da-ad45-e8821f166a60">
      <Output>
        <StdOut>Testing pair: '=True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb3bfa77-111f-4718-b370-a5297bb5dce3" testId="cf4c819a-1d7e-1e71-6825-1b9a814173c0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3562914-04:00" endTime="2024-04-30T15:10:41.3562914-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb3bfa77-111f-4718-b370-a5297bb5dce3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03981b39-ec0f-4e86-af62-6ba58dfbbc55" testId="8f6e5188-9a3e-6f67-1995-e35a3a406cc1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3386070-04:00" endTime="2024-04-30T15:10:41.3386071-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03981b39-ec0f-4e86-af62-6ba58dfbbc55">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca7b0509-e916-4669-bf3c-7e81cbb76fbd" testId="324123d0-80eb-16fd-6c27-5f64383ff68f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3520333-04:00" endTime="2024-04-30T15:10:41.3520334-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca7b0509-e916-4669-bf3c-7e81cbb76fbd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38f67b4b-ab46-428d-befb-692c2bab634d" testId="4f7298bf-afb9-288d-0a96-aa7b50f0c89e" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.2743186-04:00" endTime="2024-04-30T15:10:41.2743187-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38f67b4b-ab46-428d-befb-692c2bab634d" />
    <UnitTestResult executionId="c7488403-a6e5-4b7c-88d4-e1b27b83fcc0" testId="c47b9cf6-d906-ee0a-e4b3-8b846acfca41" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000211" startTime="2024-04-30T15:10:41.2634862-04:00" endTime="2024-04-30T15:10:41.2634863-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7488403-a6e5-4b7c-88d4-e1b27b83fcc0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb6abbfd-e907-43c8-83b9-c2b638388b20" testId="560e34f5-e6c5-4355-ba03-c627e5e47ec8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3275802-04:00" endTime="2024-04-30T15:10:41.3275802-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb6abbfd-e907-43c8-83b9-c2b638388b20">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3ec6926e-3327-4bf2-9799-d83b8740857e" testId="1b83da0c-08a2-320a-173d-f7f32c9b7b79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3002351-04:00" endTime="2024-04-30T15:10:41.3002352-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ec6926e-3327-4bf2-9799-d83b8740857e">
      <Output>
        <StdOut>Testing pair with explicit separator: '=&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ad0bdd2-4ae3-4166-9fdc-cbf8c8c87037" testId="56ff286b-9b2e-7556-3758-557f2b9c545c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3207973-04:00" endTime="2024-04-30T15:10:41.3207973-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ad0bdd2-4ae3-4166-9fdc-cbf8c8c87037">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c21c92a-50be-42a2-bd7f-1c7d3a3231f2" testId="79861e8c-c273-df77-174d-9de88f917c9f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3781935-04:00" endTime="2024-04-30T15:10:41.3781936-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c21c92a-50be-42a2-bd7f-1c7d3a3231f2">
      <Output>
        <StdOut>Testing pair: '123-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8958111-a6a2-4821-b2ff-560b24ff407a" testId="a1bd4c0f-03b5-ddab-49de-b18c2c2b1295" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3124575-04:00" endTime="2024-04-30T15:10:41.3124576-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8958111-a6a2-4821-b2ff-560b24ff407a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="958865cb-eff6-42b5-81a8-1382915ea4f5" testId="0aae28d3-63fd-f6df-f318-07643f3d6735" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000142" startTime="2024-04-30T15:10:41.3148400-04:00" endTime="2024-04-30T15:10:41.3148401-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="958865cb-eff6-42b5-81a8-1382915ea4f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f57d4ef9-ec08-421e-bf46-54e7f1ecd6a0" testId="e7c5e41c-8df9-ef88-66a3-de999d90a800" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: PlusToken)" computerName="BRUNO" duration="00:00:00.0000302" startTime="2024-04-30T15:10:41.2629828-04:00" endTime="2024-04-30T15:10:41.2629829-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f57d4ef9-ec08-421e-bf46-54e7f1ecd6a0" />
    <UnitTestResult executionId="762817cc-2755-4bdc-a1cd-10644ac04f08" testId="3e9d9bc3-cebc-6f42-e7ec-bdf5cebca6f6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.3838079-04:00" endTime="2024-04-30T15:10:41.3838079-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="762817cc-2755-4bdc-a1cd-10644ac04f08">
      <Output>
        <StdOut>Testing pair: '/123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e662def6-07c8-402f-8c2d-a6553ebcd5d7" testId="a16029e6-c586-7611-d0aa-fcfb876458f7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.3164917-04:00" endTime="2024-04-30T15:10:41.3164917-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e662def6-07c8-402f-8c2d-a6553ebcd5d7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bdc918ec-e850-45f3-9b59-b50dc6615133" testId="cf995967-70b1-4b03-85c0-74811809bb0f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000137" startTime="2024-04-30T15:10:41.2870875-04:00" endTime="2024-04-30T15:10:41.2870875-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdc918ec-e850-45f3-9b59-b50dc6615133">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9e612d5-67f0-4794-a97a-4115741bcd8b" testId="164210d5-b48c-451a-25cf-7d0a25ecd5d8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3379634-04:00" endTime="2024-04-30T15:10:41.3379635-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9e612d5-67f0-4794-a97a-4115741bcd8b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09549b6f-631a-4c83-9ef9-3e927da94434" testId="3b39320d-a709-a77f-5d1c-aaa6a04bd2a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.2963092-04:00" endTime="2024-04-30T15:10:41.2963092-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09549b6f-631a-4c83-9ef9-3e927da94434">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3fbcf5e-507b-4e7a-8382-29d660b8b741" testId="8fd6afec-26b8-e121-f4e7-998c3ae4ac2e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.3575660-04:00" endTime="2024-04-30T15:10:41.3575661-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3fbcf5e-507b-4e7a-8382-29d660b8b741">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20fda31f-104f-4671-8728-311f21abcf85" testId="014374d6-06ee-002c-a64f-a7392fa5c51b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.2670587-04:00" endTime="2024-04-30T15:10:41.2670588-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20fda31f-104f-4671-8728-311f21abcf85" />
    <UnitTestResult executionId="1c51a504-654f-44bc-bfd6-981aa22efafe" testId="d9a7520c-ba39-a977-e913-8c987f6b83f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.2839609-04:00" endTime="2024-04-30T15:10:41.2839609-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c51a504-654f-44bc-bfd6-981aa22efafe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20d68182-b150-406d-b092-67c7f4faef3c" testId="32d4b650-86e1-f288-11b0-0421fb77706f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2721377-04:00" endTime="2024-04-30T15:10:41.2721378-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20d68182-b150-406d-b092-67c7f4faef3c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7aa045c-7201-4b55-8d72-6f0a82e80fa1" testId="45b25a6b-9748-424c-d52f-7b90920b7dce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3245585-04:00" endTime="2024-04-30T15:10:41.3245585-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7aa045c-7201-4b55-8d72-6f0a82e80fa1">
      <Output>
        <StdOut>Testing pair with explicit separator: '123	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d790cf4-5ce2-4603-aa02-495fc5291efa" testId="4a50002b-5cde-07b6-d5bc-bce669fd4719" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3193032-04:00" endTime="2024-04-30T15:10:41.3193033-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d790cf4-5ce2-4603-aa02-495fc5291efa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4cbcd659-43b6-4a94-8877-2c536d27fd56" testId="6db4b3b8-cc63-6835-6d3f-2aef31af9244" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3636314-04:00" endTime="2024-04-30T15:10:41.3636315-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4cbcd659-43b6-4a94-8877-2c536d27fd56">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dfe573c4-df26-4f26-9f84-dec69bb0ca2c" testId="7bc644fc-953a-2932-ca0e-a0d38ce73fbd" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: PlusToken)" computerName="BRUNO" duration="00:00:00.0000206" startTime="2024-04-30T15:10:41.2713105-04:00" endTime="2024-04-30T15:10:41.2713105-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dfe573c4-df26-4f26-9f84-dec69bb0ca2c" />
    <UnitTestResult executionId="71eb1fce-a937-43f4-b00b-61a29b633cd1" testId="7c14af97-e814-cc31-bdfc-a393da2ac7fc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3265542-04:00" endTime="2024-04-30T15:10:41.3265543-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71eb1fce-a937-43f4-b00b-61a29b633cd1">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e18a66d-b081-4df6-b39d-1b34923bb1df" testId="84e0e3aa-8cc9-b034-452e-e83738fa1f81" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3068359-04:00" endTime="2024-04-30T15:10:41.3068360-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e18a66d-b081-4df6-b39d-1b34923bb1df">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="786fc0c5-3639-4863-90e4-d68567a78870" testId="b2c065c9-7414-a14c-3091-56abfc1b06d5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3566087-04:00" endTime="2024-04-30T15:10:41.3566088-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="786fc0c5-3639-4863-90e4-d68567a78870">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39aa0a4b-ae66-43e1-bd70-4a6eea22a81a" testId="8332b8b1-df98-2526-b6a5-98e512172411" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2992602-04:00" endTime="2024-04-30T15:10:41.2992602-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39aa0a4b-ae66-43e1-bd70-4a6eea22a81a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28c75b61-fc92-4bf5-a39e-331d3fbec77c" testId="3bd2e43f-cec8-c83e-607e-373e5e226f0e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3072903-04:00" endTime="2024-04-30T15:10:41.3072904-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28c75b61-fc92-4bf5-a39e-331d3fbec77c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97a27762-d470-4b5c-a337-13ef7a505bc0" testId="edb932cc-0c6c-74cb-9364-d520127a95aa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3129825-04:00" endTime="2024-04-30T15:10:41.3129825-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97a27762-d470-4b5c-a337-13ef7a505bc0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3a1e958-791c-47b9-9c7b-aca0a20be9e4" testId="a83b94b6-5131-a3b0-fe80-fc79efa0c524" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.3694630-04:00" endTime="2024-04-30T15:10:41.3694631-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3a1e958-791c-47b9-9c7b-aca0a20be9e4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11983811-25ff-4e8d-9efa-8ebe0d99e3d0" testId="15bee5af-28d2-4ab5-4a80-2f35765b2090" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True == False&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000242" startTime="2024-04-30T15:10:41.2725079-04:00" endTime="2024-04-30T15:10:41.2725080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11983811-25ff-4e8d-9efa-8ebe0d99e3d0" />
    <UnitTestResult executionId="9729f860-9672-48b4-aafd-0bd134e601fa" testId="a74e75cd-fbdb-6153-ecd9-f5ebda83038f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3408543-04:00" endTime="2024-04-30T15:10:41.3408543-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9729f860-9672-48b4-aafd-0bd134e601fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="651a5dd4-700c-47b9-8ac6-b3e181499a50" testId="c7f5925d-bc31-e1b2-cfab-17f249612df4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000173" startTime="2024-04-30T15:10:41.3032402-04:00" endTime="2024-04-30T15:10:41.3032403-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="651a5dd4-700c-47b9-8ac6-b3e181499a50">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e1c47cd-aa46-4687-9497-917a8e7bf368" testId="4ea12431-4c9a-8271-a06b-a5171a90f75c" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: SlashToken)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2720836-04:00" endTime="2024-04-30T15:10:41.2720836-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e1c47cd-aa46-4687-9497-917a8e7bf368" />
    <UnitTestResult executionId="25e62e62-af79-45f9-bc92-f7f02d8a79e0" testId="c0ad88f5-b91f-d569-ff6f-7bb967a3b637" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3198678-04:00" endTime="2024-04-30T15:10:41.3198678-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25e62e62-af79-45f9-bc92-f7f02d8a79e0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c559ae79-2e26-42ba-8ae3-4156bf44540f" testId="50257766-dd18-accc-2632-30e9678c1a5a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2969084-04:00" endTime="2024-04-30T15:10:41.2969084-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c559ae79-2e26-42ba-8ae3-4156bf44540f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eea86e20-b9b4-4223-86f7-415ce80dc70d" testId="781ecebd-3a99-e0af-147c-ea295bbd6327" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3670685-04:00" endTime="2024-04-30T15:10:41.3670686-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eea86e20-b9b4-4223-86f7-415ce80dc70d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0fd6ea58-68f7-4a17-afc4-36db666eb305" testId="242da0a3-54e8-e900-59ae-415aaf36fb2f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3738185-04:00" endTime="2024-04-30T15:10:41.3738185-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fd6ea58-68f7-4a17-afc4-36db666eb305">
      <Output>
        <StdOut>Testing pair: '=ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3331b20b-9322-4f33-8aa4-1005de3abf34" testId="34caab8b-7e9c-5466-74ac-9fc650104071" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3608401-04:00" endTime="2024-04-30T15:10:41.3608401-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3331b20b-9322-4f33-8aa4-1005de3abf34">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9df7285-2658-4e37-abcc-c1398220125d" testId="fb0f2d93-ecb4-aa58-2535-9422b6c9773a" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.2684114-04:00" endTime="2024-04-30T15:10:41.2684115-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9df7285-2658-4e37-abcc-c1398220125d" />
    <UnitTestResult executionId="4dbb9af9-4071-485e-af22-44e8a9b48c73" testId="bd7af9b4-33cc-c8fe-08fc-95f189cc6770" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.2892069-04:00" endTime="2024-04-30T15:10:41.2892069-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dbb9af9-4071-485e-af22-44e8a9b48c73">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ed9085d-8e04-4b3e-97e7-fa552ce3e966" testId="674f4a36-5948-4240-1bff-e53cf94e4cb8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.3009363-04:00" endTime="2024-04-30T15:10:41.3009364-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ed9085d-8e04-4b3e-97e7-fa552ce3e966">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c3a7e0f-6162-4636-b7c4-1204e4f99f20" testId="07ec07c5-4568-11f5-40bc-3a4d78d85494" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.2742423-04:00" endTime="2024-04-30T15:10:41.2742423-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c3a7e0f-6162-4636-b7c4-1204e4f99f20" />
    <UnitTestResult executionId="227e6d83-87f5-4e17-b7b9-d62c79857233" testId="5035657f-cf70-94dc-659a-2848181f7c58" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.2751880-04:00" endTime="2024-04-30T15:10:41.2751880-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="227e6d83-87f5-4e17-b7b9-d62c79857233">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4315a4bc-0555-47da-a18d-ec3d9a74df75" testId="74b5b173-47d8-f463-4855-e3aa9d2dbe67" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2998648-04:00" endTime="2024-04-30T15:10:41.2998648-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4315a4bc-0555-47da-a18d-ec3d9a74df75">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66b0363d-1d2e-4ea7-9915-2453d9b40140" testId="422f7b4c-e75a-cf1d-e538-d8063e850384" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2869103-04:00" endTime="2024-04-30T15:10:41.2869103-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66b0363d-1d2e-4ea7-9915-2453d9b40140">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d234424-a35f-4f54-ac03-0a04aca8ad36" testId="cbb70de1-4508-b3f7-38f0-28da49772502" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2957601-04:00" endTime="2024-04-30T15:10:41.2957601-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d234424-a35f-4f54-ac03-0a04aca8ad36">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d6d5758-ef8f-437d-809e-461163f142c2" testId="a39b7794-7294-948c-2682-5c134715f1a2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2978749-04:00" endTime="2024-04-30T15:10:41.2978750-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d6d5758-ef8f-437d-809e-461163f142c2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0cca2bba-0b85-4a70-bfe9-5566204b348e" testId="06df0aaf-e5d9-dcc8-d834-c043f9348e4b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000140" startTime="2024-04-30T15:10:41.3113951-04:00" endTime="2024-04-30T15:10:41.3113952-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0cca2bba-0b85-4a70-bfe9-5566204b348e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bddad724-6479-4f88-b7f8-a0568b13ae1b" testId="47753b59-02f6-7076-0f6e-0e2badcc3543" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.2845346-04:00" endTime="2024-04-30T15:10:41.2845347-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bddad724-6479-4f88-b7f8-a0568b13ae1b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76b34d44-cd91-455f-8a4f-63339548e862" testId="4c9f5007-e9ce-25f4-7f66-0e6ece299711" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.3482212-04:00" endTime="2024-04-30T15:10:41.3482213-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76b34d44-cd91-455f-8a4f-63339548e862">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="649eb419-07f6-4fb4-8e9b-4ba4a69053cc" testId="51894596-042b-a790-ff41-ab3bab3f6832" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3108623-04:00" endTime="2024-04-30T15:10:41.3108623-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="649eb419-07f6-4fb4-8e9b-4ba4a69053cc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2c6050c-c508-4c86-951e-23e8ef7f95cb" testId="71f4980d-dd93-e45f-48cc-c07d92d6ea7c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3521255-04:00" endTime="2024-04-30T15:10:41.3521255-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2c6050c-c508-4c86-951e-23e8ef7f95cb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e37fad5-a5e4-45fa-b16c-8faab95c33ae" testId="c8f33544-6f3c-4c34-2b82-744fa52a61f2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000109" startTime="2024-04-30T15:10:41.3669997-04:00" endTime="2024-04-30T15:10:41.3669997-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e37fad5-a5e4-45fa-b16c-8faab95c33ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e826c01-8768-44a7-bbbd-83e2869ac63c" testId="beab640a-a38b-f7da-5b38-55dc2a68bec2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3592899-04:00" endTime="2024-04-30T15:10:41.3592899-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e826c01-8768-44a7-bbbd-83e2869ac63c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8cad2514-e537-4e5c-aed2-37ca71918df4" testId="5fbd0108-a41d-eab4-17f7-0b2c9fdd7db5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3768887-04:00" endTime="2024-04-30T15:10:41.3768887-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8cad2514-e537-4e5c-aed2-37ca71918df4">
      <Output>
        <StdOut>Testing pair: '==loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ade551eb-3c51-450b-b0ef-dca9cd95cbd0" testId="21f9b134-7633-cdca-37db-a93e42e8715d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3199808-04:00" endTime="2024-04-30T15:10:41.3199808-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ade551eb-3c51-450b-b0ef-dca9cd95cbd0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16fb5f72-c8f4-49a2-bdc0-efaa4da60f9b" testId="4088b7ef-3249-5fbd-68d5-833ea9529ed0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3168805-04:00" endTime="2024-04-30T15:10:41.3168805-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16fb5f72-c8f4-49a2-bdc0-efaa4da60f9b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09e5902d-17af-4b36-aad3-57b0dd83bb64" testId="f72bfd4a-6695-632f-194b-580972c51068" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000115" startTime="2024-04-30T15:10:41.3823138-04:00" endTime="2024-04-30T15:10:41.3823139-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09e5902d-17af-4b36-aad3-57b0dd83bb64">
      <Output>
        <StdOut>Testing pair: '!=loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e32a536-e994-4077-ba65-825d2f32d55a" testId="4d3bf771-1af3-0ea7-c288-cdac10fcbfc1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3733928-04:00" endTime="2024-04-30T15:10:41.3733928-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e32a536-e994-4077-ba65-825d2f32d55a">
      <Output>
        <StdOut>Testing pair: ')a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3706fabc-bf2b-4c87-ae61-19d1c4963794" testId="d2d7e718-110d-a9a1-021e-56f3e1c6790b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000180" startTime="2024-04-30T15:10:41.2655071-04:00" endTime="2024-04-30T15:10:41.2655072-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3706fabc-bf2b-4c87-ae61-19d1c4963794" />
    <UnitTestResult executionId="60c87ba7-688f-41ad-bdc6-3a71498da69e" testId="a8fabafb-049e-bb23-be9b-39457b33e75a" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.2634690-04:00" endTime="2024-04-30T15:10:41.2634690-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60c87ba7-688f-41ad-bdc6-3a71498da69e" />
    <UnitTestResult executionId="db6a2dd3-c86b-4c0d-8b11-36e2a9921432" testId="8ba78aa6-4168-1114-e0f7-6fea58a18375" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.3069795-04:00" endTime="2024-04-30T15:10:41.3069796-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db6a2dd3-c86b-4c0d-8b11-36e2a9921432">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf84b4d8-480b-49f5-842a-5af1f1d7c175" testId="1982e5ca-0562-e040-c47d-b570831b3ee1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3528095-04:00" endTime="2024-04-30T15:10:41.3528095-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf84b4d8-480b-49f5-842a-5af1f1d7c175">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e7c02ac0-feac-4f0f-ab54-8c2fdfaab136" testId="6f8b95e8-fac5-c72d-8d5c-72c41e1f6e6c" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000041" startTime="2024-04-30T15:10:41.2536447-04:00" endTime="2024-04-30T15:10:41.2536448-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7c02ac0-feac-4f0f-ab54-8c2fdfaab136" />
    <UnitTestResult executionId="6e154718-716a-43e7-976b-1280c6ffcc8b" testId="c8fc5f65-eba1-51a4-ba64-797ccccac2d8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2881595-04:00" endTime="2024-04-30T15:10:41.2881595-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e154718-716a-43e7-976b-1280c6ffcc8b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adf03795-5530-4266-b5d9-13d90f2f72a4" testId="95cc365d-096e-cdac-d837-d13e2f512980" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3239163-04:00" endTime="2024-04-30T15:10:41.3239166-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adf03795-5530-4266-b5d9-13d90f2f72a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1bcfa50-a747-4c16-afa7-57b27d8c0ad0" testId="4813f5d1-a69c-b28f-ba8a-fd1e28784777" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3538941-04:00" endTime="2024-04-30T15:10:41.3538942-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1bcfa50-a747-4c16-afa7-57b27d8c0ad0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="24b142f8-3864-42f0-884f-1b959ee143d2" testId="7dc91527-4294-4b1f-f59d-4978e86bfdc1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000230" startTime="2024-04-30T15:10:41.2933358-04:00" endTime="2024-04-30T15:10:41.2933358-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24b142f8-3864-42f0-884f-1b959ee143d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc36f266-b91f-4a7f-adfc-82506b26ad33" testId="190e182a-78fc-1e04-eafb-1b28e62ca381" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3395888-04:00" endTime="2024-04-30T15:10:41.3395889-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc36f266-b91f-4a7f-adfc-82506b26ad33">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18f2f238-51c7-41ea-b9ca-9f62e6819316" testId="1ab36ac4-3c40-17dc-4e73-ab59eaa12ea4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000308" startTime="2024-04-30T15:10:41.2911874-04:00" endTime="2024-04-30T15:10:41.2911874-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18f2f238-51c7-41ea-b9ca-9f62e6819316">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bc161cd-7d35-4017-9690-fc4b851a6f72" testId="4e908658-07df-1df7-5f15-a1c2e2fb5a13" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2717366-04:00" endTime="2024-04-30T15:10:41.2717366-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bc161cd-7d35-4017-9690-fc4b851a6f72" />
    <UnitTestResult executionId="96337bba-8187-4610-b5d2-8c64b15c007e" testId="249d22c0-6b90-a17b-dca2-88e3585daccc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2951984-04:00" endTime="2024-04-30T15:10:41.2951984-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96337bba-8187-4610-b5d2-8c64b15c007e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a01d649c-2def-4ac5-9c34-716643a0f2f2" testId="698ffbf9-73d8-f970-4a05-60a63396beb0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000147" startTime="2024-04-30T15:10:41.3290039-04:00" endTime="2024-04-30T15:10:41.3290039-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a01d649c-2def-4ac5-9c34-716643a0f2f2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40439d4a-32a1-4834-9dd0-ba0db7428d55" testId="906c73f0-514f-37ed-ca43-92bde3614284" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3143324-04:00" endTime="2024-04-30T15:10:41.3143324-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40439d4a-32a1-4834-9dd0-ba0db7428d55">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a68ed8c-db42-42d1-84d7-f93fbd50bd72" testId="b2f730cf-dfc8-9b7c-14b9-74530f15c391" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: OpenParenthesisToken)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2510796-04:00" endTime="2024-04-30T15:10:41.2510797-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a68ed8c-db42-42d1-84d7-f93fbd50bd72" />
    <UnitTestResult executionId="b4056566-670c-44ca-8fe3-17f95d9d1b75" testId="8524b3d4-b0f2-8602-c61b-6b328f8cd68d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3566591-04:00" endTime="2024-04-30T15:10:41.3566592-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4056566-670c-44ca-8fe3-17f95d9d1b75">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40ddaed4-d0da-4dde-9357-edcebf18646d" testId="eae6a2e2-c1b2-280d-6e66-008f22ccd00b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2734097-04:00" endTime="2024-04-30T15:10:41.2734098-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40ddaed4-d0da-4dde-9357-edcebf18646d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="352ea05a-dcc0-43c0-861d-8fe3272647b9" testId="07d9a77c-a1c2-a693-444e-406cde40d743" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3492553-04:00" endTime="2024-04-30T15:10:41.3492553-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="352ea05a-dcc0-43c0-861d-8fe3272647b9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fb8cc541-3af5-4e13-912f-bb1c0c0205e2" testId="c7d292d8-b278-a12a-9b66-e868200d3235" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3564447-04:00" endTime="2024-04-30T15:10:41.3564448-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb8cc541-3af5-4e13-912f-bb1c0c0205e2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78a74264-faa2-4cc8-bbf0-47c0e96887f1" testId="66913b9c-15a2-d54c-2f3c-5ef2959fbe1f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3083176-04:00" endTime="2024-04-30T15:10:41.3083176-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78a74264-faa2-4cc8-bbf0-47c0e96887f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7d4c092-5983-4992-8f35-bb9376cc4792" testId="4b2ef06a-3f86-4a9a-0980-a987d0fecaee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3180082-04:00" endTime="2024-04-30T15:10:41.3180082-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7d4c092-5983-4992-8f35-bb9376cc4792">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eecae5a3-4aa9-427b-8525-e5fbe5da6902" testId="35247896-257a-5aa1-165a-d2826627fae2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2907619-04:00" endTime="2024-04-30T15:10:41.2907619-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eecae5a3-4aa9-427b-8525-e5fbe5da6902">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cde9bdef-b809-4487-acfb-a6086e98af7d" testId="05280a91-df0a-5dd3-0a5c-5983d68d226d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3616433-04:00" endTime="2024-04-30T15:10:41.3616433-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cde9bdef-b809-4487-acfb-a6086e98af7d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a711e774-33ca-422f-a0f8-d95158ac3493" testId="e22f2687-ac39-d1ec-cf7d-1ff931ebe8d0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2927760-04:00" endTime="2024-04-30T15:10:41.2927761-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a711e774-33ca-422f-a0f8-d95158ac3493">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28ee2f18-b53e-461b-8507-705f6c90410e" testId="9914297b-f7c6-2a38-f4be-be33c86378dc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3661543-04:00" endTime="2024-04-30T15:10:41.3661543-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28ee2f18-b53e-461b-8507-705f6c90410e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9dca7a3c-7b04-45dc-ba49-047ab5fb9877" testId="88afcde4-85a2-ef81-4f13-4b549b5ea95b" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 == 1&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000620" startTime="2024-04-30T15:10:41.2648220-04:00" endTime="2024-04-30T15:10:41.2648221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9dca7a3c-7b04-45dc-ba49-047ab5fb9877" />
    <UnitTestResult executionId="cec21c54-261d-4e73-ac57-09cbde11e8d2" testId="76c34614-ce75-6cb1-6fdf-dc56d77111a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3113352-04:00" endTime="2024-04-30T15:10:41.3113352-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cec21c54-261d-4e73-ac57-09cbde11e8d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06c9cfd4-a016-4344-b12d-581ccbf912ca" testId="31b64d55-5380-54cb-1e53-67960d6b4a5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3023383-04:00" endTime="2024-04-30T15:10:41.3023383-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06c9cfd4-a016-4344-b12d-581ccbf912ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f11051ad-12f6-4389-bea7-ffae015c9046" testId="da4574c7-cf1b-954e-6f1a-18a48735cedb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2998915-04:00" endTime="2024-04-30T15:10:41.2998915-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f11051ad-12f6-4389-bea7-ffae015c9046">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90123c0d-0373-4f17-8284-abc8a7c5ae76" testId="bbb8a264-7bb2-9cff-dc36-dc8f8858e8a1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3023669-04:00" endTime="2024-04-30T15:10:41.3023669-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90123c0d-0373-4f17-8284-abc8a7c5ae76">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5099dd36-8332-4be8-a065-8dea66aad0e5" testId="2bb9e9ec-9413-d98d-692f-cd33d79d78e7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3838687-04:00" endTime="2024-04-30T15:10:41.3838687-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5099dd36-8332-4be8-a065-8dea66aad0e5">
      <Output>
        <StdOut>Testing pair: '==False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="564b0a6a-3d56-4f23-ba32-361f07659a25" testId="ea0aba16-17cb-4c4f-57d3-461af2e4fb4f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.3827216-04:00" endTime="2024-04-30T15:10:41.3827217-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="564b0a6a-3d56-4f23-ba32-361f07659a25">
      <Output>
        <StdOut>Testing pair: '-+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="732582e4-c80f-42dc-9391-2db28949fc32" testId="ecb69047-ada6-cfd3-a341-40e7b8b49794" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.2766212-04:00" endTime="2024-04-30T15:10:41.2766213-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="732582e4-c80f-42dc-9391-2db28949fc32">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2919647-126b-4a6e-afa5-37368a0beeb8" testId="6f119d45-190e-479b-9944-25bc1309b44d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000239" startTime="2024-04-30T15:10:41.2666438-04:00" endTime="2024-04-30T15:10:41.2666438-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2919647-126b-4a6e-afa5-37368a0beeb8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b89d565-5e62-46ff-8899-8d70f0ee5609" testId="09ab0fb1-2079-6e6b-0baa-f926554331bc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.3251528-04:00" endTime="2024-04-30T15:10:41.3251528-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b89d565-5e62-46ff-8899-8d70f0ee5609">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="998fbe23-5495-47cc-8d44-5320a01bbdc7" testId="550c20af-0497-f645-c85e-64fe0d1f8c0f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3153426-04:00" endTime="2024-04-30T15:10:41.3153427-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="998fbe23-5495-47cc-8d44-5320a01bbdc7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e1df000-b8b5-487d-8980-64d2e15ec066" testId="0d7ebab8-a8d8-a105-a6a7-767063cb7a1e" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000041" startTime="2024-04-30T15:10:41.2530705-04:00" endTime="2024-04-30T15:10:41.2530706-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e1df000-b8b5-487d-8980-64d2e15ec066" />
    <UnitTestResult executionId="cb20f0a9-e1aa-4036-8e34-7bcc8d1d8137" testId="5e009e33-af76-ecb1-d796-640b71d73534" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.3037769-04:00" endTime="2024-04-30T15:10:41.3037770-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb20f0a9-e1aa-4036-8e34-7bcc8d1d8137">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7bca963a-1b14-48fa-b183-456739e4ad0f" testId="4725a845-5387-38e9-3e52-ed675fc78311" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000102" startTime="2024-04-30T15:10:41.3711780-04:00" endTime="2024-04-30T15:10:41.3711781-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7bca963a-1b14-48fa-b183-456739e4ad0f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ffb8b5c-eefa-489b-82a2-e970dd794983" testId="4bfb4392-bab3-1fd5-de93-02bcc542c62f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3655084-04:00" endTime="2024-04-30T15:10:41.3655084-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ffb8b5c-eefa-489b-82a2-e970dd794983">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47d70792-f9dc-458d-bf16-5fd0cfe64cdd" testId="48ace240-48ff-d82d-4f41-d52a68336ded" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2716811-04:00" endTime="2024-04-30T15:10:41.2716811-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47d70792-f9dc-458d-bf16-5fd0cfe64cdd">
      <Output>
        <StdOut>Testing pair with explicit separator: '123
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c365902e-722f-4287-8db4-c3096d14f9bd" testId="ee6390a6-7327-bd96-d63b-de81370eef3e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3492012-04:00" endTime="2024-04-30T15:10:41.3492012-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c365902e-722f-4287-8db4-c3096d14f9bd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2ae41ea-3d85-49ba-aad0-59310700525c" testId="d9c1d719-8623-3c46-8105-d910ffc46172" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3619563-04:00" endTime="2024-04-30T15:10:41.3619564-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2ae41ea-3d85-49ba-aad0-59310700525c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef5b5fa0-1b89-4264-ad4a-601637e7e2b8" testId="8c5c8c4b-a0ca-2e15-1511-29ad22db0415" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3251790-04:00" endTime="2024-04-30T15:10:41.3251790-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef5b5fa0-1b89-4264-ad4a-601637e7e2b8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07e62c1f-a00d-49fa-997c-d37e0328c7ca" testId="d34647df-ac9d-8b4b-dae2-5908931e93ef" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: StarToken)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2721182-04:00" endTime="2024-04-30T15:10:41.2721183-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07e62c1f-a00d-49fa-997c-d37e0328c7ca" />
    <UnitTestResult executionId="81a8fe11-f31a-41b4-a798-dcdefd871ff7" testId="91e578ce-ec88-83fa-787f-009f5f67ce95" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3406393-04:00" endTime="2024-04-30T15:10:41.3406393-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81a8fe11-f31a-41b4-a798-dcdefd871ff7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4bc55d5-7e27-46ca-ae7d-876d9dc46565" testId="34bb8306-c29c-4626-c5b0-9b49ed139da4" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) == 12&quot;, expectedValue: True)" computerName="BRUNO" duration="00:00:00.0000217" startTime="2024-04-30T15:10:41.2743828-04:00" endTime="2024-04-30T15:10:41.2743828-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4bc55d5-7e27-46ca-ae7d-876d9dc46565" />
    <UnitTestResult executionId="cb093b9f-551c-4e1a-9a46-8fec900a50a5" testId="2fb6cc08-76e7-edae-d8a7-37d44234aa8c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000353" startTime="2024-04-30T15:10:41.2911269-04:00" endTime="2024-04-30T15:10:41.2911270-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb093b9f-551c-4e1a-9a46-8fec900a50a5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3c88bce-3bb8-4424-a3ee-11881b874033" testId="59b8fe00-2b0b-cf9b-1ff0-5d36bc21fa5e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3184881-04:00" endTime="2024-04-30T15:10:41.3184881-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3c88bce-3bb8-4424-a3ee-11881b874033">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2bd63bc0-1a98-4865-bad2-07bf2411c936" testId="45e2231d-67ee-0a57-fd69-f4c00be4ea81" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: FalseKeyword, text: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0001959" startTime="2024-04-30T15:10:41.3846306-04:00" endTime="2024-04-30T15:10:41.3846307-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2bd63bc0-1a98-4865-bad2-07bf2411c936">
      <Output>
        <StdOut>Expected kind: FalseKeyword, Actual kind: FalseKeyword&#xD;
Expected text: 'False', Actual text: 'False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9af15c9-0c09-48c4-bd9d-7e565839c7f9" testId="cf31d202-853d-290b-b6f3-6da2ca7b4cf6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3333853-04:00" endTime="2024-04-30T15:10:41.3333854-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9af15c9-0c09-48c4-bd9d-7e565839c7f9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4da498e2-02b2-4e41-8bc4-d5da255f9daf" testId="6e1d6871-2648-5b47-7735-f156f75721e5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2846158-04:00" endTime="2024-04-30T15:10:41.2846159-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4da498e2-02b2-4e41-8bc4-d5da255f9daf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e80fc55d-f840-4711-9404-e0b2351f8f5b" testId="f8ccfe58-8f41-6406-086e-f09dc7100c5c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3266352-04:00" endTime="2024-04-30T15:10:41.3266352-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e80fc55d-f840-4711-9404-e0b2351f8f5b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b15c8c5-c9f1-465f-8658-9a3e6d9cc044" testId="15ba331e-9eb4-33e7-0f69-8143990dfd4c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000229" startTime="2024-04-30T15:10:41.2642182-04:00" endTime="2024-04-30T15:10:41.2642182-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b15c8c5-c9f1-465f-8658-9a3e6d9cc044">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e9be030-121a-4182-8042-335abcfa70f4" testId="27c0f553-3b87-e6a0-82a6-70b41ee00a13" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.2655345-04:00" endTime="2024-04-30T15:10:41.2655345-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e9be030-121a-4182-8042-335abcfa70f4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dae27e9b-18b1-491b-98da-ff4f250c0c86" testId="03c0ff53-8796-075d-a339-22ab7ea4afcf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3666470-04:00" endTime="2024-04-30T15:10:41.3666471-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dae27e9b-18b1-491b-98da-ff4f250c0c86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6cf3575b-1c05-4b87-a5b2-05e44e8a4d8e" testId="d8447601-5c31-9049-ba3a-63d7873c6f75" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2699178-04:00" endTime="2024-04-30T15:10:41.2699178-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cf3575b-1c05-4b87-a5b2-05e44e8a4d8e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0066347a-b52f-414b-a922-abdc574c1e76" testId="94b77800-6724-78b5-48f4-5b33793d2302" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2948578-04:00" endTime="2024-04-30T15:10:41.2948579-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0066347a-b52f-414b-a922-abdc574c1e76">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7813d2b6-d68e-40a8-ad65-5a70e8e523e9" testId="82901ec3-e988-9aa6-5ce7-cdded3a0760f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000218" startTime="2024-04-30T15:10:41.2692434-04:00" endTime="2024-04-30T15:10:41.2692434-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7813d2b6-d68e-40a8-ad65-5a70e8e523e9" />
    <UnitTestResult executionId="153d7f2b-c526-4d6b-99c9-ca4b4519884b" testId="5b052559-4515-de00-a0d4-8e3b7beeb73e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000190" startTime="2024-04-30T15:10:41.3077590-04:00" endTime="2024-04-30T15:10:41.3077590-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="153d7f2b-c526-4d6b-99c9-ca4b4519884b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5964668a-f2db-4716-9430-a914f147ca01" testId="53c7ab21-28e1-c3eb-f708-07c3541b8a1a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000203" startTime="2024-04-30T15:10:41.2625088-04:00" endTime="2024-04-30T15:10:41.2625089-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5964668a-f2db-4716-9430-a914f147ca01">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3048f590-e073-44b3-99ba-dc5ec3475fc5" testId="54f6ecfb-35f0-c829-3716-2201c6cd8ec6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2983311-04:00" endTime="2024-04-30T15:10:41.2983311-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3048f590-e073-44b3-99ba-dc5ec3475fc5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="176af900-3fa0-44cf-995f-b0e335d1ab44" testId="634b7c8f-eff4-d566-bce7-e18cb89281a5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2902739-04:00" endTime="2024-04-30T15:10:41.2902740-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="176af900-3fa0-44cf-995f-b0e335d1ab44">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac128081-be95-4639-9c7f-e793ebe43bc5" testId="851f9701-f91d-ed57-c1d1-67f769e36e90" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3609543-04:00" endTime="2024-04-30T15:10:41.3609544-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac128081-be95-4639-9c7f-e793ebe43bc5">
      <Output>
        <StdOut>Testing pair with explicit separator: '123	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8bde0e7-2f01-4ff6-b9a9-4046e3b876d8" testId="e949c315-53bd-2553-894e-14dbe4dd533a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000096" startTime="2024-04-30T15:10:41.3326502-04:00" endTime="2024-04-30T15:10:41.3326503-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8bde0e7-2f01-4ff6-b9a9-4046e3b876d8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc909dd0-7351-4477-a06e-f703821cac58" testId="0e340582-86f3-f229-bad6-4dadcc59a904" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3149606-04:00" endTime="2024-04-30T15:10:41.3149607-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc909dd0-7351-4477-a06e-f703821cac58">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bdb58664-040b-45f6-9476-3b3c21433b93" testId="cb17f738-f5cb-a2ff-471c-b0356ee464c1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2956998-04:00" endTime="2024-04-30T15:10:41.2956998-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdb58664-040b-45f6-9476-3b3c21433b93">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ee71a9c-9deb-466a-9fe3-c12822892e5b" testId="0b666d56-bf4b-83c8-9a24-e83ce5cb41c4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2840746-04:00" endTime="2024-04-30T15:10:41.2840746-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ee71a9c-9deb-466a-9fe3-c12822892e5b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f6e4627e-5b7b-467d-baa9-c8d3a6c668e5" testId="ce0478ba-7529-c192-3f22-d3c8957f387c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3312514-04:00" endTime="2024-04-30T15:10:41.3312515-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6e4627e-5b7b-467d-baa9-c8d3a6c668e5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dbd603e7-82c3-4776-b2ee-b23837eeb60c" testId="383c68bc-26f0-7c02-6eb8-ed0c1145f2ca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3743819-04:00" endTime="2024-04-30T15:10:41.3743820-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbd603e7-82c3-4776-b2ee-b23837eeb60c">
      <Output>
        <StdOut>Testing pair: '/reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bfe7d173-1ed2-44fb-a9fb-434be167436c" testId="c892f977-3230-15bd-3081-38b8d7f8bb19" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000124" startTime="2024-04-30T15:10:41.3823431-04:00" endTime="2024-04-30T15:10:41.3823431-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bfe7d173-1ed2-44fb-a9fb-434be167436c">
      <Output>
        <StdOut>Testing pair: ')ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb15a00e-0938-4c31-899f-12a0e8af45b5" testId="6a9c2a03-174b-1a3f-b47b-6bdb91315d9d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3266080-04:00" endTime="2024-04-30T15:10:41.3266080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb15a00e-0938-4c31-899f-12a0e8af45b5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ba11ef9-ce60-4f8c-8681-a5878cbafce7" testId="d3d5f6f8-0015-e7a6-45c3-7fad7932dd19" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) != 12&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000286" startTime="2024-04-30T15:10:41.2708146-04:00" endTime="2024-04-30T15:10:41.2708146-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ba11ef9-ce60-4f8c-8681-a5878cbafce7" />
    <UnitTestResult executionId="9bdce840-7085-4bb9-a5d3-e3bdd903bd5d" testId="307f6ab8-7796-f860-77ed-a9583472c0ec" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.3601307-04:00" endTime="2024-04-30T15:10:41.3601307-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bdce840-7085-4bb9-a5d3-e3bdd903bd5d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c48b08db-126b-4b1b-82f9-ac610c19473c" testId="21841fcb-51db-8b56-1ec6-330b7a189f16" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000229" startTime="2024-04-30T15:10:41.2655952-04:00" endTime="2024-04-30T15:10:41.2655953-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c48b08db-126b-4b1b-82f9-ac610c19473c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c531dae-d2d2-4e0d-8cb9-734b7979244b" testId="7a61bde7-f5d1-d1b6-9435-cb4502417842" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3348548-04:00" endTime="2024-04-30T15:10:41.3348548-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c531dae-d2d2-4e0d-8cb9-734b7979244b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9158b8e1-5d8c-49a4-85a9-21b29c2ce332" testId="a7051c9f-ed11-e9bf-d12e-e9248152b817" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.3251262-04:00" endTime="2024-04-30T15:10:41.3251262-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9158b8e1-5d8c-49a4-85a9-21b29c2ce332">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="612ad841-f7bc-4dbd-bd9d-f1a68570378d" testId="3dd66463-fb28-726e-f84f-673b18c29011" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2959221-04:00" endTime="2024-04-30T15:10:41.2959222-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="612ad841-f7bc-4dbd-bd9d-f1a68570378d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0518737-6b6e-4575-84a2-7b10643e2a45" testId="9bf19e57-c470-cca5-3c98-872ba87473a1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2884330-04:00" endTime="2024-04-30T15:10:41.2884331-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0518737-6b6e-4575-84a2-7b10643e2a45">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d151d27c-851c-45f5-aaae-7555eaffab92" testId="0589868c-8c5d-7b03-3914-961a10b359eb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3149004-04:00" endTime="2024-04-30T15:10:41.3149004-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d151d27c-851c-45f5-aaae-7555eaffab92">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="620708b1-f5b7-4fbe-b671-3765f934f8fc" testId="0514bb16-2428-f4e3-9eb8-723bd792e3b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000116" startTime="2024-04-30T15:10:41.2771517-04:00" endTime="2024-04-30T15:10:41.2771518-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="620708b1-f5b7-4fbe-b671-3765f934f8fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c036593-c576-481f-b75e-677469411260" testId="4b369127-e8e7-defe-a8af-ee1ba7a6deda" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3584111-04:00" endTime="2024-04-30T15:10:41.3584112-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c036593-c576-481f-b75e-677469411260">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a10f1b1d-f86f-47f9-8438-747a896dc390" testId="f3c9703c-0325-3982-9a63-348e8d73d303" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3285379-04:00" endTime="2024-04-30T15:10:41.3285379-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a10f1b1d-f86f-47f9-8438-747a896dc390">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa4dff79-939c-4495-8cee-48f9a5fb3ba3" testId="ccd18b98-1132-1a8a-622a-288abe0aa11a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3452119-04:00" endTime="2024-04-30T15:10:41.3452120-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa4dff79-939c-4495-8cee-48f9a5fb3ba3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="baced913-f20c-4416-a3ae-15a38f4ed511" testId="b5f80ae9-6dd1-d0bf-9d0b-0a87c052fa6b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0074596" startTime="2024-04-30T15:10:41.2167886-04:00" endTime="2024-04-30T15:10:41.2167886-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="baced913-f20c-4416-a3ae-15a38f4ed511" />
    <UnitTestResult executionId="a38cb782-26fd-4da1-be17-477b8b1021fd" testId="58313bd0-6564-0b1f-dca0-834f976c22e4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3607379-04:00" endTime="2024-04-30T15:10:41.3607380-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a38cb782-26fd-4da1-be17-477b8b1021fd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="227dae97-d10c-42b9-a35a-5043ad82df4d" testId="3cd3d2b8-462f-9901-c3e1-d914cf4f9d34" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: WhitespaceToken)" computerName="BRUNO" duration="00:00:00.0000041" startTime="2024-04-30T15:10:41.2509786-04:00" endTime="2024-04-30T15:10:41.2509787-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="227dae97-d10c-42b9-a35a-5043ad82df4d" />
    <UnitTestResult executionId="45456933-56e8-4325-aabc-18b05931889a" testId="67e46628-8ac4-cab1-090c-f995db06c8f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.3149310-04:00" endTime="2024-04-30T15:10:41.3149310-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45456933-56e8-4325-aabc-18b05931889a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="363ee923-297a-4b7c-9590-0f2b23eeb2ef" testId="b875a8eb-5f4c-3bda-7f90-d8381641a09f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3530357-04:00" endTime="2024-04-30T15:10:41.3530358-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="363ee923-297a-4b7c-9590-0f2b23eeb2ef">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="37615c98-507f-4ffe-a71c-a940cd28230e" testId="e38815e1-3e25-7003-bcd5-6b4c88f3504d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3581943-04:00" endTime="2024-04-30T15:10:41.3581943-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37615c98-507f-4ffe-a71c-a940cd28230e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09fc4bc5-e015-4c8b-a828-4ae34b6a3807" testId="c70338a9-860f-330e-e043-ebac8eb09ef5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3139877-04:00" endTime="2024-04-30T15:10:41.3139878-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09fc4bc5-e015-4c8b-a828-4ae34b6a3807">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44bdd01a-b8e7-4d43-b5cd-60717098619d" testId="8973b091-e178-1d65-d56a-e2b11aadd71f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.2620491-04:00" endTime="2024-04-30T15:10:41.2620492-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44bdd01a-b8e7-4d43-b5cd-60717098619d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3deff0ac-6275-4703-8298-09eb1c61729a" testId="af24482f-1b81-c7e4-62b1-41827cf2c048" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3068922-04:00" endTime="2024-04-30T15:10:41.3068922-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3deff0ac-6275-4703-8298-09eb1c61729a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7e731da-2f35-4427-a4c5-4f15566ad5f5" testId="b714498c-9c87-0b78-d61e-f290fd7282ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3114220-04:00" endTime="2024-04-30T15:10:41.3114221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7e731da-2f35-4427-a4c5-4f15566ad5f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c22da87f-4e81-4665-9c45-189b69b0acc4" testId="c259fffe-ac88-138d-4ae1-4de313cc4cbe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.3007297-04:00" endTime="2024-04-30T15:10:41.3007297-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c22da87f-4e81-4665-9c45-189b69b0acc4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="129376d3-4cf5-46f9-b172-5c350cb4f9b7" testId="8e125658-3cbb-ac01-3f7d-59db2cce5698" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000101" startTime="2024-04-30T15:10:41.3724239-04:00" endTime="2024-04-30T15:10:41.3724239-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="129376d3-4cf5-46f9-b172-5c350cb4f9b7">
      <Output>
        <StdOut>Testing pair: '*or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eef2a22a-6e7a-48b6-92f9-7d84f0466094" testId="af999560-22a6-bc64-49f2-60fb7c16e83f" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2616874-04:00" endTime="2024-04-30T15:10:41.2616875-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eef2a22a-6e7a-48b6-92f9-7d84f0466094" />
    <UnitTestResult executionId="610b091b-a917-407d-9a3d-b52ee18b6864" testId="89dd3379-cf8c-49e0-6b28-139ddad8f9c2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3082904-04:00" endTime="2024-04-30T15:10:41.3082904-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="610b091b-a917-407d-9a3d-b52ee18b6864">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6096d614-58f1-4566-837d-a3d11f23b8e5" testId="1992f91f-0861-e6ed-f699-3cfa92591b55" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3316976-04:00" endTime="2024-04-30T15:10:41.3316976-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6096d614-58f1-4566-837d-a3d11f23b8e5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6eb444da-e84e-440a-9b29-3c95039ff11d" testId="011d5d4d-abe9-a7af-79a9-4cd0fe8f2ce3" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2679415-04:00" endTime="2024-04-30T15:10:41.2679416-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6eb444da-e84e-440a-9b29-3c95039ff11d" />
    <UnitTestResult executionId="07d32c96-2655-4797-bb3b-c02e7dc10f79" testId="9298a711-3f0f-4dc0-97c1-c7901fe03db7" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.2610562-04:00" endTime="2024-04-30T15:10:41.2610562-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07d32c96-2655-4797-bb3b-c02e7dc10f79" />
    <UnitTestResult executionId="e0c8a392-354a-4463-814d-f0347e52ba79" testId="b8d40bdd-3bde-10ab-c638-dbe861456930" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2778297-04:00" endTime="2024-04-30T15:10:41.2778298-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0c8a392-354a-4463-814d-f0347e52ba79">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5052f20-229d-4d7b-939a-c2be1ac1cda7" testId="7820b041-1667-43a9-4746-db4c33f4b2bd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3768354-04:00" endTime="2024-04-30T15:10:41.3768354-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5052f20-229d-4d7b-939a-c2be1ac1cda7">
      <Output>
        <StdOut>Testing pair: '-!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09d3f3d7-3f4a-4a73-8410-c5826977d0a7" testId="c3b00382-709e-f72e-b3c0-f108f4668a1f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3153748-04:00" endTime="2024-04-30T15:10:41.3153748-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09d3f3d7-3f4a-4a73-8410-c5826977d0a7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b985376-21db-45ac-98b8-71b90923c89e" testId="9f2870a7-bd9b-bbac-ef3c-75c31774c0b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3793694-04:00" endTime="2024-04-30T15:10:41.3793695-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b985376-21db-45ac-98b8-71b90923c89e">
      <Output>
        <StdOut>Testing pair: '=and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fd7ff8f6-36e3-4e6f-9385-83fc87a9c93a" testId="591cff53-2f79-2466-504d-c072d4fe6665" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000227" startTime="2024-04-30T15:10:41.2928033-04:00" endTime="2024-04-30T15:10:41.2928033-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd7ff8f6-36e3-4e6f-9385-83fc87a9c93a">
      <Output>
        <StdOut>Testing pair with explicit separator: '123   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e2f0a99-fa31-421a-941c-d704296ce341" testId="0e769f33-ee30-8987-2ce4-817c80559e85" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3446330-04:00" endTime="2024-04-30T15:10:41.3446331-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e2f0a99-fa31-421a-941c-d704296ce341">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40b14888-37e5-46c0-8fa1-ae11ee2995bd" testId="2f1251b0-41e3-d504-bb10-f577dc488621" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2913604-04:00" endTime="2024-04-30T15:10:41.2913604-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40b14888-37e5-46c0-8fa1-ae11ee2995bd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e504ca15-2d62-45d0-b267-f842af133aa1" testId="119e348c-f0ef-c24f-b76b-a648e38851be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.2851455-04:00" endTime="2024-04-30T15:10:41.2851455-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e504ca15-2d62-45d0-b267-f842af133aa1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5196c64-355a-4981-a32f-88cdcca3cb4a" testId="0b4c3b04-b1a2-2489-b27d-13d85675a4ba" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000177" startTime="2024-04-30T15:10:41.3004052-04:00" endTime="2024-04-30T15:10:41.3004052-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5196c64-355a-4981-a32f-88cdcca3cb4a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0ac8444-325b-4b07-be97-68123f42b293" testId="cef54e27-703b-1d0a-7b0c-bc617485a163" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3115745-04:00" endTime="2024-04-30T15:10:41.3115746-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0ac8444-325b-4b07-be97-68123f42b293">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bef8e35-3655-48f0-80d6-58555994adff" testId="436a71a2-d20f-c36d-e7ce-8030d0d53961" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2768187-04:00" endTime="2024-04-30T15:10:41.2768188-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bef8e35-3655-48f0-80d6-58555994adff">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ee0461d-3d36-4060-a8e0-056a13038192" testId="0c75a998-1d5f-b872-5b9e-64c1ceceb9a7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.3250717-04:00" endTime="2024-04-30T15:10:41.3250717-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ee0461d-3d36-4060-a8e0-056a13038192">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd975df0-a846-4b59-b594-7f236f16f9ba" testId="f662891d-f136-4d2b-3cb9-9e73ef5d0ac1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000093" startTime="2024-04-30T15:10:41.3752691-04:00" endTime="2024-04-30T15:10:41.3752691-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd975df0-a846-4b59-b594-7f236f16f9ba">
      <Output>
        <StdOut>Testing pair: '/ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="422118e5-36e2-4cd5-9215-d9024b75e5fc" testId="b8f11d4e-7fe7-d5c6-4619-0d1b21fa7ad4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2897475-04:00" endTime="2024-04-30T15:10:41.2897476-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="422118e5-36e2-4cd5-9215-d9024b75e5fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af5738c1-472a-40c7-b360-4d83fbf64db0" testId="3dc97217-af6c-f540-7ac0-358aeea3880a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000099" startTime="2024-04-30T15:10:41.3651297-04:00" endTime="2024-04-30T15:10:41.3651297-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af5738c1-472a-40c7-b360-4d83fbf64db0">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c67152c-cf7c-4f17-ab71-3f60a2fd19c7" testId="37146f9c-50e5-df81-f85b-a080b111c5bc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000146" startTime="2024-04-30T15:10:41.3854080-04:00" endTime="2024-04-30T15:10:41.3854081-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c67152c-cf7c-4f17-ab71-3f60a2fd19c7">
      <Output>
        <StdOut>Expected kind: IdentifierToken, Actual kind: IdentifierToken&#xD;
Expected text: 'ashley', Actual text: 'ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f41ff5b-f4c8-4964-ba89-8fe27dece696" testId="c0f8b329-5796-ea53-a626-ae1acecaa874" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000137" startTime="2024-04-30T15:10:41.3783003-04:00" endTime="2024-04-30T15:10:41.3783004-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f41ff5b-f4c8-4964-ba89-8fe27dece696">
      <Output>
        <StdOut>Testing pair: '!=or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4b95ed2-9fdc-43f8-89a1-0d5d6055b8b6" testId="bab4e241-5249-6635-d11d-1fc7374b9527" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3062309-04:00" endTime="2024-04-30T15:10:41.3062310-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4b95ed2-9fdc-43f8-89a1-0d5d6055b8b6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86d73d0d-15f8-4260-9b53-f692d97fbb44" testId="879aa5e0-076f-bdb3-fae0-42d115f3abf2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3125192-04:00" endTime="2024-04-30T15:10:41.3125192-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86d73d0d-15f8-4260-9b53-f692d97fbb44">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a4960ab-0b55-453c-bd83-8abd89674042" testId="62211e29-e33c-ac81-ea4a-1f2d2364bda6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3737905-04:00" endTime="2024-04-30T15:10:41.3737905-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a4960ab-0b55-453c-bd83-8abd89674042">
      <Output>
        <StdOut>Testing pair: '/-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4d65c1c1-3b3e-4cb3-8578-0f09a6ae3054" testId="4c4ac217-0910-4c31-a3f4-3101105f0d91" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000237" startTime="2024-04-30T15:10:41.2647895-04:00" endTime="2024-04-30T15:10:41.2647895-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d65c1c1-3b3e-4cb3-8578-0f09a6ae3054">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17187ddb-69b1-4304-b435-8f2e9acdf4a1" testId="fcff4d0d-d081-2cbe-671a-bf5965e4775a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000271" startTime="2024-04-30T15:10:41.3018228-04:00" endTime="2024-04-30T15:10:41.3018228-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17187ddb-69b1-4304-b435-8f2e9acdf4a1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52a95755-228c-47ad-91c9-d4779fe8a50d" testId="068a10f6-68eb-5c13-fc33-ae4622bdd23f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3380185-04:00" endTime="2024-04-30T15:10:41.3380185-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52a95755-228c-47ad-91c9-d4779fe8a50d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50c77140-57a6-444d-8aac-9233e325739a" testId="ae443448-ec19-1d1e-fc1f-8824a6207db7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3139013-04:00" endTime="2024-04-30T15:10:41.3139013-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50c77140-57a6-444d-8aac-9233e325739a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51d96fa8-8c15-4914-88f7-d9113f318986" testId="3361b9af-c9be-eed8-5242-2bf37365f061" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;not True&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0003400" startTime="2024-04-30T15:10:41.2511446-04:00" endTime="2024-04-30T15:10:41.2511447-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51d96fa8-8c15-4914-88f7-d9113f318986" />
    <UnitTestResult executionId="0f49c796-70d2-43ae-a44e-6af68b794c39" testId="16a5f0c5-0903-615c-9dfe-609d3cf842c0" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.2747160-04:00" endTime="2024-04-30T15:10:41.2747160-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f49c796-70d2-43ae-a44e-6af68b794c39" />
    <UnitTestResult executionId="6ab45b0f-80e7-4a4b-a70b-5741607e7224" testId="d0c12fd7-65ca-dee6-f976-91ee3feef222" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000112" startTime="2024-04-30T15:10:41.2865533-04:00" endTime="2024-04-30T15:10:41.2865533-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ab45b0f-80e7-4a4b-a70b-5741607e7224">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abd7616e-121b-44e3-bdc0-f1ff47dbc506" testId="9e0a9498-7f25-51c6-b87d-0cf3094798f5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000139" startTime="2024-04-30T15:10:41.3128954-04:00" endTime="2024-04-30T15:10:41.3128954-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abd7616e-121b-44e3-bdc0-f1ff47dbc506">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68b2450a-3600-43c5-b38b-29fbc02b2f8f" testId="63b1ddbb-c2b4-8aec-b5a2-5094832b3850" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2652649-04:00" endTime="2024-04-30T15:10:41.2652649-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68b2450a-3600-43c5-b38b-29fbc02b2f8f" />
    <UnitTestResult executionId="0a2c921e-b757-40bb-bdb7-9a8f0234b1b4" testId="86b6fec7-d8f1-e243-d86f-a32c4401d439" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3158558-04:00" endTime="2024-04-30T15:10:41.3158558-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a2c921e-b757-40bb-bdb7-9a8f0234b1b4">
      <Output>
        <StdOut>Testing pair with explicit separator: '123 reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4d112282-ac64-4cdb-aa26-f269077157fc" testId="db141841-9d70-4914-320a-a2787dcc9e72" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000224" startTime="2024-04-30T15:10:41.2713739-04:00" endTime="2024-04-30T15:10:41.2713739-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d112282-ac64-4cdb-aa26-f269077157fc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c0a00f6-cb81-4820-95b3-f4e2a05f035c" testId="4129ab77-f880-3bfb-0cfe-f6525360faae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3317245-04:00" endTime="2024-04-30T15:10:41.3317246-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c0a00f6-cb81-4820-95b3-f4e2a05f035c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76611b22-cdaf-4fb3-99a8-c4fd4ab8bf87" testId="ca1e8384-2c1a-2e61-30c6-769a171f781d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3518689-04:00" endTime="2024-04-30T15:10:41.3518690-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76611b22-cdaf-4fb3-99a8-c4fd4ab8bf87">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c6c9b88-1e5d-42e8-a910-faee99d744d2" testId="80bc1e0e-3f35-015e-4382-15460e4a9226" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3039538-04:00" endTime="2024-04-30T15:10:41.3039539-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c6c9b88-1e5d-42e8-a910-faee99d744d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68a30c6c-8a15-465c-ae85-5cb41ba40139" testId="6300d988-30e0-379e-9b4a-e67ba56ff3d2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2772946-04:00" endTime="2024-04-30T15:10:41.2772947-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68a30c6c-8a15-465c-ae85-5cb41ba40139">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ac6bab5-370b-4217-99ae-053b57d01dcd" testId="589350d6-7e10-43bb-83dd-a978f8b1ddda" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3512373-04:00" endTime="2024-04-30T15:10:41.3512374-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ac6bab5-370b-4217-99ae-053b57d01dcd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5d28e94-070c-46fb-9b64-f50dec71fe07" testId="5168e817-aa8b-3209-e13a-7dfdc424e751" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3082587-04:00" endTime="2024-04-30T15:10:41.3082587-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5d28e94-070c-46fb-9b64-f50dec71fe07">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c541b95-9215-44a0-acb1-f76f657b743a" testId="f56ac008-0206-6f51-ef42-047186e37b79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3205051-04:00" endTime="2024-04-30T15:10:41.3205051-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c541b95-9215-44a0-acb1-f76f657b743a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7801e53b-4b8b-4dd3-a209-72f57ee3620f" testId="f97975f6-bbf7-8489-dc5b-cb61f5052b56" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2881334-04:00" endTime="2024-04-30T15:10:41.2881334-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7801e53b-4b8b-4dd3-a209-72f57ee3620f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53fbf22b-1353-4cf5-93c8-b7e8de35d433" testId="36d08b1c-bb0a-1be2-2941-c1ebfcd1a026" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000324" startTime="2024-04-30T15:10:41.2630386-04:00" endTime="2024-04-30T15:10:41.2630387-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53fbf22b-1353-4cf5-93c8-b7e8de35d433" />
    <UnitTestResult executionId="f12f4255-0a50-4cbf-9937-3e6246f21cda" testId="be7f7c13-7613-4c7c-d86d-f4a504acd7e1" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.2611939-04:00" endTime="2024-04-30T15:10:41.2611939-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f12f4255-0a50-4cbf-9937-3e6246f21cda" />
    <UnitTestResult executionId="2cf8595c-078b-4c49-acf7-e71ae88f6802" testId="952abe4a-6dce-9577-00cc-181d036e1c37" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2958160-04:00" endTime="2024-04-30T15:10:41.2958160-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cf8595c-078b-4c49-acf7-e71ae88f6802">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f0b909a-ca53-4beb-a39a-565ffa0eb849" testId="68f3c0ff-ba9d-d2e0-522c-097a5855fdb4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: OpenParenthesisToken, text: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3862544-04:00" endTime="2024-04-30T15:10:41.3862545-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f0b909a-ca53-4beb-a39a-565ffa0eb849">
      <Output>
        <StdOut>Expected kind: OpenParenthesisToken, Actual kind: OpenParenthesisToken&#xD;
Expected text: '(', Actual text: '('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9fe9552a-f0b7-4785-8c31-318ec803ed43" testId="90747cfe-56f7-9d8b-de50-2002695c643b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3535783-04:00" endTime="2024-04-30T15:10:41.3535783-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9fe9552a-f0b7-4785-8c31-318ec803ed43">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2d989dce-9192-449c-b500-5bd9e622e1ac" testId="7ca6dfcd-3a24-2580-23ed-e72fdffdbaac" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3049875-04:00" endTime="2024-04-30T15:10:41.3049875-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2d989dce-9192-449c-b500-5bd9e622e1ac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8ea6ede-3d97-4696-8bc7-2b6ecf406a54" testId="19a56280-872e-49ca-3cef-54276e1e5d2b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3757694-04:00" endTime="2024-04-30T15:10:41.3757694-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8ea6ede-3d97-4696-8bc7-2b6ecf406a54">
      <Output>
        <StdOut>Testing pair: '!=ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="218c6727-0d5a-457c-9d74-fff5b3a76992" testId="5aa10959-ca84-d909-9d02-dfcbec734b72" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3079290-04:00" endTime="2024-04-30T15:10:41.3079290-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="218c6727-0d5a-457c-9d74-fff5b3a76992">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e173e770-a8b5-48bb-b202-3fcf4a459754" testId="47580bb7-0de7-7d32-6dac-1c3e3659cd63" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.2855528-04:00" endTime="2024-04-30T15:10:41.2855528-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e173e770-a8b5-48bb-b202-3fcf4a459754">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddb7f0a1-d2cf-4001-9662-7ea445ed7bf5" testId="41e0f93c-3fba-83a7-76da-699d5d68434c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2998377-04:00" endTime="2024-04-30T15:10:41.2998377-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddb7f0a1-d2cf-4001-9662-7ea445ed7bf5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9834fc98-e5f1-4163-a91a-b85be6cbd361" testId="54799e39-be94-2e32-f4c9-a4b72c43e732" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3435264-04:00" endTime="2024-04-30T15:10:41.3435265-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9834fc98-e5f1-4163-a91a-b85be6cbd361">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c7cbd48-e57b-4d3c-8aaf-c9bb515fe53e" testId="546dbf2f-4c34-e290-f3e8-0d13bb1c1203" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000179" startTime="2024-04-30T15:10:41.2712934-04:00" endTime="2024-04-30T15:10:41.2712935-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c7cbd48-e57b-4d3c-8aaf-c9bb515fe53e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a401d9e-41ee-4a27-9b45-f596adfd5cf5" testId="1640f8c7-4a85-854d-2b2a-2cd750a6a971" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000213" startTime="2024-04-30T15:10:41.2537001-04:00" endTime="2024-04-30T15:10:41.2537002-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a401d9e-41ee-4a27-9b45-f596adfd5cf5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b31baa3-d645-4299-a6b1-79b46b4a3ab4" testId="0ecf0f39-dddc-ed06-5456-7bf9ede3157e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3178960-04:00" endTime="2024-04-30T15:10:41.3178961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b31baa3-d645-4299-a6b1-79b46b4a3ab4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2640b0cc-8eae-4c33-9efc-08b49094a7f2" testId="f42837ac-fbc2-3e95-cac3-9dc972fd1d52" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3272207-04:00" endTime="2024-04-30T15:10:41.3272208-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2640b0cc-8eae-4c33-9efc-08b49094a7f2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="96326201-b83f-4b05-afac-ca2995b546c8" testId="55e73abb-0ab4-736a-c45b-d442b1c22907" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3262221-04:00" endTime="2024-04-30T15:10:41.3262221-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96326201-b83f-4b05-afac-ca2995b546c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5bd8f275-ea63-40e8-8c84-4ccfeb2ee1f0" testId="1606ac60-72cc-d7fd-2b2d-003c6be36b18" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2559383-04:00" endTime="2024-04-30T15:10:41.2559384-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5bd8f275-ea63-40e8-8c84-4ccfeb2ee1f0" />
    <UnitTestResult executionId="563ff01f-4446-4b7f-8d0f-c823dab4b5f5" testId="791f42ac-ceb4-d480-c447-7f5de1b50d24" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3803724-04:00" endTime="2024-04-30T15:10:41.3803725-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="563ff01f-4446-4b7f-8d0f-c823dab4b5f5">
      <Output>
        <StdOut>Testing pair: '/=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="afcb84ed-dbff-4ccf-8874-8ec9486e76c8" testId="8d2c133e-ded4-e6f5-9fd3-b6af6fa39538" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2972374-04:00" endTime="2024-04-30T15:10:41.2972374-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="afcb84ed-dbff-4ccf-8874-8ec9486e76c8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44f33bee-3fa4-4b29-aac9-1d9fd7c04c4b" testId="0efb421c-910e-3b0c-6b6f-08ad405ddc0d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000150" startTime="2024-04-30T15:10:41.2943301-04:00" endTime="2024-04-30T15:10:41.2943301-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44f33bee-3fa4-4b29-aac9-1d9fd7c04c4b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8bf65fac-b83b-4462-ab5e-bb4dacd6d98b" testId="dba91c09-1b37-1c4f-1003-70017fed4b91" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000244" startTime="2024-04-30T15:10:41.2923657-04:00" endTime="2024-04-30T15:10:41.2923657-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bf65fac-b83b-4462-ab5e-bb4dacd6d98b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d68753c0-2cfe-44fa-9918-8bfb5f1422f6" testId="e1500a01-baea-8cb1-0fe7-9d30bf6bebf5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.2889276-04:00" endTime="2024-04-30T15:10:41.2889277-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d68753c0-2cfe-44fa-9918-8bfb5f1422f6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a +'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73f6eaf9-df74-41a6-9136-586fe5e636ff" testId="2963f91e-1890-45f5-2c07-007bc45b6f2a" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: StarToken)" computerName="BRUNO" duration="00:00:00.0000233" startTime="2024-04-30T15:10:41.2544568-04:00" endTime="2024-04-30T15:10:41.2544569-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73f6eaf9-df74-41a6-9136-586fe5e636ff" />
    <UnitTestResult executionId="0e03c42a-e614-48ea-92c2-2e708bfa7c0c" testId="1264ee1a-eea4-c783-0018-e3b5dbac7f6c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3341608-04:00" endTime="2024-04-30T15:10:41.3341609-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e03c42a-e614-48ea-92c2-2e708bfa7c0c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b7da761-1ee6-4bdd-b6ed-4a352e769bba" testId="815588a3-1276-cd58-3f2f-b608f1b78a2a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3844075-04:00" endTime="2024-04-30T15:10:41.3844076-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b7da761-1ee6-4bdd-b6ed-4a352e769bba">
      <Output>
        <StdOut>Testing pair: ')False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e1601f8-cfc8-4a1b-97ab-9797873d75b0" testId="f7562ff2-954a-169c-10ed-f6ed01beee7c" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2678937-04:00" endTime="2024-04-30T15:10:41.2678938-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e1601f8-cfc8-4a1b-97ab-9797873d75b0" />
    <UnitTestResult executionId="1203bd4e-fcf7-40d6-ba67-7f2aeab0ad7c" testId="3bfa1e0a-4a5e-96b6-a578-12e82ee3bd10" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3651820-04:00" endTime="2024-04-30T15:10:41.3651820-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1203bd4e-fcf7-40d6-ba67-7f2aeab0ad7c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e054eb3-d019-4760-a5ef-74e6e36a5a4e" testId="f24b1771-7f6f-238d-4fea-5d9126d6db5f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.3068648-04:00" endTime="2024-04-30T15:10:41.3068648-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e054eb3-d019-4760-a5ef-74e6e36a5a4e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e2d15a0b-7fa4-4436-98f8-f2be60a937df" testId="d8229abf-b486-4d78-bc37-754dd160b273" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000117" startTime="2024-04-30T15:10:41.3685307-04:00" endTime="2024-04-30T15:10:41.3685308-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2d15a0b-7fa4-4436-98f8-f2be60a937df">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26143974-3fd3-4633-81a1-56eee55bd3d9" testId="d1e4fd54-91e8-ed10-c3ad-6591151f0365" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: IsNotKeyword)" computerName="BRUNO" duration="00:00:00.0000152" startTime="2024-04-30T15:10:41.2625879-04:00" endTime="2024-04-30T15:10:41.2625880-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26143974-3fd3-4633-81a1-56eee55bd3d9" />
    <UnitTestResult executionId="e1dbf28c-5607-4224-bf19-ce6b8954b6ac" testId="ac0c5913-01f7-6553-acee-775e9bcf62be" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3313675-04:00" endTime="2024-04-30T15:10:41.3313676-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1dbf28c-5607-4224-bf19-ce6b8954b6ac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dddaead8-6179-4955-b8ea-1c27d0929d86" testId="99748bbf-6911-218d-7780-778804d80917" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2777117-04:00" endTime="2024-04-30T15:10:41.2777118-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dddaead8-6179-4955-b8ea-1c27d0929d86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf5add39-664f-4b5b-b1d2-cd5b3af34774" testId="63bf1a3f-fc2c-3250-bd2a-1d4ffa56bc3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.3670315-04:00" endTime="2024-04-30T15:10:41.3670316-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf5add39-664f-4b5b-b1d2-cd5b3af34774">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf7f2fb5-7a69-4bc4-976c-fda450fa83c9" testId="5a754e99-d0f5-e6a8-b1b5-63e33f0e3b57" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3013850-04:00" endTime="2024-04-30T15:10:41.3013851-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf7f2fb5-7a69-4bc4-976c-fda450fa83c9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d478765c-29ab-49f6-9ddb-ee302b3bd6a4" testId="aba73b2f-c55f-e1d4-7d28-f695b51fe172" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3363820-04:00" endTime="2024-04-30T15:10:41.3363821-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d478765c-29ab-49f6-9ddb-ee302b3bd6a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="653e51f2-98ca-4589-a18b-3ecfe2f497a6" testId="87dabd65-7cdc-8a7f-2bce-66cb02085a5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3723879-04:00" endTime="2024-04-30T15:10:41.3723880-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="653e51f2-98ca-4589-a18b-3ecfe2f497a6">
      <Output>
        <StdOut>Testing pair: '(!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58a359cf-d3a2-4e80-a2d9-b34d55ec901b" testId="14a0db9d-8e98-e05c-3063-7e4e2fed6c5b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3193905-04:00" endTime="2024-04-30T15:10:41.3193905-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58a359cf-d3a2-4e80-a2d9-b34d55ec901b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1af274bd-a87c-4020-88ee-c7c8ea9b8f3b" testId="775686ae-fab2-8cb1-98d3-874bd9eef7b5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3003234-04:00" endTime="2024-04-30T15:10:41.3003234-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1af274bd-a87c-4020-88ee-c7c8ea9b8f3b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d16d9ab0-b6bf-4adb-9f41-f6f281fdab22" testId="e26280af-38cc-36d8-d339-9ee0df7f0cd2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.3027436-04:00" endTime="2024-04-30T15:10:41.3027437-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d16d9ab0-b6bf-4adb-9f41-f6f281fdab22">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d49c0f92-8193-4cb5-90e7-ef4983121bbe" testId="f17390ee-c248-4f10-8f08-1516c130a9a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2952310-04:00" endTime="2024-04-30T15:10:41.2952311-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d49c0f92-8193-4cb5-90e7-ef4983121bbe">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="523bbe24-1fb7-4b74-b89a-780eafa2933d" testId="2cc4fedb-f54e-4317-85b8-9bffdce157f0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3547570-04:00" endTime="2024-04-30T15:10:41.3547571-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="523bbe24-1fb7-4b74-b89a-780eafa2933d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af5d6300-d566-404f-974c-2e4a380f320e" testId="8d522191-ab7a-bb2d-7a3f-2fe13f45b1e0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3343053-04:00" endTime="2024-04-30T15:10:41.3343053-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af5d6300-d566-404f-974c-2e4a380f320e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ed6c00f-c1e9-4e35-9a31-339f215c2b54" testId="b7574193-0919-4ce1-962c-5132655dc275" testName="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NotKeyword)" computerName="BRUNO" duration="00:00:00.0000067" startTime="2024-04-30T15:10:41.2511937-04:00" endTime="2024-04-30T15:10:41.2511938-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ed6c00f-c1e9-4e35-9a31-339f215c2b54" />
    <UnitTestResult executionId="11d763f3-cd9e-4b8e-8441-9b1311a1194a" testId="66ced87a-2120-00c6-032f-8f5ca9a61935" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3546557-04:00" endTime="2024-04-30T15:10:41.3546557-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11d763f3-cd9e-4b8e-8441-9b1311a1194a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="584081bb-20b6-49d2-8174-b4cc3ca172b7" testId="f2aa49c2-5936-a474-4665-dca01f5cfd05" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3682138-04:00" endTime="2024-04-30T15:10:41.3682138-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="584081bb-20b6-49d2-8174-b4cc3ca172b7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36d990e6-122b-4ab7-a28a-2ec8c2f403a5" testId="2790fa0d-dbe0-04b7-6591-285f180a87ad" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3771458-04:00" endTime="2024-04-30T15:10:41.3771459-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36d990e6-122b-4ab7-a28a-2ec8c2f403a5">
      <Output>
        <StdOut>Testing pair: '123)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e6da362-fd47-481b-a82f-e7bb849675e1" testId="9393af05-7595-1c9a-8549-0294d3109c38" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2918506-04:00" endTime="2024-04-30T15:10:41.2918507-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e6da362-fd47-481b-a82f-e7bb849675e1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="119ca13a-cac0-4451-872b-75f03a785076" testId="720ff017-13fa-11bf-dd2d-1eaf98b060f8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3265260-04:00" endTime="2024-04-30T15:10:41.3265261-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="119ca13a-cac0-4451-872b-75f03a785076">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c082a77a-0a7c-4ddc-b3e5-f063ca688b1e" testId="9f2c7bbb-7367-cbf3-abb7-bf71e63a8dce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.2841877-04:00" endTime="2024-04-30T15:10:41.2841878-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c082a77a-0a7c-4ddc-b3e5-f063ca688b1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="386c6780-1891-4980-9b9d-ddf5f170b2fd" testId="797e11c6-f1a2-a527-55e5-7c6c8c654291" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000075" startTime="2024-04-30T15:10:41.3359320-04:00" endTime="2024-04-30T15:10:41.3359320-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="386c6780-1891-4980-9b9d-ddf5f170b2fd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f038cf1-6b2f-4cc7-846c-5d49ca4bcd4f" testId="3aed3f76-a72d-fb68-f0fc-5a61b85a11ff" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.2942769-04:00" endTime="2024-04-30T15:10:41.2942770-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f038cf1-6b2f-4cc7-846c-5d49ca4bcd4f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0c1e667-f916-4c02-b1c4-9a1dcb7544d9" testId="25c86072-8c08-290d-06a0-37377681c084" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3189231-04:00" endTime="2024-04-30T15:10:41.3189232-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0c1e667-f916-4c02-b1c4-9a1dcb7544d9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6b2077f-8375-4720-af0b-f5eb173a371a" testId="ff6c67ff-3b84-4e83-91e8-ebf3594e190d" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: PlusToken)" computerName="BRUNO" duration="00:00:00.0000127" startTime="2024-04-30T15:10:41.2739190-04:00" endTime="2024-04-30T15:10:41.2739191-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6b2077f-8375-4720-af0b-f5eb173a371a" />
    <UnitTestResult executionId="a7b14dfb-d1df-4af5-9de1-722562e4822f" testId="c4cff9d4-ce90-962e-f388-057396bb65b0" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3316377-04:00" endTime="2024-04-30T15:10:41.3316378-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7b14dfb-d1df-4af5-9de1-722562e4822f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df51ac4d-0684-4176-a72e-dd483dbe6d30" testId="58c92ea8-c868-e8f8-b831-647186eb97f5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3508508-04:00" endTime="2024-04-30T15:10:41.3508509-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df51ac4d-0684-4176-a72e-dd483dbe6d30">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2db9f6de-e032-407c-aab5-db585b7875a2" testId="7fb864a4-5321-7af1-1669-0b0d5af576da" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2821130-04:00" endTime="2024-04-30T15:10:41.2821130-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2db9f6de-e032-407c-aab5-db585b7875a2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce257f4a-8cbc-4fac-a90b-585ab5b5ad5c" testId="c666040d-3c70-ae9a-231f-38f8ad37406e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3660823-04:00" endTime="2024-04-30T15:10:41.3660823-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce257f4a-8cbc-4fac-a90b-585ab5b5ad5c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e36a4925-a45b-49f0-a6f0-1824f80ea1d8" testId="f855d325-dbc1-cd31-965b-d0930491e263" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000103" startTime="2024-04-30T15:10:41.3501610-04:00" endTime="2024-04-30T15:10:41.3501611-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e36a4925-a45b-49f0-a6f0-1824f80ea1d8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79b68ecb-239b-4c5d-a4f2-9482030e8461" testId="fac57a1e-33b7-4a11-e8c3-b8d2559a1988" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000095" startTime="2024-04-30T15:10:41.2844800-04:00" endTime="2024-04-30T15:10:41.2844801-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79b68ecb-239b-4c5d-a4f2-9482030e8461">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="438adb58-ff68-40ac-bb87-c08a8dc63235" testId="35a49b1c-3f79-0752-4188-b1f1fb479193" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000072" startTime="2024-04-30T15:10:41.3773131-04:00" endTime="2024-04-30T15:10:41.3773132-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="438adb58-ff68-40ac-bb87-c08a8dc63235">
      <Output>
        <StdOut>Testing pair: '=is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10ef1ed1-36e5-485e-b989-6e2dc0d3de46" testId="ce28c4ac-90ca-fd17-d63a-a7dd7bf1405e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000158" startTime="2024-04-30T15:10:41.2983033-04:00" endTime="2024-04-30T15:10:41.2983034-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10ef1ed1-36e5-485e-b989-6e2dc0d3de46">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="89055f09-60a5-4e5a-8282-ed42f1211036" testId="ea07934d-794c-76b5-246c-9164b30beba1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.2948039-04:00" endTime="2024-04-30T15:10:41.2948039-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89055f09-60a5-4e5a-8282-ed42f1211036">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9d78785-b681-4d98-b12b-449d2c0110b5" testId="c4314f11-abf7-1ebe-026d-b131143fb8cf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2943837-04:00" endTime="2024-04-30T15:10:41.2943837-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9d78785-b681-4d98-b12b-449d2c0110b5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0efc2f4e-1ecf-4919-acf7-4e42b29d7c07" testId="09d55e5b-7f43-161b-9ba7-43ccc2bd98cf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000196" startTime="2024-04-30T15:10:41.2756013-04:00" endTime="2024-04-30T15:10:41.2756014-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0efc2f4e-1ecf-4919-acf7-4e42b29d7c07">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="150146ce-943c-4351-96c8-c138af6f968b" testId="b77690e6-fe3e-b99c-d733-66f3a0b85d85" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3762051-04:00" endTime="2024-04-30T15:10:41.3762052-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="150146ce-943c-4351-96c8-c138af6f968b">
      <Output>
        <StdOut>Testing pair: '*False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b26f9e6-1d35-4c2e-a09e-c17efe16147a" testId="b7337caf-7a27-2772-3805-d7038e85f2c6" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;12 / 4&quot;, expectedValue: 3)" computerName="BRUNO" duration="00:00:00.0020631" startTime="2024-04-30T15:10:41.2646613-04:00" endTime="2024-04-30T15:10:41.2646613-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b26f9e6-1d35-4c2e-a09e-c17efe16147a" />
    <UnitTestResult executionId="10ca9766-8844-4e35-8a41-68b94cf6cd0f" testId="1c8e3bad-b9e6-1cde-728d-2550dd3acc80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2665117-04:00" endTime="2024-04-30T15:10:41.2665117-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10ca9766-8844-4e35-8a41-68b94cf6cd0f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ccea8eb-0227-442d-91c3-74ac6df4f2f8" testId="67b30642-f8bb-5884-c374-3ffd61558c59" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000132" startTime="2024-04-30T15:10:41.3090055-04:00" endTime="2024-04-30T15:10:41.3090056-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ccea8eb-0227-442d-91c3-74ac6df4f2f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28d5a561-9f9d-4c57-ab5a-7eee0aff6253" testId="615b055e-5c37-4150-dbd3-4520d8053197" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3135205-04:00" endTime="2024-04-30T15:10:41.3135206-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28d5a561-9f9d-4c57-ab5a-7eee0aff6253">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f2bf45d-4040-4899-832b-117b13f6a3ed" testId="bcc3baba-fbaa-4efb-c57c-592a57cc1b9b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2660604-04:00" endTime="2024-04-30T15:10:41.2660605-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f2bf45d-4040-4899-832b-117b13f6a3ed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4e5d50aa-95a4-439b-922d-6acfe31c0d67" testId="527ae4fc-b32b-e169-880d-5e7ca94e3a7b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3069192-04:00" endTime="2024-04-30T15:10:41.3069193-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e5d50aa-95a4-439b-922d-6acfe31c0d67">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7dfd6d37-577f-459f-a1d1-69ed66a1c73a" testId="8ebd882c-a2b7-96e0-6cb0-fa894f919aad" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000184" startTime="2024-04-30T15:10:41.2688289-04:00" endTime="2024-04-30T15:10:41.2688289-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7dfd6d37-577f-459f-a1d1-69ed66a1c73a" />
    <UnitTestResult executionId="8902fcf0-2235-492c-b7d0-d4016f65020c" testId="d2d8c5f9-3644-b75c-f06d-cf01a2ef674a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000159" startTime="2024-04-30T15:10:41.2916906-04:00" endTime="2024-04-30T15:10:41.2916907-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8902fcf0-2235-492c-b7d0-d4016f65020c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="314020ca-930e-4d20-bd19-7c64687b9801" testId="a70b3424-56cf-202c-2096-92abb5bfd76c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3084465-04:00" endTime="2024-04-30T15:10:41.3084465-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="314020ca-930e-4d20-bd19-7c64687b9801">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42f0854b-9082-437c-b45e-12754d0d2fd0" testId="8963b6bd-8fe4-f455-701e-d5989d2cf8bd" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000129" startTime="2024-04-30T15:10:41.2869511-04:00" endTime="2024-04-30T15:10:41.2869512-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42f0854b-9082-437c-b45e-12754d0d2fd0">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14486e80-c251-4a08-937f-8643e5801025" testId="01586e9c-790c-6a7e-d1b1-f81bffdd5510" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000077" startTime="2024-04-30T15:10:41.3763482-04:00" endTime="2024-04-30T15:10:41.3763482-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14486e80-c251-4a08-937f-8643e5801025">
      <Output>
        <StdOut>Testing pair: '123!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8fa1048d-60a7-455a-a985-9bf99a04bfed" testId="e7e84321-08a7-a19e-e64c-72ea635d7950" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3327121-04:00" endTime="2024-04-30T15:10:41.3327121-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fa1048d-60a7-455a-a985-9bf99a04bfed">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e026bc9-96b7-4776-8122-94d043c87696" testId="6cac49b5-cc17-2ffc-c05b-4bcee9fc03d9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3362718-04:00" endTime="2024-04-30T15:10:41.3362718-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e026bc9-96b7-4776-8122-94d043c87696">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False ('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91884a5c-bf69-4581-8419-a8d6c5a66bd1" testId="50900259-7031-f383-6697-f81ab6ebc077" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.2826454-04:00" endTime="2024-04-30T15:10:41.2826454-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91884a5c-bf69-4581-8419-a8d6c5a66bd1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d240080-d34e-48ab-b4ff-e5c77a09ea74" testId="22bbc83f-d21e-1f73-594e-3b59d27ec7a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3767477-04:00" endTime="2024-04-30T15:10:41.3767477-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d240080-d34e-48ab-b4ff-e5c77a09ea74">
      <Output>
        <StdOut>Testing pair: '*True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80d16ffc-51c4-420a-a14b-34d6feb21393" testId="8798851a-fc16-bf8b-14b4-6aae81f50222" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3407325-04:00" endTime="2024-04-30T15:10:41.3407326-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80d16ffc-51c4-420a-a14b-34d6feb21393">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="19e41737-175b-401f-8912-1992dc478482" testId="58b21109-3f37-b86d-cfab-fa4ed648fffc" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000170" startTime="2024-04-30T15:10:41.3038311-04:00" endTime="2024-04-30T15:10:41.3038311-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19e41737-175b-401f-8912-1992dc478482">
      <Output>
        <StdOut>Testing pair with explicit separator: '123&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22671523-b317-4655-9025-3dd2147fb149" testId="3b29fad7-5e5d-57b7-18c1-103e2dba36b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.3813597-04:00" endTime="2024-04-30T15:10:41.3813598-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22671523-b317-4655-9025-3dd2147fb149">
      <Output>
        <StdOut>Testing pair: '*=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20da907c-9a25-4dc2-83a7-23e9ad77c890" testId="f2c4eea7-4ab3-232c-9c7b-3c688d4216df" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2724093-04:00" endTime="2024-04-30T15:10:41.2724093-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20da907c-9a25-4dc2-83a7-23e9ad77c890">
      <Output>
        <StdOut>Testing pair with explicit separator: '==	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6526c73-a8be-4145-a80e-5b2d5ecd0e79" testId="ed962006-ff3d-3c85-3d3c-689173bbda9a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3571887-04:00" endTime="2024-04-30T15:10:41.3571888-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6526c73-a8be-4145-a80e-5b2d5ecd0e79">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df596a15-a072-43ec-a538-3aa362624680" testId="0f0301ff-f0aa-4137-9672-217201ee2140" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000144" startTime="2024-04-30T15:10:41.3863882-04:00" endTime="2024-04-30T15:10:41.3863882-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df596a15-a072-43ec-a538-3aa362624680">
      <Output>
        <StdOut>Expected kind: IdentifierToken, Actual kind: IdentifierToken&#xD;
Expected text: 'a', Actual text: 'a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="603f6788-5d90-4262-b8a2-c538e8b0997e" testId="e7a8328a-4187-37b3-b8e0-a1d7cf90c7fb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3778202-04:00" endTime="2024-04-30T15:10:41.3778203-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="603f6788-5d90-4262-b8a2-c538e8b0997e">
      <Output>
        <StdOut>Testing pair: '-=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3564e4d6-4b56-4845-b0e1-25ec41784aa6" testId="8b5117f5-cb6f-fcfa-6a9f-ac621a1b49f4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3270489-04:00" endTime="2024-04-30T15:10:41.3270490-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3564e4d6-4b56-4845-b0e1-25ec41784aa6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01f91100-4108-4c95-a721-49afd918ed9f" testId="f1cfe891-e995-ef96-7df1-195cf19b88c8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.3748657-04:00" endTime="2024-04-30T15:10:41.3748657-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01f91100-4108-4c95-a721-49afd918ed9f">
      <Output>
        <StdOut>Testing pair: '=False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ada05501-a563-4176-b8af-0156139ff178" testId="9041a8ef-47b3-3922-ea9a-ee8b21be9e93" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.3837277-04:00" endTime="2024-04-30T15:10:41.3837277-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ada05501-a563-4176-b8af-0156139ff178">
      <Output>
        <StdOut>Testing pair: '/True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51177352-e63e-48e4-92ac-121f998d99f0" testId="576bc1fd-8ac5-2f75-2f02-7ae58b0a71f3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3286458-04:00" endTime="2024-04-30T15:10:41.3286459-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51177352-e63e-48e4-92ac-121f998d99f0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="793c01a3-2873-4188-bf2f-ea2f9cea605a" testId="284d5173-f3a6-7e92-e7db-585a93a8fc95" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.3802895-04:00" endTime="2024-04-30T15:10:41.3802895-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="793c01a3-2873-4188-bf2f-ea2f9cea605a">
      <Output>
        <StdOut>Testing pair: '*-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6b586731-8472-44a0-97de-1cff8095766c" testId="43bb04f0-57ad-d421-11ca-dab72d694243" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2825000-04:00" endTime="2024-04-30T15:10:41.2825001-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6b586731-8472-44a0-97de-1cff8095766c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5378f99a-edcc-4d69-9815-83f81b4c5a4c" testId="530abb26-baa4-6389-838f-ffc4bd44f207" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3190336-04:00" endTime="2024-04-30T15:10:41.3190336-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5378f99a-edcc-4d69-9815-83f81b4c5a4c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59b37d1c-951a-415d-b691-8c066191edcb" testId="9464a9dd-8a6f-e31a-9933-d439f6aa4e52" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2777753-04:00" endTime="2024-04-30T15:10:41.2777754-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59b37d1c-951a-415d-b691-8c066191edcb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c62c116-c7ed-4daf-8c5d-a53430a48f15" testId="7a17427d-9a51-29fd-701d-30bdfba7f030" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000154" startTime="2024-04-30T15:10:41.3347355-04:00" endTime="2024-04-30T15:10:41.3347356-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c62c116-c7ed-4daf-8c5d-a53430a48f15">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c58530d-f65c-4beb-830c-21b49a6ead60" testId="11488508-1f52-87b8-74e0-61a908c07fca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3338868-04:00" endTime="2024-04-30T15:10:41.3338868-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c58530d-f65c-4beb-830c-21b49a6ead60">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35ac925f-57f8-4b65-821c-438d3ebd2396" testId="7cc69a96-7dbd-689d-8201-919022b4aba1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3078188-04:00" endTime="2024-04-30T15:10:41.3078188-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35ac925f-57f8-4b65-821c-438d3ebd2396">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5094e1b-6aec-46af-9f2c-bf930277a819" testId="3e476daa-9dba-97c8-29fd-5beadc78b489" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2952859-04:00" endTime="2024-04-30T15:10:41.2952859-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5094e1b-6aec-46af-9f2c-bf930277a819">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d04b93b0-168d-4bc3-8f13-05cafd13ec79" testId="7e734908-cc69-897a-6187-6cd749f259ae" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000244" startTime="2024-04-30T15:10:41.3043056-04:00" endTime="2024-04-30T15:10:41.3043057-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d04b93b0-168d-4bc3-8f13-05cafd13ec79">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b24333d-0ceb-456a-ac73-d0b40670571f" testId="6bf90a50-0849-ccf3-46b4-2b469bd7a246" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000176" startTime="2024-04-30T15:10:41.3817591-04:00" endTime="2024-04-30T15:10:41.3817591-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b24333d-0ceb-456a-ac73-d0b40670571f">
      <Output>
        <StdOut>Testing pair: '(ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ebbabd4-31d2-4f20-af15-350e7c322e48" testId="2ce5c576-0118-6755-3cef-101645e2bcef" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3572423-04:00" endTime="2024-04-30T15:10:41.3572424-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ebbabd4-31d2-4f20-af15-350e7c322e48">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ba69ae6-317f-4682-b06a-8b3500bd16c3" testId="1b6d6cfa-cc38-2361-795b-ba120dd6cc73" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3269881-04:00" endTime="2024-04-30T15:10:41.3269881-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ba69ae6-317f-4682-b06a-8b3500bd16c3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53e69d53-8561-47e4-b79c-88a86a18f84d" testId="27dc3c2c-a8c7-7bd4-391f-ec452455f93a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: EqualsEqualsToken, text: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3851944-04:00" endTime="2024-04-30T15:10:41.3851945-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53e69d53-8561-47e4-b79c-88a86a18f84d">
      <Output>
        <StdOut>Expected kind: EqualsEqualsToken, Actual kind: EqualsEqualsToken&#xD;
Expected text: '==', Actual text: '=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47148c38-eba0-49a8-a694-164c70eee642" testId="fee15622-a411-246f-0c81-a60d1eaaa5f6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000185" startTime="2024-04-30T15:10:41.2698041-04:00" endTime="2024-04-30T15:10:41.2698042-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47148c38-eba0-49a8-a694-164c70eee642">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="19beabb5-5fcb-43ef-8e6c-7c2788bd2e47" testId="2772dddc-181f-e9a7-24fe-1b061f9ee0f6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3377731-04:00" endTime="2024-04-30T15:10:41.3377732-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19beabb5-5fcb-43ef-8e6c-7c2788bd2e47">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d874ab3f-7cec-4022-95dd-70a17f4332ca" testId="2d48139d-2efe-d8d4-b1ca-179d24d41fe4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3592382-04:00" endTime="2024-04-30T15:10:41.3592383-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d874ab3f-7cec-4022-95dd-70a17f4332ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32b806a6-84c4-42ba-80fd-8df467984d38" testId="218808bb-3dfa-02ca-30bb-89c860576546" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000137" startTime="2024-04-30T15:10:41.2621311-04:00" endTime="2024-04-30T15:10:41.2621311-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32b806a6-84c4-42ba-80fd-8df467984d38" />
    <UnitTestResult executionId="78076b68-e921-4c49-b520-f5b259fcb150" testId="53df6eb0-1c19-8ac4-03b4-2e6bf4081b40" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.2849312-04:00" endTime="2024-04-30T15:10:41.2849312-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78076b68-e921-4c49-b520-f5b259fcb150">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6adbfd4b-01bf-44e0-8640-db0c1eb3b28e" testId="d1aa2f39-b82d-5636-857f-39038a354264" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3119382-04:00" endTime="2024-04-30T15:10:41.3119383-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6adbfd4b-01bf-44e0-8640-db0c1eb3b28e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb7e44a7-9cb1-4225-b604-a6cfb8f7a14c" testId="7b87667b-8c5f-026e-b74b-6bf3ca35c414" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: StarToken)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.2739814-04:00" endTime="2024-04-30T15:10:41.2739814-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb7e44a7-9cb1-4225-b604-a6cfb8f7a14c" />
    <UnitTestResult executionId="3b33db7c-6225-4e7c-b3e0-c8c8613e263f" testId="99d600d6-24e5-6106-5ef7-c8dc03294f82" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3405318-04:00" endTime="2024-04-30T15:10:41.3405319-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b33db7c-6225-4e7c-b3e0-c8c8613e263f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ed830c29-6c67-4b16-9082-3f829416b6ca" testId="18c94b8d-9747-9775-b91e-7891fdacf594" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.2845892-04:00" endTime="2024-04-30T15:10:41.2845893-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ed830c29-6c67-4b16-9082-3f829416b6ca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc8a2efb-e7b7-4857-884d-786c34efd7a0" testId="dd853531-f6ac-1005-7638-fbd4ee5ec046" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000141" startTime="2024-04-30T15:10:41.3323691-04:00" endTime="2024-04-30T15:10:41.3323692-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc8a2efb-e7b7-4857-884d-786c34efd7a0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f122646f-d022-464f-8445-f1b235edfcbf" testId="611e7fad-047e-c8c3-d507-5acb671efeab" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: AndKeyword)" computerName="BRUNO" duration="00:00:00.0000165" startTime="2024-04-30T15:10:41.2661852-04:00" endTime="2024-04-30T15:10:41.2661852-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f122646f-d022-464f-8445-f1b235edfcbf" />
    <UnitTestResult executionId="3df7508c-0cb2-4cd9-9765-f4aa3a7f2005" testId="3c5f9831-e9e4-2657-ff43-677ba035e254" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3437566-04:00" endTime="2024-04-30T15:10:41.3437566-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3df7508c-0cb2-4cd9-9765-f4aa3a7f2005">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d063b104-b72c-4fc8-9da4-16b24aa21525" testId="48fb1e4b-ad2d-02cd-95ba-266b1f4c1404" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3348280-04:00" endTime="2024-04-30T15:10:41.3348280-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d063b104-b72c-4fc8-9da4-16b24aa21525">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d52595ca-bbc8-4e07-b301-772370e73936" testId="a9937e1e-695a-bc97-6b5e-324cb9404919" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000171" startTime="2024-04-30T15:10:41.2644101-04:00" endTime="2024-04-30T15:10:41.2644101-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d52595ca-bbc8-4e07-b301-772370e73936">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff34386f-f58a-4784-aa45-5550f41ef186" testId="0ecf2ff4-801d-b818-d5dd-25a109711ece" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2984112-04:00" endTime="2024-04-30T15:10:41.2984113-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff34386f-f58a-4784-aa45-5550f41ef186">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df3b1123-4453-433a-8b4c-64cb6886867e" testId="d4a3633f-999f-667c-424f-36b2672c8bac" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3354303-04:00" endTime="2024-04-30T15:10:41.3354304-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df3b1123-4453-433a-8b4c-64cb6886867e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61a2aba0-c672-4292-abb3-09862bf3e906" testId="95080d7e-1009-58aa-e521-57a8a5f8cfbe" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3479836-04:00" endTime="2024-04-30T15:10:41.3479837-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61a2aba0-c672-4292-abb3-09862bf3e906">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b019316-bff1-4727-8ae0-24b92589722d" testId="ab7f3817-3047-4817-973f-500cf80cb369" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000143" startTime="2024-04-30T15:10:41.3680398-04:00" endTime="2024-04-30T15:10:41.3680398-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b019316-bff1-4727-8ae0-24b92589722d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a5d3a11-d41e-4e03-a356-dc7da5132e6f" testId="e25591e7-af62-8c32-706d-2883a0efb30e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2972047-04:00" endTime="2024-04-30T15:10:41.2972047-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a5d3a11-d41e-4e03-a356-dc7da5132e6f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04f47714-f420-464c-94bf-cece39564bba" testId="f68d6c05-f9e5-c914-3a77-c9bec7671b47" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.2881073-04:00" endTime="2024-04-30T15:10:41.2881074-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04f47714-f420-464c-94bf-cece39564bba">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7bc99164-5244-4393-a77c-de48409f4a86" testId="c54bfdac-6801-acfc-cdca-5abf388ae3ed" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3246220-04:00" endTime="2024-04-30T15:10:41.3246220-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7bc99164-5244-4393-a77c-de48409f4a86">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2516fd21-9f74-45fc-a680-df492716a224" testId="07418d7e-91d3-dbff-d2dc-9c4545a34911" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2808924-04:00" endTime="2024-04-30T15:10:41.2808924-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2516fd21-9f74-45fc-a680-df492716a224">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d369602-ae58-4e98-81ad-da6f38ac5886" testId="d0c3d988-77a3-bf7e-e830-ee58de1ce132" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000183" startTime="2024-04-30T15:10:41.3042784-04:00" endTime="2024-04-30T15:10:41.3042784-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d369602-ae58-4e98-81ad-da6f38ac5886">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6e19380-6be0-4a7f-9f6c-58233d385ef2" testId="c19465b8-e88d-a62f-cbc4-45c0609111a3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3380721-04:00" endTime="2024-04-30T15:10:41.3380722-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6e19380-6be0-4a7f-9f6c-58233d385ef2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bad26625-86c5-4f5b-84ad-ab1e98db1d1e" testId="f5378f77-e924-b851-abd7-ab0158fe4d49" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.2550915-04:00" endTime="2024-04-30T15:10:41.2550916-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bad26625-86c5-4f5b-84ad-ab1e98db1d1e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce576137-6310-4265-9bf2-96a04aadde95" testId="a1567d10-e963-2ceb-4f22-9d2373bc7599" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2954312-04:00" endTime="2024-04-30T15:10:41.2954312-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce576137-6310-4265-9bf2-96a04aadde95">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97310311-4ffd-43ad-83a4-eeb7fdef3940" testId="f63738f4-a69e-536e-e5fe-dffe29e8bae5" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;False&quot;, expectedValue: False)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2738673-04:00" endTime="2024-04-30T15:10:41.2738674-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97310311-4ffd-43ad-83a4-eeb7fdef3940" />
    <UnitTestResult executionId="92d17155-5fb3-4daf-addf-d130231303d4" testId="6eee8cd5-4736-9a77-82cb-935761a7f0b4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3323427-04:00" endTime="2024-04-30T15:10:41.3323428-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92d17155-5fb3-4daf-addf-d130231303d4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0579c373-d44b-4a61-a554-11bc5a0f7704" testId="8422d324-07c2-3f1a-4a28-6c8ab5ce4ca3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3624128-04:00" endTime="2024-04-30T15:10:41.3624129-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0579c373-d44b-4a61-a554-11bc5a0f7704">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c0ed2a9-ee22-4abf-907f-f1a207763fca" testId="735448ca-47a1-4468-c70a-daa48ab13cfa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2916308-04:00" endTime="2024-04-30T15:10:41.2916309-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c0ed2a9-ee22-4abf-907f-f1a207763fca">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14d17cb3-1753-4634-be80-960299cdfd0d" testId="b009ec2e-05ea-4420-8f89-1ba8dd8ad4ca" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2761676-04:00" endTime="2024-04-30T15:10:41.2761677-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14d17cb3-1753-4634-be80-960299cdfd0d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b09d5bcb-998d-49a7-951a-9873c72972c3" testId="a137678b-3ccd-02ac-03ea-39b886c0d291" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2642506-04:00" endTime="2024-04-30T15:10:41.2642506-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b09d5bcb-998d-49a7-951a-9873c72972c3" />
    <UnitTestResult executionId="1da97740-d0b4-4f66-a954-9793f5ccc62f" testId="dd12dbbd-a97e-52ad-cf1d-cf02da770442" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.2854390-04:00" endTime="2024-04-30T15:10:41.2854390-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1da97740-d0b4-4f66-a954-9793f5ccc62f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or ='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2cda6e1e-88da-4fca-ac03-8d74307b206a" testId="fdcfbe97-df7e-bb35-4151-7108627cf446" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3055451-04:00" endTime="2024-04-30T15:10:41.3055452-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cda6e1e-88da-4fca-ac03-8d74307b206a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c967f045-6fb8-4f75-89ee-018c4495df8a" testId="578ee0a5-be03-ca09-3f70-c5737802e85b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000128" startTime="2024-04-30T15:10:41.3260495-04:00" endTime="2024-04-30T15:10:41.3260496-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c967f045-6fb8-4f75-89ee-018c4495df8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56c6121b-3976-492e-bd16-19174fbdb36b" testId="210f6e22-ba1c-e98e-5dd6-be3648d84165" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3328215-04:00" endTime="2024-04-30T15:10:41.3328216-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56c6121b-3976-492e-bd16-19174fbdb36b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	!='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56ff88c2-8589-407d-a076-fe22a7565e41" testId="5b4c9925-032d-6377-7b2c-c642ae9c4f80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3606856-04:00" endTime="2024-04-30T15:10:41.3606856-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56ff88c2-8589-407d-a076-fe22a7565e41">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c86946ef-5100-402c-9d57-867c10bd700d" testId="f0b0a1e9-da05-1823-3adf-18acfe1ea997" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3359583-04:00" endTime="2024-04-30T15:10:41.3359584-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c86946ef-5100-402c-9d57-867c10bd700d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="87364003-5d8e-409b-9056-60ab9e0bf7b2" testId="8ff53185-a489-c2c7-2a49-5350f1f99fd6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3252056-04:00" endTime="2024-04-30T15:10:41.3252056-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87364003-5d8e-409b-9056-60ab9e0bf7b2">
      <Output>
        <StdOut>Testing pair with explicit separator: '123   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f356bddd-697e-4409-a1d8-1c8c7ec25a22" testId="2ea3438f-056a-3872-16f6-e23ae4279cce" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2728732-04:00" endTime="2024-04-30T15:10:41.2728733-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f356bddd-697e-4409-a1d8-1c8c7ec25a22">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="826516cb-6f29-4251-8693-40e5990bbd1c" testId="9ea1ae3d-0a97-dbcd-06f5-80272c5f5f80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3130620-04:00" endTime="2024-04-30T15:10:41.3130620-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="826516cb-6f29-4251-8693-40e5990bbd1c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc056a46-3a1f-47df-b91b-adbbe1e0d610" testId="10c5cbdd-ac7b-03dc-7ea3-9b9f703e7948" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3535222-04:00" endTime="2024-04-30T15:10:41.3535223-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc056a46-3a1f-47df-b91b-adbbe1e0d610">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df27ec9b-afd4-4c5b-bd80-1fd2230e2df7" testId="f0efbc1e-13e1-e677-e6fe-e66f2490824c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3321956-04:00" endTime="2024-04-30T15:10:41.3321957-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df27ec9b-afd4-4c5b-bd80-1fd2230e2df7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50804691-5b81-4e19-be2c-78ba67f872b7" testId="2b63c67b-1f6e-8e27-86f9-861cb2cd75d1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2821668-04:00" endTime="2024-04-30T15:10:41.2821669-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50804691-5b81-4e19-be2c-78ba67f872b7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c811ba9e-b9c0-4c3d-acb6-78ebcc2b4610" testId="11ae4c3c-a8db-d2a7-8fd1-218a71aff984" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.3843076-04:00" endTime="2024-04-30T15:10:41.3843076-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c811ba9e-b9c0-4c3d-acb6-78ebcc2b4610">
      <Output>
        <StdOut>Testing pair: '(or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0fb468e-69ec-49b4-9c5f-c1d01bca9f7f" testId="aaadbd51-b37e-23fe-dfb6-67360ea79bd1" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000134" startTime="2024-04-30T15:10:41.3311677-04:00" endTime="2024-04-30T15:10:41.3311677-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0fb468e-69ec-49b4-9c5f-c1d01bca9f7f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17b2d97c-dd36-488c-a889-9afeb3ba780f" testId="8b4dc3b9-8bcb-83d6-862b-e97db610cee2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2947472-04:00" endTime="2024-04-30T15:10:41.2947473-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17b2d97c-dd36-488c-a889-9afeb3ba780f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65296678-3675-4239-9d20-7b1000f1f415" testId="65375472-8cac-6004-4685-18d23af2b064" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000222" startTime="2024-04-30T15:10:41.2721911-04:00" endTime="2024-04-30T15:10:41.2721912-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65296678-3675-4239-9d20-7b1000f1f415" />
    <UnitTestResult executionId="6e4f3d96-7ce2-4737-8552-f183b170c8ac" testId="cc188d95-c2ae-ec37-3455-8da90edbbeee" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.3007697-04:00" endTime="2024-04-30T15:10:41.3007697-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e4f3d96-7ce2-4737-8552-f183b170c8ac">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76b7481e-9d33-4bd9-93b8-fc3bac43e000" testId="1ac9584d-4afd-14a6-d7bd-d80a13d8d18d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000178" startTime="2024-04-30T15:10:41.2941934-04:00" endTime="2024-04-30T15:10:41.2941935-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76b7481e-9d33-4bd9-93b8-fc3bac43e000">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="205ecacb-f070-4334-95bf-82b488b03fe4" testId="24d1f141-7886-cdf2-2ec4-62cf846b5a92" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3525718-04:00" endTime="2024-04-30T15:10:41.3525719-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="205ecacb-f070-4334-95bf-82b488b03fe4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ae7caeca-b74b-4acf-a7a5-003d27145cbd" testId="ec23b259-a8f2-7566-6776-62f62d740583" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2545714-04:00" endTime="2024-04-30T15:10:41.2545715-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae7caeca-b74b-4acf-a7a5-003d27145cbd">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;
and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c99e9345-53f2-43f6-abb8-b96c5b1aa358" testId="d94c3083-d197-e212-7b31-59740717e656" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3286996-04:00" endTime="2024-04-30T15:10:41.3286996-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c99e9345-53f2-43f6-abb8-b96c5b1aa358">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58dd0afd-3908-4b11-aa54-cde4e39130eb" testId="ef3c64cc-812f-5128-6cd4-964f948a2537" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3517776-04:00" endTime="2024-04-30T15:10:41.3517777-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58dd0afd-3908-4b11-aa54-cde4e39130eb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="957f00ec-8a33-464c-8b93-8948d2a60faa" testId="d0403e92-9117-6d84-f46a-addc9ea43ccf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000202" startTime="2024-04-30T15:10:41.2635499-04:00" endTime="2024-04-30T15:10:41.2635499-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="957f00ec-8a33-464c-8b93-8948d2a60faa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b906e7ed-1ca2-467b-b6ce-99e91f0ab56a" testId="cb59336f-121b-0882-b66d-7eefeb3a7517" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000151" startTime="2024-04-30T15:10:41.3047337-04:00" endTime="2024-04-30T15:10:41.3047338-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b906e7ed-1ca2-467b-b6ce-99e91f0ab56a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="479f188f-bc14-4dc7-b316-7b12f53e23bd" testId="9f7a4a9f-115d-596f-d650-eea1a84e0fa9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.3805092-04:00" endTime="2024-04-30T15:10:41.3805093-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="479f188f-bc14-4dc7-b316-7b12f53e23bd">
      <Output>
        <StdOut>Testing pair: '=not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e365cffd-5970-49bb-93d6-2f4cb46d778b" testId="02f1db6b-a503-ecec-bd38-204c63d5c68f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3103642-04:00" endTime="2024-04-30T15:10:41.3103642-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e365cffd-5970-49bb-93d6-2f4cb46d778b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d45f0ad6-c661-485c-8d35-e8fa04ba3f44" testId="9ce8d2e9-88c9-3c5d-5f64-0ee4a7cb9f6b" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2684731-04:00" endTime="2024-04-30T15:10:41.2684731-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d45f0ad6-c661-485c-8d35-e8fa04ba3f44" />
    <UnitTestResult executionId="ea83d867-7f21-491e-9a95-009dd22c5ecf" testId="877933a1-7973-5c53-3310-8c1c443b4830" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000119" startTime="2024-04-30T15:10:41.3691224-04:00" endTime="2024-04-30T15:10:41.3691224-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea83d867-7f21-491e-9a95-009dd22c5ecf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0f7f1c8-d30b-4378-bc46-6b02aa8b49a6" testId="18effbe6-662d-7a50-8c7a-2b49148e34bb" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000193" startTime="2024-04-30T15:10:41.2561615-04:00" endTime="2024-04-30T15:10:41.2561616-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0f7f1c8-d30b-4378-bc46-6b02aa8b49a6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf13d0c6-27a9-4cd6-8d83-4876c265e109" testId="bf05d999-7dfe-c027-bd92-5bc4ffe1a55e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3438079-04:00" endTime="2024-04-30T15:10:41.3438080-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf13d0c6-27a9-4cd6-8d83-4876c265e109">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80e97190-8ae5-411b-9a12-a8e5afe343b3" testId="0f3ea1a5-bed4-1b21-f15d-9dc837ac21b4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.2917461-04:00" endTime="2024-04-30T15:10:41.2917461-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80e97190-8ae5-411b-9a12-a8e5afe343b3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley *'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81511fe2-35d9-4371-9203-ee0582903f36" testId="68888a81-ca11-a349-b000-6bfcb2f09535" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3130091-04:00" endTime="2024-04-30T15:10:41.3130091-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81511fe2-35d9-4371-9203-ee0582903f36">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51c154b9-1294-4ca7-ac9b-d549b86b8fc3" testId="b36ad573-889f-11da-5d89-084e8740cc3b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000157" startTime="2024-04-30T15:10:41.3029112-04:00" endTime="2024-04-30T15:10:41.3029112-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51c154b9-1294-4ca7-ac9b-d549b86b8fc3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d07fd49e-1dab-4b75-badf-d4ad8bc3325a" testId="1630493f-2047-380f-4f32-ec9c56ec784d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000079" startTime="2024-04-30T15:10:41.3415244-04:00" endTime="2024-04-30T15:10:41.3415245-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d07fd49e-1dab-4b75-badf-d4ad8bc3325a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b73c14f-8dc0-48ab-ab13-3cb576afb8dc" testId="a286f8ea-8a03-982f-b207-05580a9ef8e2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2849903-04:00" endTime="2024-04-30T15:10:41.2849904-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b73c14f-8dc0-48ab-ab13-3cb576afb8dc">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7da12e06-57c2-4f40-9c5d-0a881929c767" testId="4eb5bdaf-4e2b-55dc-3592-444673729556" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.2816434-04:00" endTime="2024-04-30T15:10:41.2816434-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7da12e06-57c2-4f40-9c5d-0a881929c767">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d62f4e48-ead8-4391-b7f1-0291872cc9fa" testId="f90de586-f0f7-7bb7-7e7d-66ebc740e111" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3125453-04:00" endTime="2024-04-30T15:10:41.3125454-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d62f4e48-ead8-4391-b7f1-0291872cc9fa">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True )'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8592f4fd-8a79-42b5-8ed2-e93885a1da6e" testId="0bffbf7c-ca22-bc86-0525-e7b110bfe015" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2854710-04:00" endTime="2024-04-30T15:10:41.2854710-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8592f4fd-8a79-42b5-8ed2-e93885a1da6e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or	-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a1ab29ae-31f8-4645-b265-92d6ee0a4685" testId="49ca3500-bd8a-a55f-81c7-7a5dc1b06c17" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3275532-04:00" endTime="2024-04-30T15:10:41.3275532-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1ab29ae-31f8-4645-b265-92d6ee0a4685">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3971fcd0-dd26-4c41-b594-7a10769e3eeb" testId="b2652e89-08ec-3257-411c-b9e708e89df2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3545415-04:00" endTime="2024-04-30T15:10:41.3545415-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3971fcd0-dd26-4c41-b594-7a10769e3eeb">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is   /'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e51e158-d7d3-43ce-a480-eb7e137e20d2" testId="a1c516af-1cc3-4b7c-b57c-30ff65703d39" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3100344-04:00" endTime="2024-04-30T15:10:41.3100345-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e51e158-d7d3-43ce-a480-eb7e137e20d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df5b8c62-33b1-4180-bcb7-86d29c765479" testId="7e636c7a-6e90-954d-02f9-a4c845d8b00a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000169" startTime="2024-04-30T15:10:41.3033897-04:00" endTime="2024-04-30T15:10:41.3033897-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df5b8c62-33b1-4180-bcb7-86d29c765479">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6b80f7b-01c0-4cc8-82a2-d49ea392ee2c" testId="36cf3a62-40f9-21b7-1392-1e358cd01b86" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: IsKeyword)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2661508-04:00" endTime="2024-04-30T15:10:41.2661508-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6b80f7b-01c0-4cc8-82a2-d49ea392ee2c" />
    <UnitTestResult executionId="3bca7cde-45c4-41ff-8961-9f357d0626a3" testId="88d7f173-b5c5-e236-ab09-126d31465b9d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000163" startTime="2024-04-30T15:10:41.3627961-04:00" endTime="2024-04-30T15:10:41.3627962-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3bca7cde-45c4-41ff-8961-9f357d0626a3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="409ad1b3-472c-4f39-b801-ef8ce7741991" testId="ab07f154-65a2-fdbc-3f53-a6b82956dbb8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3489715-04:00" endTime="2024-04-30T15:10:41.3489716-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="409ad1b3-472c-4f39-b801-ef8ce7741991">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c580124d-4c54-4915-b65c-d4e1c7ec181b" testId="8951f6a1-cf92-62a9-dda8-25a185bbf2b9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000229" startTime="2024-04-30T15:10:41.2938511-04:00" endTime="2024-04-30T15:10:41.2938511-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c580124d-4c54-4915-b65c-d4e1c7ec181b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6bd3368-62ba-4dd9-82a6-187b70b39771" testId="6f84c92a-3a02-4087-04fe-44c5e6c6920a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.2776583-04:00" endTime="2024-04-30T15:10:41.2776584-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6bd3368-62ba-4dd9-82a6-187b70b39771">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23b67532-58ce-4d70-8c84-da5c845b1a2b" testId="1272676c-ac90-6e3c-6f29-c30dd512a079" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3353224-04:00" endTime="2024-04-30T15:10:41.3353225-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23b67532-58ce-4d70-8c84-da5c845b1a2b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="216b83e2-f611-48e1-83c1-e2b139dd8003" testId="41e9b880-0ee8-154e-677e-70d9328b8ed8" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3333060-04:00" endTime="2024-04-30T15:10:41.3333061-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="216b83e2-f611-48e1-83c1-e2b139dd8003">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b9d2744-0919-44fb-8988-3c6e4c866106" testId="d2420bfa-f8fc-7e3c-e2f6-b97691f3164e" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: EqualsEqualsToken)" computerName="BRUNO" duration="00:00:00.0000213" startTime="2024-04-30T15:10:41.2674890-04:00" endTime="2024-04-30T15:10:41.2674890-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b9d2744-0919-44fb-8988-3c6e4c866106" />
    <UnitTestResult executionId="ca43961b-b0b3-4917-9f5f-2290db68f89b" testId="7e2f50f5-727f-42ae-2274-7a9a8d3b4a4e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3140400-04:00" endTime="2024-04-30T15:10:41.3140401-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca43961b-b0b3-4917-9f5f-2290db68f89b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68029a39-becb-4062-97f3-4b876c068901" testId="5c40e43c-ac10-9251-ad7b-d9eb2079a1c9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000104" startTime="2024-04-30T15:10:41.3144819-04:00" endTime="2024-04-30T15:10:41.3144820-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68029a39-becb-4062-97f3-4b876c068901">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e58c3da2-33ae-4cc3-b6d8-94d220ca7563" testId="56b6c9a8-497e-3e29-1361-66f6fe2d0bc4" testName="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: OrKeyword)" computerName="BRUNO" duration="00:00:00.0000118" startTime="2024-04-30T15:10:41.2733681-04:00" endTime="2024-04-30T15:10:41.2733681-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e58c3da2-33ae-4cc3-b6d8-94d220ca7563" />
    <UnitTestResult executionId="e22cc8fc-3a48-418f-b2ab-8deec7032457" testId="905374de-5ee6-b8e8-cf19-58986d68be62" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.2870061-04:00" endTime="2024-04-30T15:10:41.2870062-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e22cc8fc-3a48-418f-b2ab-8deec7032457">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc0e6b3f-c8af-45c6-95df-4a21b8b5fe8a" testId="a4cf1fee-5d4b-bb41-588d-21705185f386" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2900773-04:00" endTime="2024-04-30T15:10:41.2900774-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc0e6b3f-c8af-45c6-95df-4a21b8b5fe8a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14f10ea2-36c6-455f-af77-f8e562b34844" testId="49e3a4fe-2f55-6551-73a5-a3f0b39efed2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000111" startTime="2024-04-30T15:10:41.3104183-04:00" endTime="2024-04-30T15:10:41.3104183-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14f10ea2-36c6-455f-af77-f8e562b34844">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c45a4996-1021-476b-b755-6c5d8259b514" testId="42a81f3e-4855-438f-c2a2-7cd2b0b28ce2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3140740-04:00" endTime="2024-04-30T15:10:41.3140740-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c45a4996-1021-476b-b755-6c5d8259b514">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c948974e-e615-44eb-aadb-aacfb423bbb7" testId="bcb015bd-910f-52aa-cad3-2aaddbf3c52b" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3362384-04:00" endTime="2024-04-30T15:10:41.3362385-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c948974e-e615-44eb-aadb-aacfb423bbb7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a3c1a8b-9393-40f3-86d1-2be69e8d6563" testId="1f21a086-0895-dfc2-3c39-f277da674f43" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3556529-04:00" endTime="2024-04-30T15:10:41.3556529-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a3c1a8b-9393-40f3-86d1-2be69e8d6563">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d561316a-e4e5-4a88-9128-280e9be51f86" testId="bec4dbef-ebc0-96bc-14d4-d6fdb26c8215" testName="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 10) * 2&quot;, expectedValue: 20)" computerName="BRUNO" duration="00:00:00.0000201" startTime="2024-04-30T15:10:41.2733420-04:00" endTime="2024-04-30T15:10:41.2733421-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d561316a-e4e5-4a88-9128-280e9be51f86" />
    <UnitTestResult executionId="37939312-8708-4362-9e96-bc20467a05d7" testId="7dea1c08-3c63-245b-1697-1d815dd60b2f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3615882-04:00" endTime="2024-04-30T15:10:41.3615882-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37939312-8708-4362-9e96-bc20467a05d7">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="640916b3-1d6d-4ff4-9074-a16ccc481cf8" testId="a15fdb8a-8b2e-0a07-8ba6-dea6dcbdcda2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2972734-04:00" endTime="2024-04-30T15:10:41.2972735-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="640916b3-1d6d-4ff4-9074-a16ccc481cf8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1d326e3b-fa19-4fa5-a575-88a913241905" testId="9b90d30b-53aa-f75d-5055-caac21b4504f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000162" startTime="2024-04-30T15:10:41.2751610-04:00" endTime="2024-04-30T15:10:41.2751611-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d326e3b-fa19-4fa5-a575-88a913241905">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e8be15d-3b5f-4033-9dff-71dd9c6ead9e" testId="691d4d8b-d940-61dd-e201-77202433c358" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000131" startTime="2024-04-30T15:10:41.3828027-04:00" endTime="2024-04-30T15:10:41.3828027-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e8be15d-3b5f-4033-9dff-71dd9c6ead9e">
      <Output>
        <StdOut>Testing pair: '==('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e902b24-6e4d-4fa7-b9e8-c3f2fbc081e2" testId="706aff9c-dd8e-5ce4-bf5b-204fc2a78489" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000156" startTime="2024-04-30T15:10:41.2994493-04:00" endTime="2024-04-30T15:10:41.2994494-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e902b24-6e4d-4fa7-b9e8-c3f2fbc081e2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0df75240-b4bb-4146-b196-dbe656a9ba2b" testId="2ae6e9dd-07b7-0461-c652-c50b2736e042" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2907355-04:00" endTime="2024-04-30T15:10:41.2907355-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0df75240-b4bb-4146-b196-dbe656a9ba2b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and   !='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="861fdda3-2a11-4e80-bf92-e33f85e014d1" testId="5aa26f02-d133-6cc7-7683-f824f0e3c12f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3160323-04:00" endTime="2024-04-30T15:10:41.3160323-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="861fdda3-2a11-4e80-bf92-e33f85e014d1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67da3369-e7df-4ee2-90a9-f20810654753" testId="e5f8ff45-b6a6-7ca9-7fd9-76cc552fa241" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3154831-04:00" endTime="2024-04-30T15:10:41.3154832-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67da3369-e7df-4ee2-90a9-f20810654753">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8437816-b881-4fd2-9812-4a2456879ff4" testId="3d88accf-5b21-1ee2-54bc-0357b8edfec2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000174" startTime="2024-04-30T15:10:41.3014657-04:00" endTime="2024-04-30T15:10:41.3014658-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8437816-b881-4fd2-9812-4a2456879ff4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a
123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20bd5317-61f7-4151-a7b0-ffe7583a00e1" testId="ecd774ab-3b6b-feed-3f03-8ef88e0dffff" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000241" startTime="2024-04-30T15:10:41.2936438-04:00" endTime="2024-04-30T15:10:41.2936438-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20bd5317-61f7-4151-a7b0-ffe7583a00e1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a9ee90f3-03ef-4918-aa7e-a577fceb2714" testId="d1cce6a0-ef57-222e-45f0-bf21b6b67406" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3259868-04:00" endTime="2024-04-30T15:10:41.3259869-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9ee90f3-03ef-4918-aa7e-a577fceb2714">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f02a3d6-e0c4-4a42-bfb2-a6185ad4b667" testId="687b3502-9e6a-9efc-154f-922d2cca5791" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000078" startTime="2024-04-30T15:10:41.3453382-04:00" endTime="2024-04-30T15:10:41.3453383-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f02a3d6-e0c4-4a42-bfb2-a6185ad4b667">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8898022-43d3-4227-9a57-42440294ede9" testId="1b086221-8744-e546-760f-a12769cc2c94" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000076" startTime="2024-04-30T15:10:41.3088905-04:00" endTime="2024-04-30T15:10:41.3088905-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8898022-43d3-4227-9a57-42440294ede9">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ae21cb9-5140-4bd0-8c52-705a6a36a914" testId="b48c1cde-ff79-b262-d23b-2c472fb4d5ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000190" startTime="2024-04-30T15:10:41.2694140-04:00" endTime="2024-04-30T15:10:41.2694140-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ae21cb9-5140-4bd0-8c52-705a6a36a914">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddc8a37a-229a-4af4-bd87-713acfdba812" testId="9efbc034-7bcc-33b7-502b-48e6be953a44" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3323162-04:00" endTime="2024-04-30T15:10:41.3323163-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddc8a37a-229a-4af4-bd87-713acfdba812">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8b18cd4-bb04-4624-beba-8eb6fa11d1a0" testId="ae59a19e-b7e5-1e1c-787d-3002506b4ef2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000082" startTime="2024-04-30T15:10:41.3644586-04:00" endTime="2024-04-30T15:10:41.3644587-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8b18cd4-bb04-4624-beba-8eb6fa11d1a0">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True	is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd07e86f-b7e9-4a2f-adc5-c057c34d8a8c" testId="f0a8736b-c661-2693-d4b3-56a6c89fc54e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000227" startTime="2024-04-30T15:10:41.2675501-04:00" endTime="2024-04-30T15:10:41.2675502-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd07e86f-b7e9-4a2f-adc5-c057c34d8a8c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8073358b-f5a8-48f3-a6bd-22b7ebfa5dd5" testId="4516515e-40ff-e57e-862d-83f2d090dcb4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3154569-04:00" endTime="2024-04-30T15:10:41.3154570-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8073358b-f5a8-48f3-a6bd-22b7ebfa5dd5">
      <Output>
        <StdOut>Testing pair with explicit separator: '123   ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2121bbfe-f8af-472d-bf42-976bd49ae7b8" testId="f265c629-f9a5-10ee-ad96-8ff2d7867fe4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.3017960-04:00" endTime="2024-04-30T15:10:41.3017961-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2121bbfe-f8af-472d-bf42-976bd49ae7b8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0edd9e55-2246-4497-b95b-a57f9d982b36" testId="ae3f38ec-f30b-0cdd-db91-d7e3eec08d99" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000160" startTime="2024-04-30T15:10:41.2982768-04:00" endTime="2024-04-30T15:10:41.2982769-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0edd9e55-2246-4497-b95b-a57f9d982b36">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4c420e96-a241-4f4d-a6ca-f51d819e36e2" testId="c74e4f3c-9610-9063-7a98-f2ad25290514" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000153" startTime="2024-04-30T15:10:41.2962817-04:00" endTime="2024-04-30T15:10:41.2962817-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c420e96-a241-4f4d-a6ca-f51d819e36e2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80dd93ea-0e7b-4566-a5c8-2e5f9b2200f5" testId="904ebdc9-31be-da35-c276-af88d4ffa9b7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3155094-04:00" endTime="2024-04-30T15:10:41.3155094-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80dd93ea-0e7b-4566-a5c8-2e5f9b2200f5">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b70e01d-73ac-4434-98f0-fe9a5971c92e" testId="770858a8-6709-fa27-4697-79147472553c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000149" startTime="2024-04-30T15:10:41.3843572-04:00" endTime="2024-04-30T15:10:41.3843573-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b70e01d-73ac-4434-98f0-fe9a5971c92e">
      <Output>
        <StdOut>Testing pair: '-('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c678eb5-48e5-443d-85b1-3fde11d440a7" testId="13d6dbb4-682c-c3f2-16b0-9ac3f68f6b72" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000110" startTime="2024-04-30T15:10:41.3748921-04:00" endTime="2024-04-30T15:10:41.3748921-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c678eb5-48e5-443d-85b1-3fde11d440a7">
      <Output>
        <StdOut>Testing pair: '+is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc4f359e-8fb3-4ac5-9223-2a415c4e1813" testId="f63f1e41-ddc5-68ea-d736-804cccaca408" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.3616921-04:00" endTime="2024-04-30T15:10:41.3616922-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc4f359e-8fb3-4ac5-9223-2a415c4e1813">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff21f1a5-aab0-415d-a6bd-878535cd6f52" testId="9d3d078a-26f1-1ddf-7275-db04985dc1b6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000097" startTime="2024-04-30T15:10:41.2830815-04:00" endTime="2024-04-30T15:10:41.2830815-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff21f1a5-aab0-415d-a6bd-878535cd6f52">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="940d544f-68c0-44d9-a85a-768275f81d71" testId="7a5519ec-b4e2-1641-103d-15ff0f509796" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3700290-04:00" endTime="2024-04-30T15:10:41.3700291-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="940d544f-68c0-44d9-a85a-768275f81d71">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not 123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e0a6ddda-5f57-449d-8b4a-95a67dcbd8ae" testId="bafa9832-90fe-b182-50a0-2ab78b37fa84" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3164654-04:00" endTime="2024-04-30T15:10:41.3164655-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0a6ddda-5f57-449d-8b4a-95a67dcbd8ae">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62196d3c-e4b7-48f0-a956-30101155892e" testId="43eee416-1b88-5755-39d0-98fc78c8cab5" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3358501-04:00" endTime="2024-04-30T15:10:41.3358501-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62196d3c-e4b7-48f0-a956-30101155892e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff398219-cd15-40ee-b0f9-d91c26b6e5d2" testId="16281464-b63d-9914-3c06-7d706ef6a663" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3343852-04:00" endTime="2024-04-30T15:10:41.3343853-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff398219-cd15-40ee-b0f9-d91c26b6e5d2">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1332fe97-7cf0-410c-9248-5cb8f9aeaaff" testId="8b8ead2b-ccb7-78d2-1144-7d9cce24d811" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000134" startTime="2024-04-30T15:10:41.3655349-04:00" endTime="2024-04-30T15:10:41.3655349-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1332fe97-7cf0-410c-9248-5cb8f9aeaaff">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley&#xD;	loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f90e51fe-5e38-49d1-bcba-d69605447e12" testId="2609c142-3c09-0ed1-04d3-54ca1cf691a6" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3767743-04:00" endTime="2024-04-30T15:10:41.3767743-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f90e51fe-5e38-49d1-bcba-d69605447e12">
      <Output>
        <StdOut>Testing pair: '(a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8dbb06de-b299-48d1-a9bc-2be6583883b3" testId="b7a81934-a7af-8729-ecff-9f33d6871585" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000164" startTime="2024-04-30T15:10:41.2932026-04:00" endTime="2024-04-30T15:10:41.2932026-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8dbb06de-b299-48d1-a9bc-2be6583883b3">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e5b9039-5240-4c36-bc5e-cf4a9256a842" testId="6b53a09d-fb08-ae82-694c-fbd906816c3c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" computerName="BRUNO" duration="00:00:00.0000098" startTime="2024-04-30T15:10:41.3501076-04:00" endTime="2024-04-30T15:10:41.3501077-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e5b9039-5240-4c36-bc5e-cf4a9256a842">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
*'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91910a54-a0a2-4254-9e6f-47f96f787158" testId="64e38fa6-35a4-7a09-2052-19582fb62dc3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000071" startTime="2024-04-30T15:10:41.3063484-04:00" endTime="2024-04-30T15:10:41.3063484-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91910a54-a0a2-4254-9e6f-47f96f787158">
      <Output>
        <StdOut>Testing pair with explicit separator: '==&#xD;
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b34f2daa-8748-4b79-bd3e-39e1b83b2f5c" testId="3d6979c9-ed2c-f714-d69b-f4c82451b0cf" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3308391-04:00" endTime="2024-04-30T15:10:41.3308392-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b34f2daa-8748-4b79-bd3e-39e1b83b2f5c">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f766ada-5e60-4edf-91b0-41e39abb9b64" testId="2ba61a29-dccc-ccbb-fc56-8a209e264e47" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000080" startTime="2024-04-30T15:10:41.3565589-04:00" endTime="2024-04-30T15:10:41.3565590-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f766ada-5e60-4edf-91b0-41e39abb9b64">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8d4935c-4333-4546-97d7-69b42af97a54" testId="894daa6d-01a3-a92f-b322-55f97ead792c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" computerName="BRUNO" duration="00:00:00.0000148" startTime="2024-04-30T15:10:41.3048231-04:00" endTime="2024-04-30T15:10:41.3048231-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8d4935c-4333-4546-97d7-69b42af97a54">
      <Output>
        <StdOut>Testing pair with explicit separator: 'is
/'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7fd1e68-703f-4656-9d70-6cfde0a92f03" testId="fc464d11-fc3d-4dcb-937d-b5b4d2a83796" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.3247044-04:00" endTime="2024-04-30T15:10:41.3247044-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7fd1e68-703f-4656-9d70-6cfde0a92f03">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5888bfe-5a77-4cbd-a856-7afb6608d722" testId="aff91cf5-eef9-b75d-d2a9-0b5e9f477751" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" computerName="BRUNO" duration="00:00:00.0000125" startTime="2024-04-30T15:10:41.3428262-04:00" endTime="2024-04-30T15:10:41.3428263-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5888bfe-5a77-4cbd-a856-7afb6608d722">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	True'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e40afbc-5dbc-4903-a52b-215ec855f659" testId="f3cfc05a-c6b4-326a-3412-2a8d498f10e3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000196" startTime="2024-04-30T15:10:41.2974108-04:00" endTime="2024-04-30T15:10:41.2974109-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e40afbc-5dbc-4903-a52b-215ec855f659">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False
=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="065a43cc-1113-4dab-adbc-c0a1108d9a70" testId="27c2506d-be45-145e-ed2e-c72034354d60" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3190074-04:00" endTime="2024-04-30T15:10:41.3190074-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="065a43cc-1113-4dab-adbc-c0a1108d9a70">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddb21f05-2dbf-4672-8c8f-b431512938f1" testId="9422caf1-3c6b-6cd9-f625-3e3d62c2b8d7" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" computerName="BRUNO" duration="00:00:00.0000181" startTime="2024-04-30T15:10:41.2958428-04:00" endTime="2024-04-30T15:10:41.2958429-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddb21f05-2dbf-4672-8c8f-b431512938f1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True   reday'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33a6fb5e-e40b-4a64-8e06-63af24e86f21" testId="feeb523e-1f32-a999-0336-669496f711b2" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000147" startTime="2024-04-30T15:10:41.3836429-04:00" endTime="2024-04-30T15:10:41.3836429-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33a6fb5e-e40b-4a64-8e06-63af24e86f21">
      <Output>
        <StdOut>Testing pair: '()'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bf2ba0d-9d18-4421-a517-08bf490219a4" testId="68f3f73f-ba62-2e93-9404-9c89b6d5f158" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2922312-04:00" endTime="2024-04-30T15:10:41.2922313-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bf2ba0d-9d18-4421-a517-08bf490219a4">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley	False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7e317a3-9830-48b1-86c6-b177124d8441" testId="f80f63a6-d063-251c-198e-446f5c41e548" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3174042-04:00" endTime="2024-04-30T15:10:41.3174043-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7e317a3-9830-48b1-86c6-b177124d8441">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves
not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9481a424-0b45-495b-8be1-d5a1831960d6" testId="0f957c3b-70b9-f6ab-5a34-4a26e6bed843" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3651556-04:00" endTime="2024-04-30T15:10:41.3651556-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9481a424-0b45-495b-8be1-d5a1831960d6">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9dce60c6-82cd-4f83-ad71-c3b08c1f53f8" testId="8b3c013f-4c34-2209-e77f-fcc0d9a6dce9" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3635284-04:00" endTime="2024-04-30T15:10:41.3635285-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9dce60c6-82cd-4f83-ad71-c3b08c1f53f8">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday	='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80303504-f169-4df6-b3fd-0f0016fef5a3" testId="71c55f5d-8d39-8f4d-abc2-00f023384534" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: SlashToken)" computerName="BRUNO" duration="00:00:00.0000120" startTime="2024-04-30T15:10:41.2615661-04:00" endTime="2024-04-30T15:10:41.2615662-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80303504-f169-4df6-b3fd-0f0016fef5a3" />
    <UnitTestResult executionId="1e7493cd-908c-43a8-9c0d-5884a3cbc3cf" testId="d298a0ed-05b9-cdd5-4f28-0e49abb5a26a" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.2825630-04:00" endTime="2024-04-30T15:10:41.2825631-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e7493cd-908c-43a8-9c0d-5884a3cbc3cf">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley
+'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d61b1f66-17d9-40ff-8e0e-e02ff516cea7" testId="e1b867b5-a241-9635-0a36-b068e811f85f" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" computerName="BRUNO" duration="00:00:00.0000090" startTime="2024-04-30T15:10:41.3767212-04:00" endTime="2024-04-30T15:10:41.3767212-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d61b1f66-17d9-40ff-8e0e-e02ff516cea7">
      <Output>
        <StdOut>Testing pair: ')loves'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ace5243-e3cd-4ef9-8c8b-7301d0f11317" testId="394272e4-c6e4-7e1e-f042-b063b0e59c79" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000135" startTime="2024-04-30T15:10:41.3266616-04:00" endTime="2024-04-30T15:10:41.3266617-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ace5243-e3cd-4ef9-8c8b-7301d0f11317">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a4e482d-061b-49aa-a1d8-c35873d51fea" testId="b52d0822-04af-b0f7-d030-908b71193673" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3312229-04:00" endTime="2024-04-30T15:10:41.3312230-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a4e482d-061b-49aa-a1d8-c35873d51fea">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not
a'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6351ef8-2edd-422a-86d6-129ae3b24a63" testId="92b61aaf-2a42-2153-b00b-52cf8fe3231c" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.3771784-04:00" endTime="2024-04-30T15:10:41.3771784-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6351ef8-2edd-422a-86d6-129ae3b24a63">
      <Output>
        <StdOut>Testing pair: '-and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef992d30-61e7-452f-8b28-9add70d5ef22" testId="279e95ed-62ce-3800-7a7a-79939f0ed206" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" computerName="BRUNO" duration="00:00:00.0000083" startTime="2024-04-30T15:10:41.3357661-04:00" endTime="2024-04-30T15:10:41.3357661-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef992d30-61e7-452f-8b28-9add70d5ef22">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;False'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6b9dade-7033-41c4-bb5e-20e83eafe01d" testId="57192594-1201-4522-b027-3056f5db3eb4" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" computerName="BRUNO" duration="00:00:00.0000121" startTime="2024-04-30T15:10:41.3056580-04:00" endTime="2024-04-30T15:10:41.3056580-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6b9dade-7033-41c4-bb5e-20e83eafe01d">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a&#xD;	or'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88d645cf-a744-4a4b-911a-6f11802dc68b" testId="67afc45b-dc45-13c0-2a62-ab056e044b5e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000094" startTime="2024-04-30T15:10:41.3154292-04:00" endTime="2024-04-30T15:10:41.3154292-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88d645cf-a744-4a4b-911a-6f11802dc68b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'and&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f764ac35-4025-4a32-a3f0-87e88921952a" testId="a6d3adff-7c5f-092a-ea10-d9da98451365" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000166" startTime="2024-04-30T15:10:41.2685035-04:00" endTime="2024-04-30T15:10:41.2685035-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f764ac35-4025-4a32-a3f0-87e88921952a">
      <Output>
        <StdOut>Testing pair with explicit separator: 'True
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf6ff315-3802-4032-911f-d7499f99768d" testId="4e0b9c78-f315-8511-650d-85dec97d68fa" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" computerName="BRUNO" duration="00:00:00.0000088" startTime="2024-04-30T15:10:41.3758826-04:00" endTime="2024-04-30T15:10:41.3758826-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf6ff315-3802-4032-911f-d7499f99768d">
      <Output>
        <StdOut>Testing pair: '(and'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c845a3d-3cb3-4744-b785-87cb0dabd632" testId="e2a8e4a2-4531-86b4-7509-58df83a34981" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3617434-04:00" endTime="2024-04-30T15:10:41.3617435-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c845a3d-3cb3-4744-b785-87cb0dabd632">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	not'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4c01560-c45f-41ee-91d9-abfbea3a360b" testId="1edcf536-5c18-7c69-57e6-6e6902a99a6d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000085" startTime="2024-04-30T15:10:41.3661257-04:00" endTime="2024-04-30T15:10:41.3661257-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4c01560-c45f-41ee-91d9-abfbea3a360b">
      <Output>
        <StdOut>Testing pair with explicit separator: 'reday
-'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e0b713b8-1f9e-4dfc-9ddc-df70f12d1eed" testId="5f89b294-644a-5682-d7ed-155ee37774d3" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000100" startTime="2024-04-30T15:10:41.3583037-04:00" endTime="2024-04-30T15:10:41.3583038-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0b713b8-1f9e-4dfc-9ddc-df70f12d1eed">
      <Output>
        <StdOut>Testing pair with explicit separator: '=	=='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ad6acdaa-edab-4bae-9284-822d483bcc40" testId="46d5ab2d-979b-c59d-2023-7b18c34b32fa" testName="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: MinusToken)" computerName="BRUNO" duration="00:00:00.0000167" startTime="2024-04-30T15:10:41.2687649-04:00" endTime="2024-04-30T15:10:41.2687649-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad6acdaa-edab-4bae-9284-822d483bcc40" />
    <UnitTestResult executionId="f5c2a054-65bc-41b3-87d7-a845957a653e" testId="b6536222-3f82-82aa-13cb-38a401133b80" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000195" startTime="2024-04-30T15:10:41.2693299-04:00" endTime="2024-04-30T15:10:41.2693299-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5c2a054-65bc-41b3-87d7-a845957a653e">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;	123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b5cf074-3cd7-441b-a5a4-4be38a87be89" testId="c26efca5-de6d-0ad3-3751-2bb9c82d1565" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" computerName="BRUNO" duration="00:00:00.0000092" startTime="2024-04-30T15:10:41.2876705-04:00" endTime="2024-04-30T15:10:41.2876706-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b5cf074-3cd7-441b-a5a4-4be38a87be89">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves   -'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58daa03a-ccc9-4425-aabb-140d33ea7cba" testId="0a9231b8-c735-6643-d8d8-8b067365fd1e" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" computerName="BRUNO" duration="00:00:00.0000106" startTime="2024-04-30T15:10:41.3776789-04:00" endTime="2024-04-30T15:10:41.3776789-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58daa03a-ccc9-4425-aabb-140d33ea7cba">
      <Output>
        <StdOut>Testing pair: ')123'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b83af85c-2393-4964-a2bd-8b6f468f5bf1" testId="5ba92cca-fc30-4784-5795-92a63ddb8ace" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" computerName="BRUNO" duration="00:00:00.0000087" startTime="2024-04-30T15:10:41.3474676-04:00" endTime="2024-04-30T15:10:41.3474676-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b83af85c-2393-4964-a2bd-8b6f468f5bf1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'ashley   =='</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb5bc8e9-ab30-442a-a7dc-5aa7991b5949" testId="580a3282-11de-3081-5f9e-91044d62b763" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" computerName="BRUNO" duration="00:00:00.0000172" startTime="2024-04-30T15:10:41.3012368-04:00" endTime="2024-04-30T15:10:41.3012368-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb5bc8e9-ab30-442a-a7dc-5aa7991b5949">
      <Output>
        <StdOut>Testing pair with explicit separator: 'a   is'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81ec572d-10f1-4def-8945-3527a31bc349" testId="edd904b3-adf0-ea6a-4718-4f379db827ab" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" computerName="BRUNO" duration="00:00:00.0000081" startTime="2024-04-30T15:10:41.3483324-04:00" endTime="2024-04-30T15:10:41.3483325-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81ec572d-10f1-4def-8945-3527a31bc349">
      <Output>
        <StdOut>Testing pair with explicit separator: 'not&#xD;
)'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="746630c2-9937-4a61-8c70-b1e60345f82f" testId="b67cafa9-d5d4-1bba-6213-41fbc8c46d4d" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" computerName="BRUNO" duration="00:00:00.0000227" startTime="2024-04-30T15:10:41.2664534-04:00" endTime="2024-04-30T15:10:41.2664534-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="746630c2-9937-4a61-8c70-b1e60345f82f">
      <Output>
        <StdOut>Testing pair with explicit separator: 'or&#xD;
('</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e0298e3-731e-4325-89de-d9bec31de8e1" testId="f71c1240-14b3-fd17-695b-3bcf88187400" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" computerName="BRUNO" duration="00:00:00.0000089" startTime="2024-04-30T15:10:41.3572910-04:00" endTime="2024-04-30T15:10:41.3572911-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e0298e3-731e-4325-89de-d9bec31de8e1">
      <Output>
        <StdOut>Testing pair with explicit separator: 'False&#xD;	ashley'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c62107b-70cc-4ad4-aa07-6bce40379c90" testId="5a8c2451-1457-6f0e-7492-4dc612c99061" testName="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" computerName="BRUNO" duration="00:00:00.0000086" startTime="2024-04-30T15:10:41.3198945-04:00" endTime="2024-04-30T15:10:41.3198946-04:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c62107b-70cc-4ad4-aa07-6bce40379c90">
      <Output>
        <StdOut>Testing pair with explicit separator: 'loves&#xD;
not'</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dba91c09-1b37-1c4f-1003-70017fed4b91">
      <Execution id="8bf65fac-b83b-4462-ab5e-bb4dacd6d98b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="613c6fdc-8133-5ab3-460f-e30a8d004262">
      <Execution id="a8af12fa-6a91-4c29-bc37-fc74f67cca8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dc2491d2-0ff7-8523-9e45-766376febe55">
      <Execution id="998f8b12-762d-43e1-b33f-698eec25888f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="50257766-dd18-accc-2632-30e9678c1a5a">
      <Execution id="c559ae79-2e26-42ba-8ae3-4156bf44540f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True is not False&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b9a2657e-4643-a783-3ba9-56116fd67eb7">
      <Execution id="a773332f-51bf-411e-b159-36507c666609" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="249d22c0-6b90-a17b-dca2-88e3585daccc">
      <Execution id="96337bba-8187-4610-b5d2-8c64b15c007e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d02b42fc-f4b8-601b-72bf-8186af3a394a">
      <Execution id="90b76097-7dad-4fb4-8949-734d16f99c8c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="44409d9d-754f-e51e-96e3-d6912b5298b7">
      <Execution id="2b45707f-6ce2-43ed-8547-70af94dd3610" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4cc500c8-3ae0-041d-77e4-8fb667af6264">
      <Execution id="66019e01-4381-4e41-9836-fe0a03431afd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab233116-e669-53e8-8fc6-0275258c322b">
      <Execution id="f4eab7c3-d4c6-4e98-a2e6-4f82cf022d6c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2d7a9c92-b9a8-e170-75f2-1d908b9ca2e4">
      <Execution id="55970560-aae9-4055-804f-f57df1075320" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3bfa1e0a-4a5e-96b6-a578-12e82ee3bd10">
      <Execution id="1203bd4e-fcf7-40d6-ba67-7f2aeab0ad7c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: TrueKeyword, text: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="68b1a906-43a7-2c16-7423-7271a8d4e7c8">
      <Execution id="054f5d87-f757-439d-a9ea-3252c2719790" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="60cf3ef5-b3b5-1f4c-8f05-68a66052a9b0">
      <Execution id="5d628ce1-66d4-4492-a3ad-6150752fbefe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="05280a91-df0a-5dd3-0a5c-5983d68d226d">
      <Execution id="cde9bdef-b809-4487-acfb-a6086e98af7d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="296b6783-b6a1-1f23-9ff9-498cb3e234a7">
      <Execution id="cfa2df08-db3a-4b0d-a4d0-4cd68222f471" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d3898ee1-6a92-977c-23db-23685cd83166">
      <Execution id="da4f99b7-9a52-4e8f-85c1-7332f9d1c9ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="30ea76b1-88a7-538f-8e88-265822ea1844">
      <Execution id="c80f1497-154d-4415-a878-9e63b8186cf6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="84668809-bb42-0307-aa2a-ac84540dc4f7">
      <Execution id="37983ce5-42ed-417d-8419-c828f776f831" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ff6c67ff-3b84-4e83-91e8-ebf3594e190d">
      <Execution id="a6b2077f-8375-4720-af0b-f5eb173a371a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="769dc668-6d35-9bcb-d2c3-d4ab100d25c3">
      <Execution id="87c46b7d-50cf-458f-8fc1-763fc3c75371" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f80f63a6-d063-251c-198e-446f5c41e548">
      <Execution id="d7e317a3-9830-48b1-86c6-b177124d8441" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4f7298bf-afb9-288d-0a96-aa7b50f0c89e">
      <Execution id="38f67b4b-ab46-428d-befb-692c2bab634d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8343b001-08aa-5bad-9d9f-e9ae5d8f1bdc">
      <Execution id="0ef2bd6e-66d9-4c7b-9f74-2bf42dd5c95d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8ba78aa6-4168-1114-e0f7-6fea58a18375">
      <Execution id="db6a2dd3-c86b-4c0d-8b11-36e2a9921432" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fc464d11-fc3d-4dcb-937d-b5b4d2a83796">
      <Execution id="b7fd1e68-703f-4656-9d70-6cfde0a92f03" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e6f8464-2c90-142c-f21e-436039005857">
      <Execution id="b10e6507-183e-460f-bf95-0f770a05a726" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2a68fa1f-1494-ce05-e599-9ab68236b79a">
      <Execution id="d0e9f526-13ad-416f-8777-ebf57908d75b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab7f3817-3047-4817-973f-500cf80cb369">
      <Execution id="5b019316-bff1-4727-8ae0-24b92589722d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28572c96-2710-4749-90d7-4db2204ed959">
      <Execution id="3af4cda4-da85-4eeb-8986-71636c3ef354" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6c439e41-2b48-43f8-fe78-bd2588d70302">
      <Execution id="12f1c48a-7eb2-466e-bca1-b69be1af6c7b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="48add3e9-5bc6-632d-4c14-6a49aa32c663">
      <Execution id="04d52ccf-64ab-42d3-b02c-ce0274c2c891" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36cf3a62-40f9-21b7-1392-1e358cd01b86">
      <Execution id="c6b80f7b-01c0-4cc8-82a2-d49ea392ee2c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="169b33c4-7e6f-658b-a711-addb55b8dda9">
      <Execution id="dece43c5-1d17-4cf9-b5b0-ad9539b71669" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01a37e2e-edfc-b8ae-f8b8-af8165060569">
      <Execution id="89e463bc-7edd-409b-b05b-4a044efa43f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7048cc11-4f28-654c-e5b9-ed4a9343880e">
      <Execution id="1463960a-695a-41d1-b504-c60da3bc15df" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c1aac08a-f269-0bbf-e274-e31baed8ff5b">
      <Execution id="5267ea4b-f1c4-47d7-9bf9-3a2fbdc66e7d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f1ff199b-7d6f-93a9-2f75-007f5b886c7f">
      <Execution id="bad7383c-7ae4-426a-9f53-be5ec857bcb4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8488c70d-3af5-be62-17a5-f3a7f7d6bf1a">
      <Execution id="11fc4b9b-e8d8-4ada-a10b-d6d3fc8e055b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e3486540-0af0-cfc9-8e6d-799b23b0122f">
      <Execution id="b6db068c-eaf0-4cc4-9305-bff7bd16e250" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="62a030f4-1698-3fd7-ad95-a5649fa8ae16">
      <Execution id="a350d347-d3ae-4b05-9687-09a6742a5327" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b8416299-d53c-c8e9-3380-58cc469d9afe">
      <Execution id="d937b4a8-8ebc-4a37-be41-fd064bbaf08d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86d78e8e-c5b7-39e8-c10f-9c137f87cdab">
      <Execution id="df0d6a89-7f79-44d3-9449-ed6f98364855" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1992f91f-0861-e6ed-f699-3cfa92591b55">
      <Execution id="6096d614-58f1-4566-837d-a3d11f23b8e5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="25505a59-41e2-0f10-6da3-df4e452b03f7">
      <Execution id="03c9c6aa-244a-45e7-8a50-ce3b105d12a9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1355e3f1-95b6-cc3a-458f-289ea5fab707">
      <Execution id="a8badf14-1263-4535-a951-4d9680e96c5b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aba73b2f-c55f-e1d4-7d28-f695b51fe172">
      <Execution id="d478765c-29ab-49f6-9ddb-ee302b3bd6a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ad09f1ef-ec16-63ee-7611-5f39825a4319">
      <Execution id="80c5c884-a539-4833-800b-c9612c6a6678" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ffaeeab-4c86-8ff5-b053-bd38d6c7aefb">
      <Execution id="8f5c49b2-f7c3-4c99-91e8-35986c7b833e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47752ca7-5b10-0993-2293-0dba21e5d245">
      <Execution id="440908d8-5ed6-4d8a-85f8-4e668d2e474e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 10) * 2&quot;, expectedValue: 20)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bec4dbef-ebc0-96bc-14d4-d6fdb26c8215">
      <Execution id="d561316a-e4e5-4a88-9128-280e9be51f86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="011d5d4d-abe9-a7af-79a9-4cd0fe8f2ce3">
      <Execution id="6eb444da-e84e-440a-9b29-3c95039ff11d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3d6979c9-ed2c-f714-d69b-f4c82451b0cf">
      <Execution id="b34f2daa-8748-4b79-bd3e-39e1b83b2f5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fcff4d0d-d081-2cbe-671a-bf5965e4775a">
      <Execution id="17187ddb-69b1-4304-b435-8f2e9acdf4a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a7051c9f-ed11-e9bf-d12e-e9248152b817">
      <Execution id="9158b8e1-5d8c-49a4-85a9-21b29c2ce332" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7b0594d4-e75f-f801-a743-e2ef210a388e">
      <Execution id="839f856f-1ff9-4072-8207-20b308861b08" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="473cc30c-6a9c-6671-a1ee-e3d2218f5aeb">
      <Execution id="3a8f5a94-43d8-489e-992b-f03097e1c321" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4b7dc0a-6b35-207f-83d1-f1196e79565f">
      <Execution id="e370e1dd-7c88-4bc0-a8aa-e991f22ffb29" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2790fa0d-dbe0-04b7-6591-285f180a87ad">
      <Execution id="36d990e6-122b-4ab7-a28a-2ec8c2f403a5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56d29d17-6198-7751-3344-8e738ff58fc4">
      <Execution id="22541276-d8c1-4b82-aff5-ed3e772a8288" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a1910b6-7e6d-afa8-d25b-4a6b65ea8029">
      <Execution id="b80b4fd6-e30b-435b-9348-4c7aa21fa01e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a50002b-5cde-07b6-d5bc-bce669fd4719">
      <Execution id="6d790cf4-5ce2-4603-aa02-495fc5291efa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b155706d-f5af-3974-c48a-c3e57f914be3">
      <Execution id="257eff3e-286d-412c-b408-f7db08afd8e4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86f416ae-c1b2-8f94-82e0-05fed12a5d8b">
      <Execution id="2e8ff00e-0f76-41ac-bf76-c21810b78bb9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2857f229-a141-eadf-e4db-b95cd4eb5d04">
      <Execution id="ce834752-2d58-4ab7-96ab-04fa97864486" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cef16c6-f632-1ecb-8cdb-dc5e2aab57b8">
      <Execution id="288e724d-ece9-4f04-bc34-4edb4a3a3bd8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3aed3f76-a72d-fb68-f0fc-5a61b85a11ff">
      <Execution id="5f038cf1-6b2f-4cc7-846c-5d49ca4bcd4f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="422f7b4c-e75a-cf1d-e538-d8063e850384">
      <Execution id="66b0363d-1d2e-4ea7-9915-2453d9b40140" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="602c134c-5ea5-0e84-368a-fc20e9d21bd1">
      <Execution id="72f8e67d-ed11-4bde-b2fc-ebcf10689a23" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: StarToken, text: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f7b100c-6d7b-b65b-f4b8-15a206fc5caa">
      <Execution id="93283241-ce8e-475e-8c9c-cb5f0aa5996d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f4be3847-cc72-0484-24c4-c7433b7f4016">
      <Execution id="900576cd-f9dc-482a-957d-e4ff64b49356" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="65c9f74f-3de5-4400-889f-2413e04f7b3b">
      <Execution id="d16b690d-ab9e-4235-add5-25a264cb718c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="687e5322-01f1-9d5d-f26f-28aec86ac293">
      <Execution id="70fca1b2-985b-48b4-ab71-13e34b6bb30a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2dc333f2-fb8f-3896-e8d9-4221f4730023">
      <Execution id="4f3d1173-5080-4d3d-8c1e-358aa7b418ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c892f977-3230-15bd-3081-38b8d7f8bb19">
      <Execution id="bfe7d173-1ed2-44fb-a9fb-434be167436c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5c30fb19-bbcb-e8a5-3a92-fd0f63a632c2">
      <Execution id="73030796-dc9e-4fcb-b5cf-51585e78761f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="667b67b4-123f-5541-0ee4-5e637e6aefbb">
      <Execution id="1057f7bb-738d-4313-b727-e3ec7d10c46c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b2ac5e1-d300-8bbf-fa90-4a0b691938fa">
      <Execution id="6507f7c9-4f92-46d1-ae30-0b94a8261193" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2604e2e-2363-2622-c8b8-4169a69bf9d3">
      <Execution id="f5aea6f1-9600-476f-beb4-1b5edf15780e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9d3d078a-26f1-1ddf-7275-db04985dc1b6">
      <Execution id="ff21f1a5-aab0-415d-a6bd-878535cd6f52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f095be9-2bbb-25d9-d0a0-3dd027d7db71">
      <Execution id="3c3bd80c-8a0f-4216-b96d-1469337c203e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5fbd0108-a41d-eab4-17f7-0b2c9fdd7db5">
      <Execution id="8cad2514-e537-4e5c-aed2-37ca71918df4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd9fdd76-97f7-6637-4902-211c64eee408">
      <Execution id="a4f1f7b3-8ad4-4a61-9c51-70146432be8b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4bfb4392-bab3-1fd5-de93-02bcc542c62f">
      <Execution id="7ffb8b5c-eefa-489b-82a2-e970dd794983" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1b1655f-3653-9fc6-4fe1-c9fa27e45637">
      <Execution id="859fe6a5-cc66-4f0f-bdcd-238816f715cd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bb28772e-b488-e3c0-bcf4-0a67c14f3163">
      <Execution id="1ee4256b-8f6f-4882-90a1-260d4897143a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7796d565-a64d-6f75-c72f-07dcee6e99af">
      <Execution id="d86e9bbf-f9d9-4d8e-bc1d-4f825c53063f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0335d6f0-a5c5-93e8-73de-8ea15d594c98">
      <Execution id="b1b81795-9a59-401c-977f-45baba92b6f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: OpenParenthesisToken, text: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="68f3c0ff-ba9d-d2e0-522c-097a5855fdb4">
      <Execution id="4f0b909a-ca53-4beb-a39a-565ffa0eb849" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d9a7520c-ba39-a977-e913-8c987f6b83f3">
      <Execution id="1c51a504-654f-44bc-bfd6-981aa22efafe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5ec7c5c-e986-fabe-5cac-1841ec4cfde4">
      <Execution id="dc3a3a01-343c-4b1b-88ef-faefcaec2f91" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1fbebd18-5659-e81b-997b-22463cfd278f">
      <Execution id="5842a870-8b9d-45c3-8ff8-6ed16e280cd7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71c23423-a394-0657-0020-e7186fb816de">
      <Execution id="3a34ae72-894a-4ab9-9219-7348836932d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d7677b83-db3b-e51d-0c20-a252267b6102">
      <Execution id="0415ceae-d159-4990-88e2-a4c39c99e55c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5045f4d4-7073-9e6d-bc5e-26a9d527242a">
      <Execution id="59337dea-d535-4935-8a4f-4b97e220fdfe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9efbc034-7bcc-33b7-502b-48e6be953a44">
      <Execution id="ddc8a37a-229a-4af4-bd87-713acfdba812" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="735448ca-47a1-4468-c70a-daa48ab13cfa">
      <Execution id="2c0ed2a9-ee22-4abf-907f-f1a207763fca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="299cf12b-f7aa-2866-5f08-3d085d207bbd">
      <Execution id="1b0eddec-a6c0-44b5-aedc-5af3ecb5f8f3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ce2eef36-7d75-7b9d-cacf-5f7e6d3f1df1">
      <Execution id="3ea443a9-62b5-411b-a52d-51eca9b984b4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c7fdc022-d907-b182-45e4-85d2293dd4e3">
      <Execution id="147b13c7-7121-439c-a34d-e4481601c63d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4088b7ef-3249-5fbd-68d5-833ea9529ed0">
      <Execution id="16fb5f72-c8f4-49a2-bdc0-efaa4da60f9b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="615b055e-5c37-4150-dbd3-4520d8053197">
      <Execution id="28d5a561-9f9d-4c57-ab5a-7eee0aff6253" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f1cfe891-e995-ef96-7df1-195cf19b88c8">
      <Execution id="01f91100-4108-4c95-a721-49afd918ed9f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4813f5d1-a69c-b28f-ba8a-fd1e28784777">
      <Execution id="c1bcfa50-a747-4c16-afa7-57b27d8c0ad0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="04ac183f-dfb2-4243-3403-f58ffb889b77">
      <Execution id="ff1a93c1-01bb-4b90-a505-11f6258ffde9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="69e4a161-d4c1-6d8e-ef67-746f44271bbe">
      <Execution id="5656cac4-dce6-4ec5-b2c3-bf84260587b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d22c708b-3e50-d5af-f235-078e4b2b7a1b">
      <Execution id="94de627e-110d-4bf9-b9ea-d41ea26ca6f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5490218e-be16-8473-364f-0674b286fbc4">
      <Execution id="cdb080e3-accf-429a-9f20-9208bea6b3eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bddc6ea0-a097-4e85-b5c2-7380547046be">
      <Execution id="35d8f910-c662-4c68-a16e-fba7f8aa1037" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71f4980d-dd93-e45f-48cc-c07d92d6ea7c">
      <Execution id="f2c6050c-c508-4c86-951e-23e8ef7f95cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d7dfe2ed-298b-e1f7-baae-883c747b7b4f">
      <Execution id="17b1248a-2fa1-41f5-a968-8b7cd937e511" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ea9e57de-c10e-1258-dfbf-54fc34b4d6ce">
      <Execution id="32639bb6-2c21-4150-929a-0acc78538cc3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7d720576-81e6-e6e7-6c2a-ebd8a161040e">
      <Execution id="ac6c27c1-0e9b-4842-bebc-d01e050dfef6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f0301ff-f0aa-4137-9672-217201ee2140">
      <Execution id="df596a15-a072-43ec-a538-3aa362624680" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6d69cc4b-bdcc-bd2a-1cfc-d03d16f548bb">
      <Execution id="23751e76-7ec7-4550-8df3-864a4c7ed8de" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85decf2a-2fd2-31a0-84d7-d6039af47087">
      <Execution id="8d467c22-6b98-436d-9249-bad19acb0011" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: ParenthesizedExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="76b63ea7-27c2-73b5-ab88-95b912450203">
      <Execution id="7f01c3f7-f96a-4aa9-ac0d-b4cc86cb6f63" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e009e33-af76-ecb1-d796-640b71d73534">
      <Execution id="cb20f0a9-e1aa-4036-8e34-7bcc8d1d8137" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2a6ee734-8030-4355-c909-3b14d4eaaa0d">
      <Execution id="2c606166-ccda-4331-a57a-e2cf0e8ba7a2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="603d33c8-84ee-1096-4481-3e4534b36ac6">
      <Execution id="5ec31103-2a28-437f-a09a-a83b3e8682b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0818a1dc-a99b-f4d7-b0b0-570ef57baa07">
      <Execution id="2f7fb2da-0673-47a5-8782-c610a8b1af11" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c443ddf5-8533-eb9c-e03f-5d4d1d244968">
      <Execution id="185ecd27-4cb4-4a23-ae27-d844425c9d5a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e53f2de7-8b6d-d1dd-ad5a-f4b6cea6df0e">
      <Execution id="2660ca0c-9338-488d-8edb-628b21548874" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;8 - 2&quot;, expectedValue: 6)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="51d59be4-7d59-dc12-37f4-0aae3349a615">
      <Execution id="ddcd3cbd-e582-48a9-a6bd-878ec8bb3372" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27893442-69f8-db3b-5381-21e812cdbd8e">
      <Execution id="92612fac-07d3-4908-af4c-4b90f56bfef2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1bcfc96-379c-5b0f-0dbb-1a725d508769">
      <Execution id="4da2e6e1-0d58-4eef-9b65-4f5e67abf17a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cc188d95-c2ae-ec37-3455-8da90edbbeee">
      <Execution id="6e4f3d96-7ce2-4737-8552-f183b170c8ac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0bada7a4-0656-6d48-645f-ae848d1d23d5">
      <Execution id="d6ebb027-639a-41de-b182-7c8a6e8302bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b68d4b60-9985-3219-1ae7-92eb78e2f244">
      <Execution id="97e69cce-67b3-4d5f-bde2-de34742086fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="59cc48e7-5713-77a4-f4f1-473400779c1a">
      <Execution id="1d7410b8-4a1b-427d-b484-683261542a05" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ddb47557-d6a3-0769-80db-6838bfa9b518">
      <Execution id="2a5a9966-ee89-41b1-bb6e-09112f677f47" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3dd66463-fb28-726e-f84f-673b18c29011">
      <Execution id="612ad841-f7bc-4dbd-bd9d-f1a68570378d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IsKeyword, text: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="08b1e2c9-887b-6fe8-d17a-d6c3be09e65e">
      <Execution id="6f12dc81-bd7e-4ce5-aed6-30fb506e03ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7e8f769-02b7-efb0-391e-75cd1ec18ae3">
      <Execution id="5c8952b1-2022-4dab-983c-f8e36c11c6c5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ce87fe44-1f7d-e6e9-5f55-2c1a5abcc07d">
      <Execution id="06085427-1f68-4b84-b0eb-e742b4a33315" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4fab569a-2e8d-5c5a-db86-ae85721d79e7">
      <Execution id="b8257256-e0d5-4077-b70a-6070a70eeeaf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d2d8c5f9-3644-b75c-f06d-cf01a2ef674a">
      <Execution id="8902fcf0-2235-492c-b7d0-d4016f65020c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0c4ffcdc-3614-deee-1457-e8f45d7742ab">
      <Execution id="e4a5a332-3a4a-4ef6-bb4d-25057268dddd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af854179-e937-d0bb-518d-15cef4c2c227">
      <Execution id="7c4238e4-b0ca-4350-8644-dc20110e5cf5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bcb015bd-910f-52aa-cad3-2aaddbf3c52b">
      <Execution id="c948974e-e615-44eb-aadb-aacfb423bbb7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d94c3083-d197-e212-7b31-59740717e656">
      <Execution id="c99e9345-53f2-43f6-abb8-b96c5b1aa358" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8dc3149-4659-ccfd-ae3d-582c929a49a9">
      <Execution id="ffd8e560-8f19-45fd-abbe-c3031f1a7bc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="22ccc183-f475-b21f-e4d1-adb25df63f0d">
      <Execution id="a184fad2-a9ab-4d75-bda4-05dfbeb5af54" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="436a71a2-d20f-c36d-e7ce-8030d0d53961">
      <Execution id="6bef8e35-3655-48f0-80d6-58555994adff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56b6c9a8-497e-3e29-1361-66f6fe2d0bc4">
      <Execution id="e58c3da2-33ae-4cc3-b6d8-94d220ca7563" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1c078c04-55e4-a191-6aff-9b3e70c076e6">
      <Execution id="455a4760-89cb-4ae6-98b2-60b32462d5ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9c8f545d-e41e-810c-60c8-cdb9dc6007ee">
      <Execution id="9c063310-da31-46bf-81bb-81611b781dc6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c439a8da-2dc1-d5bf-7698-eadfb0749901">
      <Execution id="4d703e60-013e-4d02-873b-e67857be08f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5547e2f8-556e-ee7c-945f-1802eeb1e6a0">
      <Execution id="25810cfb-932a-4650-a14f-3c813a6001db" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="89ebda0b-9627-b6ce-1fba-d765f98f5e22">
      <Execution id="2990e55c-a238-4623-bac5-9b21040f8fe9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3940d3a1-0c7f-ac8d-fc35-355df2a6a8e2">
      <Execution id="0c6dea5c-acb5-4244-872a-78b52b844b11" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f8f99db-cdc5-762a-7f68-b1b810f872a8">
      <Execution id="31addc63-313d-448e-80e6-0d06bec4f298" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NotKeyword, text: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e2be895-ff3a-095d-75e3-37299d0f4962">
      <Execution id="403b3163-6537-41e5-80af-cb45c9799e36" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7690d101-d32f-55e3-4d58-d79a088c5404">
      <Execution id="b261ae78-ced4-4796-a42e-a5da1b4db07e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8bf9438d-3854-1da9-89a9-c835a2aed750">
      <Execution id="4a3e44c1-8bce-4a6e-a8c1-24d18735f063" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b37b3153-b8d2-34c2-a49d-56bd5625b823">
      <Execution id="8a928bba-8ace-48d7-85a7-3773b89b7d6e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5af78dd4-937b-3fc0-e9b3-723050c16094">
      <Execution id="1cdc7ed1-e4ae-4be9-be89-d46ed0d24716" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="817f24f2-e53b-af3f-7bc8-cb945d7db174">
      <Execution id="0c4f58a0-f0a5-46dd-ae73-c3050d912b0d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="26e89c02-6144-d316-7a7b-30fd7c304ef5">
      <Execution id="6587715a-da59-4684-a81f-b4df97074f41" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eb2a4720-1008-c1ef-cc72-d43fb5a00805">
      <Execution id="1273d465-5168-47f1-89cf-26c1fd2ebeb0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c6181595-2d9b-765e-f7ad-89a36e61082f">
      <Execution id="432001e5-d860-476a-89dc-07341d647cb7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9ecb089a-3721-0d17-5f51-bbe11a92d3c2">
      <Execution id="b0a267b8-411e-40d6-80e4-63aff6f08b2e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9563a5e8-edc3-01d8-67e4-c497c8ee3283">
      <Execution id="4afb3d7f-0b4d-46df-adb7-602dbb2bda38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9c404929-aac4-6531-a84e-4c7341b41a86">
      <Execution id="c2af8797-65aa-49f5-b93e-5e525d479650" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="611e7fad-047e-c8c3-d507-5acb671efeab">
      <Execution id="f122646f-d022-464f-8445-f1b235edfcbf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b877794c-3770-b355-c32f-dce9c57fddd3">
      <Execution id="ac924d39-4de8-4854-ace5-a4645a8ec06a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="18d64658-9b0f-06be-42a4-550298d60807">
      <Execution id="dc690140-0945-4fee-ab93-3191e7cd8306" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7fb864a4-5321-7af1-1669-0b0d5af576da">
      <Execution id="2db9f6de-e032-407c-aab5-db585b7875a2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2d631666-ee6d-bd43-fa1c-1c42d9569e68">
      <Execution id="1654eca9-38bc-44e4-9f05-18d7baaba264" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd4dd3b1-709f-e8ee-5ab7-ca290ebb23a1">
      <Execution id="6d92aacc-b855-46a7-b631-cef4590f9acf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ebc0798e-5cb8-1e23-00f9-f1ad89b0bc2d">
      <Execution id="39512533-9214-4b28-add9-b0141609b73f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0efb421c-910e-3b0c-6b6f-08ad405ddc0d">
      <Execution id="44f33bee-3fa4-4b29-aac9-1d9fd7c04c4b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6910dc81-7cf1-ae11-02e1-37f11097f48e">
      <Execution id="189a39b3-113a-467f-b952-4daa3528cf85" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5001e616-8b55-331a-1f95-ef75f9cf7688">
      <Execution id="2af47e08-ac09-48a9-8982-0b06791696dd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6acc3dda-726e-2430-8372-d9cc9237078e">
      <Execution id="5453f4b2-c9f3-4282-a743-de25f081d8e4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a4a282b8-f891-a269-d10e-f137d2737a43">
      <Execution id="7697fe24-bda8-4d54-99b6-5871a3ebc819" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd648a34-57fd-f805-51cf-8347c539e2be">
      <Execution id="25835111-17a2-44b5-9972-db037999b263" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f2870a7-bd9b-bbac-ef3c-75c31774c0b7">
      <Execution id="3b985376-21db-45ac-98b8-71b90923c89e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f82b2a36-dc7b-4e29-64bf-f23e2d274597">
      <Execution id="5c7534b5-c1b4-446d-aba2-954907bf786a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="37c3a8b6-4a1b-e566-bb10-637699372e26">
      <Execution id="2e4ad912-fd2a-4ec1-adf2-d965e70f5842" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="88fbc2f7-230c-c6c9-2e2d-4a583fce894d">
      <Execution id="18470b49-c376-45ed-9281-a53d77e2d6c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: FalseKeyword, text: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="45e2231d-67ee-0a57-fd69-f4c00be4ea81">
      <Execution id="2bd63bc0-1a98-4865-bad2-07bf2411c936" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5035657f-cf70-94dc-659a-2848181f7c58">
      <Execution id="227e6d83-87f5-4e17-b7b9-d62c79857233" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f42837ac-fbc2-3e95-cac3-9dc972fd1d52">
      <Execution id="2640b0cc-8eae-4c33-9efc-08b49094a7f2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="90ea04cc-0b21-4e87-f49c-3428cc4e4516">
      <Execution id="cdeb4bd6-2e27-4f7d-8832-b968132fd4ff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07c8cefd-7f2a-e11d-7c2a-ddc46651a14a">
      <Execution id="d17436f0-460e-4948-b70f-6bd0927d24ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ba29293a-14de-1f66-33fc-b64ad2621f42">
      <Execution id="3d79848a-16ce-42d0-af33-79030c8bb95c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="548767c6-54e8-611c-1ac8-184e1a1da656">
      <Execution id="6385f101-d368-4895-a90a-c4ba802dc7a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae59a19e-b7e5-1e1c-787d-3002506b4ef2">
      <Execution id="e8b18cd4-bb04-4624-beba-8eb6fa11d1a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="616f78a7-594a-af80-5ffc-de76f568ebcd">
      <Execution id="73d5d975-81eb-4b89-9092-a82d9294c766" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b6ac5ef3-a60c-a7ae-36ca-96f590be0bdc">
      <Execution id="434af5f7-c8c9-486d-b056-89500ca8bdb6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5750011-f041-ab29-822e-8e5bf311aa10">
      <Execution id="0656d25b-7ff4-43c8-b1d9-6abb4a1d11ea" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0721c4d5-17b9-7b7c-1851-6219c237587e">
      <Execution id="105e30eb-f680-44ca-a376-1e11411b995e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35e51989-4a9b-41b5-612a-2c20c7b72507">
      <Execution id="cd057bd9-87ee-4763-b636-f28efb898877" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EndOfFileToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="daa61973-3271-ce89-c31a-bf954d310bc6">
      <Execution id="78e556fb-5972-4699-998c-c4d81ad56595" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fdcfbe97-df7e-bb35-4151-7108627cf446">
      <Execution id="2cda6e1e-88da-4fca-ac03-8d74307b206a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c74e4f3c-9610-9063-7a98-f2ad25290514">
      <Execution id="4c420e96-a241-4f4d-a6ca-f51d819e36e2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ee038337-7e83-3829-4541-262112e525dd">
      <Execution id="2051d83e-d5f8-4488-92f0-fc2cc1916c60" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="95cc365d-096e-cdac-d837-d13e2f512980">
      <Execution id="adf03795-5530-4266-b5d9-13d90f2f72a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2b485f0b-2dbe-31e0-bd95-65cf001c6938">
      <Execution id="889a174d-7ad2-4f20-8ef1-ec2ec4fd9073" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ba92cca-fc30-4784-5795-92a63ddb8ace">
      <Execution id="b83af85c-2393-4964-a2bd-8b6f468f5bf1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3a5d0aac-7a95-3dc4-98d5-1cb11b17ba92">
      <Execution id="e9bb6c98-b181-40c0-81bb-bd83670987a3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34491c98-812b-f1ad-1fb1-912463a251fe">
      <Execution id="4b5d1630-8304-4f79-9e9b-6bcabad946e4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9526fa6e-7224-8e24-9bce-9109effc39af">
      <Execution id="0432d5cb-ff2e-4dd9-b50c-167c88260c68" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="45f1eccf-4511-2821-5c57-d9806eadd586">
      <Execution id="8e24433d-e083-4472-8b13-74c3a3cbcbed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2609c142-3c09-0ed1-04d3-54ca1cf691a6">
      <Execution id="f90e51fe-5e38-49d1-bcba-d69605447e12" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ee6390a6-7327-bd96-d63b-de81370eef3e">
      <Execution id="c365902e-722f-4287-8db4-c3096d14f9bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b36ad573-889f-11da-5d89-084e8740cc3b">
      <Execution id="51c154b9-1294-4ca7-ac9b-d549b86b8fc3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="137836f0-201a-7615-d8af-56cc6df7f3cc">
      <Execution id="03a2fdc6-ab6c-4cac-b5f7-f56ab486a759" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aeadc46d-47ff-644c-8d18-c48a5e8b6ea0">
      <Execution id="6f17f187-313c-4b83-b47a-bca7bae9c6de" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5bb271d9-6599-f129-6caa-befb58d5e417">
      <Execution id="714877f3-35ba-4734-a000-6be833cc86b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac25f40d-39b0-a819-0d3c-3c1118a21938">
      <Execution id="3b9a4ee8-afa2-4ed2-bc13-0bcedc220824" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="097e25a8-7a7b-218e-969e-d9e317bb5de9">
      <Execution id="7fd5cff2-9bc9-494c-8f87-341a3d613874" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f49b75c-26bd-4d6e-c6b9-73b9b81f5b60">
      <Execution id="06fbd80e-903d-4efc-a1f9-3f744fba0c12" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8dea5209-632c-ac1b-2ef8-e02792992681">
      <Execution id="dcc910ff-1624-4b26-9f76-c37a530f3c6f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e12d030-3412-21b4-ded9-c23c1e95e016">
      <Execution id="a8770c09-0cc0-4a3b-8e27-4053f7705f46" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="77301279-a302-d15b-c4f2-b0c398e8d511">
      <Execution id="13a073bb-42b9-4bc0-9e58-7182a34a4aa8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="474816c7-e6ca-82e0-f8e8-ab2978be6e1b">
      <Execution id="c9460a25-4400-4d3c-97e5-ee6478e5e0c7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a7e34338-1f42-723e-c674-8be1d5b5abd3">
      <Execution id="74aa51e1-1cab-460b-b215-7cdc1c8f36e2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="770858a8-6709-fa27-4697-79147472553c">
      <Execution id="9b70e01d-73ac-4434-98f0-fe9a5971c92e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="866d9682-34b9-b6cb-db8b-509d64497f78">
      <Execution id="8b07c79e-b83e-4947-83dd-3b1106fff31c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b48c1cde-ff79-b262-d23b-2c472fb4d5ab">
      <Execution id="6ae21cb9-5140-4bd0-8c52-705a6a36a914" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3fd3e56-f00c-60c3-5791-562446927538">
      <Execution id="bf3e88d4-8d04-4cbb-bcde-93874d5f07dd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b39320d-a709-a77f-5d1c-aaa6a04bd2a3">
      <Execution id="09549b6f-631a-4c83-9ef9-3e927da94434" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3557232a-f63a-617f-ca31-42e504ed4a77">
      <Execution id="0bb8385e-6b09-4691-b57b-eb828b8a811d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="37572768-763c-2507-76e0-88ae10ffc169">
      <Execution id="1ebaa288-1723-4599-b62e-f30c3bb52f8d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="245f2443-c738-c132-a903-72f4de2cef73">
      <Execution id="0a3b7164-c50d-45fb-8aa4-b8c7a6202784" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6e74c94c-91f7-ba0b-a90c-45d0e8e84c53">
      <Execution id="7ce38daf-8852-4a7e-825f-aa902e5d0340" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58eff7f5-7e47-8617-2a7c-4036d4a28a9c">
      <Execution id="9af567d2-d580-4e75-a003-3515ebdd936a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6916d7ec-6d38-30dd-6143-5bae873536d7">
      <Execution id="c427fb8f-f3c0-4f6e-bb21-2bfbc90d8876" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7d1ef23c-d9a8-c125-71b2-9b0f48ad1725">
      <Execution id="f474dd96-1c44-4cb3-8b94-7b3624cae1eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49ce95ae-6947-45e6-c831-190f8cec3ef1">
      <Execution id="e4fb740e-5867-4bcd-9b2b-d91b3238eccb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6262b297-fd7b-04ca-34a0-a72d272fef08">
      <Execution id="4771b96f-09a0-4179-95ff-219b9cfefb36" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d133efdf-c2f0-276d-c870-784bd756c438">
      <Execution id="ef73687d-fa29-4b0b-bd5d-29dbaf86900b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="282134f2-fd8a-5245-2f12-9d92414616b6">
      <Execution id="be84efbd-2091-476c-bf74-002e635e8b2a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f26e756d-8d88-041a-c13d-649383380ab8">
      <Execution id="27f629b4-185e-43e3-b6fd-d06f0f23bb3e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a23078f-111a-f274-38c7-77692604de84">
      <Execution id="5b053ad7-cf60-4690-8f17-276f776334c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6773f377-fc7d-9568-a15d-35527c842db8">
      <Execution id="b044320b-2d60-4690-9279-05274d88bdb3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1cce6a0-ef57-222e-45f0-bf21b6b67406">
      <Execution id="a9ee90f3-03ef-4918-aa7e-a577fceb2714" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a4f2384d-7d1c-6f25-2a97-d4c510f8534c">
      <Execution id="d33386f4-00f6-4f34-9c52-4a9d5cfa5ca5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd7af9b4-33cc-c8fe-08fc-95f189cc6770">
      <Execution id="4dbb9af9-4071-485e-af22-44e8a9b48c73" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86c330b5-9d10-0731-3f25-7f6cd8f61e9b">
      <Execution id="b8a52c20-9542-4820-b761-c1a2cc88c141" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9dba3a61-fd4a-2065-5987-f970272c7145">
      <Execution id="b1ce91f5-63f5-4658-a8f6-beed20b21ab8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="14bac60f-04ef-5b16-0736-1c995275d1c2">
      <Execution id="7591ec9a-c487-477e-a555-3cfb965061d4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="775686ae-fab2-8cb1-98d3-874bd9eef7b5">
      <Execution id="1af274bd-a87c-4020-88ee-c7c8ea9b8f3b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f71c1240-14b3-fd17-695b-3bcf88187400">
      <Execution id="3e0298e3-731e-4325-89de-d9bec31de8e1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c889f155-0be9-b79a-e6bb-317b9808aeaa">
      <Execution id="00a35511-90fc-4320-9e53-62c203fae812" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3d934580-be60-7ccb-43c6-4fafc6cfc4f2">
      <Execution id="edf92b5a-6417-427e-9525-10962312eb0e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07b4b32a-3797-0eb8-4d0d-8c30d2a55c58">
      <Execution id="6869a894-c92e-430c-b9dd-9ca6e36fc9e0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ddb5cdbd-de0f-2b49-2754-724ad0d65a4b">
      <Execution id="0ceb4003-d53f-4363-946b-c5c2c6a82f21" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bc84a832-64b4-c9c3-a7c9-fc6bb57bd8f1">
      <Execution id="3e9f634d-d0f3-458c-acab-afad5502a9bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7c1c5a96-54f9-9ab1-ef4a-f63b872285e7">
      <Execution id="314144b0-fa3c-46b8-bfec-b1aec00b5b1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="91d4c3fc-9d5d-e52a-0805-b3dfd0aef057">
      <Execution id="d1811388-57c7-4261-99a8-e65d0d1982cd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a286f8ea-8a03-982f-b207-05580a9ef8e2">
      <Execution id="4b73c14f-8dc0-48ab-ab13-3cb576afb8dc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cc3ba808-cc9c-3027-c16a-9cd32c8dde28">
      <Execution id="7daf6ee4-9eb0-46bb-acac-bfce61811145" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cc131270-69fe-a159-b9d4-933fa46ccf10">
      <Execution id="38c96877-4681-491e-9d3d-22eed77110ba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="31e235ba-1d72-8453-ab85-3f772d274952">
      <Execution id="1163c610-4b09-4bd0-abbb-fafdf0bee673" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ab36ac4-3c40-17dc-4e73-ab59eaa12ea4">
      <Execution id="18f2f238-51c7-41ea-b9ca-9f62e6819316" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c12c2782-fd33-198b-cb9e-8e3540bfe875">
      <Execution id="5cd55126-1df9-44b0-99d7-894a95f42805" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28221ec9-9edb-9fd5-0959-ebc0979ef9fe">
      <Execution id="7fd063c0-be3e-4414-9a54-d8e781ce88a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2af27e7e-ee3a-3357-a3b7-c75818007f9e">
      <Execution id="e4a3dc7f-2782-43c4-a3fc-6a93fc3d4c57" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1264ee1a-eea4-c783-0018-e3b5dbac7f6c">
      <Execution id="0e03c42a-e614-48ea-92c2-2e708bfa7c0c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53d9f532-8011-9f0d-f90c-d0ae9205300e">
      <Execution id="c287bf1d-2479-4213-a5bf-098fe46e2395" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="feeb523e-1f32-a999-0336-669496f711b2">
      <Execution id="33a6fb5e-e40b-4a64-8e06-63af24e86f21" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7ebbe48b-8d7b-aa11-383f-f8e9a7643e7c">
      <Execution id="4b92b2a2-ada4-43fc-a975-77253379d913" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3abc950b-35f6-2fdb-1885-6727b1ef844f">
      <Execution id="18a14eec-a410-4ffd-a83b-d6364cee6965" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="50b3c91b-49dd-1f07-51f5-bed2bec06291">
      <Execution id="f8c4c70e-28fc-4de0-9ee5-701f82d6fdfa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cbc91c25-bd4a-a5ef-92b3-d49611d21938">
      <Execution id="adefebcc-e4dd-44b8-be8d-717439a506e6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9fd49f9-7453-b747-5aef-6ff46c317e32">
      <Execution id="484e10df-f64a-4c89-8ee0-2a4aa3def3eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: CloseParenthesisToken, text: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dbbb5b12-4ed3-ae86-d182-b6988ce3b545">
      <Execution id="9ca26364-6c5b-4255-a4a1-46e582e6d3d6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab07f154-65a2-fdbc-3f53-a6b82956dbb8">
      <Execution id="409ad1b3-472c-4f39-b801-ef8ce7741991" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0ecf2ff4-801d-b818-d5dd-25a109711ece">
      <Execution id="ff34386f-f58a-4784-aa45-5550f41ef186" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bc59fed2-e4f0-09e5-283c-beb1ad2d89c3">
      <Execution id="88786c8e-9284-4490-8255-4df4b799911d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6d09990b-fb3a-137b-6b4f-cd71517ff384">
      <Execution id="bae706a9-ceed-49c4-a674-d21dec5961f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bf05d999-7dfe-c027-bd92-5bc4ffe1a55e">
      <Execution id="cf13d0c6-27a9-4cd6-8d83-4876c265e109" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a14448c4-61f4-e68d-a70d-ec29fe8951ad">
      <Execution id="be87c4a1-da60-43c9-a83a-28a2f5a4a2be" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e0651e0d-af41-740e-a58c-36cb5e186905">
      <Execution id="5cba5d8f-5361-4068-8e0f-4fe2821b4f4f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0aae28d3-63fd-f6df-f318-07643f3d6735">
      <Execution id="958865cb-eff6-42b5-81a8-1382915ea4f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="101e169a-b910-aa6d-481e-d04a99bcf24f">
      <Execution id="091a650b-b694-4cb4-9f83-a609110d60e7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="77970192-e8f5-64a7-7061-0176921f9510">
      <Execution id="9d04485f-83c9-43a9-90ff-cc77b9508a24" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="668d4a85-5931-6d95-ecaf-98d580c86473">
      <Execution id="5fb7f8a5-8127-4276-9077-d225409cb29d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b25ebda1-4b3c-28c9-1391-287108f504d3">
      <Execution id="f87a48ac-92dd-488d-a20d-95e36d45e4f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e4ed39f-1f88-517f-cc09-07e89875ed71">
      <Execution id="d12c1fc3-c96b-46cd-8662-69ffe99f163c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9886ffd9-cc34-4f96-6272-cc7c353f348f">
      <Execution id="cde57e03-7663-4032-9fc7-c68bfb8abfe8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7c79ab1e-009c-f703-ada0-a2acfc364e52">
      <Execution id="7e5d3355-d55f-48df-82ff-1c2a9e983854" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a2c244e5-40b5-1ffc-6dba-8f301b743803">
      <Execution id="99d595d2-b6f4-4b8c-aedd-91a6ff1414c6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bab4e241-5249-6635-d11d-1fc7374b9527">
      <Execution id="a4b95ed2-9fdc-43f8-89a1-0d5d6055b8b6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9539023c-02bd-bccc-a476-32ba7d1bc93e">
      <Execution id="d956aedc-a5a7-4d87-8811-9ff83e50d7f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a20a62c2-26c8-5fc6-87a0-2633f9ac14b0">
      <Execution id="bcdc03e0-fc1e-4b09-808b-a44daf5b5ca4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="291a42ac-0ced-1b10-a153-45ac82247332">
      <Execution id="f1c8c6bd-4708-44a0-a3d6-dce82b2c1c34" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="197ebdfc-76e5-dfeb-06e3-1b0a7c3659ad">
      <Execution id="f5edd46d-311a-4c0a-b3d4-2e82a0e191aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e9d9bc3-cebc-6f42-e7ec-bdf5cebca6f6">
      <Execution id="762817cc-2755-4bdc-a1cd-10644ac04f08" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b17962e0-59d8-2aef-f927-43e4cfc84331">
      <Execution id="e0afd75b-16a8-46e1-aa78-7b5058fba6fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7e48c3d-8012-0f75-a07d-6ec26f0241d8">
      <Execution id="991dbd24-1509-499a-ac3b-98eec1f99a96" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9fdb1f01-9b0d-0e31-f85e-1e1b5dc54584">
      <Execution id="5b2ecef2-83d3-4408-8e96-d3ec0e67263a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5b9a13d-a8a6-c76e-90d5-8a8ce8764e47">
      <Execution id="e28d3bb1-8d5f-468f-a5db-f606164376aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c6ee2931-5868-abcc-03c0-f5e0a37a6274">
      <Execution id="6aaea1f5-697a-49b8-8a51-3d04042bb20a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="70074241-0b21-85c3-f018-50178364a367">
      <Execution id="aba73a98-a89d-4c25-bb16-4b719e67f230" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IdentifierToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3d9dc50-2a62-4d82-9747-7c42d8d895a0">
      <Execution id="168e878c-dfa1-4b15-ba48-95fe9dae667e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="64e4b180-cf4b-3791-f430-5ee8e568558a">
      <Execution id="16cb3273-e107-40ee-924a-f7382c6729bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3bae51cd-6435-fd29-8f90-90cb46243bc9">
      <Execution id="04d56bb8-17a8-4dee-a461-25bd17c9fda3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eb28a732-7c20-85d0-2717-7553dd1b18ee">
      <Execution id="fa4a513f-5c9b-47a8-a7ab-fc705e053102" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4aa688d-0813-ddb6-b212-e75c73bddd08">
      <Execution id="6bd55bbd-5db3-4c13-84ff-9bcee0bce72d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e5076cf3-0f6d-de80-49e7-7bcc69dbbe4f">
      <Execution id="4881a90e-6c8e-40db-ad37-b6805317895d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a74e75cd-fbdb-6153-ecd9-f5ebda83038f">
      <Execution id="9729f860-9672-48b4-aafd-0bd134e601fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f9ac562-96f2-b208-2d9b-1fd59e3943e4">
      <Execution id="69d79382-c774-4196-b7c3-ee0c711a91a6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="abb98cdc-db56-2527-f25f-fc0776e9ac6e">
      <Execution id="c85fb488-1c4f-4088-8910-f1f98886e6cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2dadfce3-2433-7830-4f3b-cb77dd1382b2">
      <Execution id="18934173-5ec5-47bf-9932-5840361ecd72" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2672b68-9898-06e8-22fb-63297fa83f8b">
      <Execution id="cdb93462-d8c4-4400-8546-ebb31eed2481" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34fc7beb-c521-a483-312d-58441beb1bf4">
      <Execution id="3584de8e-0bfb-445c-9bdb-db88f9e1cee2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c3d7d6f0-4510-1bcc-2f95-d81eb136f568">
      <Execution id="4acbb76b-277c-4813-ba39-3dbc9e737f0a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="50e5ed68-a702-3cd7-f018-e01837779d48">
      <Execution id="fe07a6e9-f55c-4c87-a867-beb5f6896e56" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6b8b981a-5a47-b293-2358-89ae499a4463">
      <Execution id="c0a31b5f-4620-418c-9c0b-3d6922a8e3a6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2e5f1912-5862-356c-7a12-7b5889b82828">
      <Execution id="19b759ec-2951-4fdd-9b36-c82e889f8680" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e33ccd29-ab0d-8e2e-71ea-738d0787a423">
      <Execution id="da248125-108b-4b1f-9ffb-a145bb9fa50d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="54928b44-e84a-80f8-9464-3bb1fdfee9ca">
      <Execution id="fb88b717-21bf-484e-b2a9-8cf341f26591" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6a9c2a03-174b-1a3f-b47b-6bdb91315d9d">
      <Execution id="eb15a00e-0938-4c31-899f-12a0e8af45b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e7fc613-a25e-d882-c55f-de67e8443212">
      <Execution id="e9ab3278-64f7-4bb4-9481-66543393bf2a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f6c274df-26fe-a97e-9693-23cfc4dc2423">
      <Execution id="096a7aac-6e31-4854-a8a7-6a778a0963c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="10e37091-7c6c-888d-6758-8f069053bcc7">
      <Execution id="0d922958-91bf-41e8-8c64-b8a632d16231" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0ad88f5-b91f-d569-ff6f-7bb967a3b637">
      <Execution id="25e62e62-af79-45f9-bc92-f7f02d8a79e0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 + 2&quot;, expectedValue: 3)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d7d4a999-8c0e-190b-0934-b0fad894f7ec">
      <Execution id="e44818c8-daee-4371-bc8e-f9e318747fee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9ea1ae3d-0a97-dbcd-06f5-80272c5f5f80">
      <Execution id="826516cb-6f29-4251-8693-40e5990bbd1c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aff91cf5-eef9-b75d-d2a9-0b5e9f477751">
      <Execution id="c5888bfe-5a77-4cbd-a856-7afb6608d722" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4f40087-83b2-42e2-8a34-30a5e04132d0">
      <Execution id="a3e2d023-b12c-4611-b654-6672bea0f69c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a7ec4ec-ba32-0bb8-29d5-4b0e6406f994">
      <Execution id="f0ccceb8-b551-4475-ac87-ec8c423f561c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cfdde934-033f-09be-9725-a9c5901283e9">
      <Execution id="b6221099-daa8-4bc7-987d-86e3df107200" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01a11a8b-a37b-6f57-9869-3c82a79c16cb">
      <Execution id="1518d9c5-1526-42e0-b7a2-5ab426fff364" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2b27a2e3-0254-2219-104b-92b08d525d93">
      <Execution id="0088563c-7e3e-47b1-bb69-e80db07f4800" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="92b61aaf-2a42-2153-b00b-52cf8fe3231c">
      <Execution id="b6351ef8-2edd-422a-86d6-129ae3b24a63" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8324dac0-770a-3b35-c45d-edc9ca07c783">
      <Execution id="acaa22a6-7b37-4b13-a56d-de92d49193e9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6b591c96-3b55-7e23-4843-7204d293bb8e">
      <Execution id="7e7f370e-f101-4443-9439-ba030c286ebb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="374b856b-c756-e341-14f4-bedc0ef17087">
      <Execution id="2f242b87-e3d1-4c65-baaf-74f8d1f9dc53" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9be95313-2c57-07ce-3e37-fca7cfb67227">
      <Execution id="fa0b865b-ede0-4475-805a-d9c0a8dbe8dc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a3a849db-e1df-055c-abe8-556ee4708f2c">
      <Execution id="e9812a8b-b188-4c13-ba42-d3cf83eec22a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f5a8a390-a377-d9c2-20f7-7892861923e3">
      <Execution id="3644bf25-34a7-4316-91ea-e5d4140122d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a8fff263-616a-ed9e-e6f6-c57bf505cb31">
      <Execution id="5e6d024a-24bf-4380-90d1-6f87f913491b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="68888a81-ca11-a349-b000-6bfcb2f09535">
      <Execution id="81511fe2-35d9-4371-9203-ee0582903f36" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="69c7177b-9463-e131-33c0-74327be87bf6">
      <Execution id="84ae8aa5-e7db-48a4-a172-d9459fb26d7b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a274f952-322c-df98-4865-9404d7d16948">
      <Execution id="eb956a8f-53d4-4eb1-b347-c7a9153d3047" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="797e11c6-f1a2-a527-55e5-7c6c8c654291">
      <Execution id="386c6780-1891-4980-9b9d-ddf5f170b2fd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f84c92a-3a02-4087-04fe-44c5e6c6920a">
      <Execution id="e6bd3368-62ba-4dd9-82a6-187b70b39771" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9419445-c7bc-bd0e-edde-daf3fb346002">
      <Execution id="93153866-0bce-4195-a4c8-b787bcd4e4be" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="367b93b4-4c67-c69d-066f-e2f5740932be">
      <Execution id="136b2a93-3256-4cc9-a30e-18e640381dd7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="681d1fc0-91ed-812c-98d8-18c7305416c1">
      <Execution id="dee8ce9b-1347-4d15-857e-3ee76a018646" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0ebfb59e-4d50-c23c-3fe4-54001fba7b92">
      <Execution id="71f4ea1d-c79a-4f07-a6fa-0dfb6a1e3697" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07aef847-d0ed-4f9b-dc78-586030530964">
      <Execution id="52e36515-bcce-4f8c-8aae-9880effde0c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1dc6c472-ffaf-4b2e-7e59-ebc84e2a1386">
      <Execution id="ca8592d3-c665-4e4f-9c86-995975a7ae61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ff2ca775-6d9a-2740-83d2-5e94759910c7">
      <Execution id="96f18a2a-7a3f-477e-8186-560801b485b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cf995967-70b1-4b03-85c0-74811809bb0f">
      <Execution id="bdc918ec-e850-45f3-9b59-b50dc6615133" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="04ed02cc-1006-65b6-5ae6-8d1f09e61fe4">
      <Execution id="36ce6a24-421f-4c63-9caa-8544987c7618" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47753b59-02f6-7076-0f6e-0e2badcc3543">
      <Execution id="bddad724-6479-4f88-b7f8-a0568b13ae1b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="57312071-b0b0-21fd-62c3-97ce67bd534f">
      <Execution id="d66a0c26-8140-4463-91b5-f22f849c3a35" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="83cd0db3-f064-df18-2507-ba9cc6514cb9">
      <Execution id="9b9c3e70-ab90-41f6-b40b-4a459c82e100" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a040e65f-ff03-c706-2948-61966d6569b6">
      <Execution id="eb3fadce-2764-4aeb-894e-3e9c7dd03ff6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="54f6ecfb-35f0-c829-3716-2201c6cd8ec6">
      <Execution id="3048f590-e073-44b3-99ba-dc5ec3475fc5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13b9ad0c-e0e7-6e4c-7fae-4cce0283d90d">
      <Execution id="022b3668-990e-44ef-9223-d805ffc073b4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4fdacdee-a8e5-4ae5-b7b1-0dac130a9628">
      <Execution id="cd3ff555-bc67-4422-afce-25c7c0d9ee93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8524b3d4-b0f2-8602-c61b-6b328f8cd68d">
      <Execution id="b4056566-670c-44ca-8fe3-17f95d9d1b75" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1bd4c0f-03b5-ddab-49de-b18c2c2b1295">
      <Execution id="c8958111-a6a2-4821-b2ff-560b24ff407a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27179903-07e7-a781-c7bf-fe297d4436cc">
      <Execution id="b35a1799-90e3-4dde-944e-8e48ceed1af8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6b53a09d-fb08-ae82-694c-fbd906816c3c">
      <Execution id="8e5b9039-5240-4c36-bc5e-cf4a9256a842" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85a4c108-3ca2-d3c2-e8c5-420582eda7fe">
      <Execution id="657d0a6d-d81a-4878-aad7-c937d41d752a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1027dd2-1292-74e6-8440-3654a6bbf454">
      <Execution id="bc4f2ce6-d3b7-4dcb-bd17-d9fac7d1fa86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="279e95ed-62ce-3800-7a7a-79939f0ed206">
      <Execution id="ef992d30-61e7-452f-8b28-9add70d5ef22" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="10c5cbdd-ac7b-03dc-7ea3-9b9f703e7948">
      <Execution id="dc056a46-3a1f-47df-b91b-adbbe1e0d610" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3715b5d5-0839-4e57-9666-04e304517ed7">
      <Execution id="00325ee9-0689-4219-b132-5d67e83a45fd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="12da865b-7ff7-e1b4-5ace-3bf0d494e7ec">
      <Execution id="ee10b6e1-b6fe-4a9d-aa91-884dceb91112" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5a3f14fa-861a-97e1-92a5-516888056496">
      <Execution id="62dab833-34fe-4f05-a407-d1b95f1ead70" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f113ced-fbc9-ab46-7749-a167fed2ab42">
      <Execution id="a6560ac9-4000-436b-8da2-8362edc83a53" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6875a23a-9cac-89fe-db7e-e30b56441756">
      <Execution id="04decfa2-fbd5-4246-9468-976cdca78824" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a83b94b6-5131-a3b0-fe80-fc79efa0c524">
      <Execution id="e3a1e958-791c-47b9-9c7b-aca0a20be9e4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ca096ea-3b45-67a2-0cb9-d39c1c31e8db">
      <Execution id="a2734d3b-1d9a-4fdf-8a06-5c624f7a9bf9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07418d7e-91d3-dbff-d2dc-9c4545a34911">
      <Execution id="2516fd21-9f74-45fc-a680-df492716a224" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5a8e94ab-43f0-8419-9587-651604193209">
      <Execution id="e18bd266-39d4-455f-998a-41b5f87f2148" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a90a1e30-e055-bd82-018b-3888f3b6a616">
      <Execution id="2cbf92bc-bdac-48a3-9718-fc369e846ac1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;not True&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3361b9af-c9be-eed8-5242-2bf37365f061">
      <Execution id="51d96fa8-8c15-4914-88f7-d9113f318986" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86b8a17b-ad58-f896-f715-d1f51bca7765">
      <Execution id="bfe61f8b-f785-43d1-a9bc-eb1e8acf0ed1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0d1b0779-71c8-303b-6f41-377cde531eb2">
      <Execution id="509867f7-fa26-4a34-91f9-ae1c30ac9e55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f8b95e8-fac5-c72d-8d5c-72c41e1f6e6c">
      <Execution id="e7c02ac0-feac-4f0f-ab54-8c2fdfaab136" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3564b2c-77e7-c63c-9682-71a0f9869458">
      <Execution id="b1b2a4be-a717-4ab2-8465-47e5dcf08eb2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bcc3baba-fbaa-4efb-c57c-592a57cc1b9b">
      <Execution id="5f2bf45d-4040-4899-832b-117b13f6a3ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6300d988-30e0-379e-9b4a-e67ba56ff3d2">
      <Execution id="68a30c6c-8a15-465c-ae85-5cb41ba40139" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd0837cb-8ce8-0352-e69a-23ebdba401d2">
      <Execution id="67541dfd-591f-4889-95cf-0aea4389f691" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b6f77f76-07dc-f7d5-0458-ddc947095e88">
      <Execution id="8a9fa2e4-afa3-4c09-8708-08aed6e20f66" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4bd7d042-38f9-c8f9-c6ae-14a1fe60d16d">
      <Execution id="9fd1df30-ac26-44e5-89f2-8d1520f36d9d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4cfc4d99-8f73-00b6-ba7a-87038bff3d98">
      <Execution id="805421fc-282c-45f7-a817-420c0d29d1af" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75e3412a-7df5-0c0e-912e-56f982589520">
      <Execution id="c389f35c-70fb-4226-9f95-11e9f487314d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02daa515-0baa-3d23-4865-c9f46b713f00">
      <Execution id="9d2e14d0-2be6-4db8-b03b-fd1498e67d52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a8d4c231-c004-9147-067a-455bf39a88ab">
      <Execution id="499f5234-52b2-400e-bd28-6e3bd960ea5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b4fac98a-db54-ac55-7eb5-d215da6a6441">
      <Execution id="8d9dd524-447c-4935-9ea1-b5b545a617e8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b009ec2e-05ea-4420-8f89-1ba8dd8ad4ca">
      <Execution id="14d17cb3-1753-4634-be80-960299cdfd0d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3402b273-8416-0af3-3186-1f9fa4823f7d">
      <Execution id="676f1eb6-7afb-4d41-aaea-6727f1c5e980" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="30b239dc-1dab-666b-2a9d-a48bed38f9ba">
      <Execution id="c37b1302-6afd-4f50-9ced-496ea164b025" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ff976bd-8607-28c7-b9ec-9f76bde4e93b">
      <Execution id="05e0a75e-c5eb-426f-95a5-e73b6ca8ff3d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1a6ca602-1c90-deaa-3432-848fdeb65bb4">
      <Execution id="161c4051-eff0-43c8-b624-18b563f0163c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fd916b1c-f22a-ef36-2921-a46d6adf0c32">
      <Execution id="49741781-a993-48c3-aa2f-9298d7fd409a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3f33c019-05e9-0aeb-9667-84ecc99ee1ca">
      <Execution id="0fbcfb70-d3e6-4aec-8ab5-7d1c5d198206" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c4cff9d4-ce90-962e-f388-057396bb65b0">
      <Execution id="a7b14dfb-d1df-4af5-9de1-722562e4822f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07d9a77c-a1c2-a693-444e-406cde40d743">
      <Execution id="352ea05a-dcc0-43c0-861d-8fe3272647b9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7cc69a96-7dbd-689d-8201-919022b4aba1">
      <Execution id="35ac925f-57f8-4b65-821c-438d3ebd2396" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="65375472-8cac-6004-4685-18d23af2b064">
      <Execution id="65296678-3675-4239-9d20-7b1000f1f415" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="99cd600e-a1a6-1eca-c7e7-3249de14498f">
      <Execution id="9e6106d2-d42f-4db8-88be-5c827973d3b7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5417918f-f136-1971-817d-b9a0ce01ca07">
      <Execution id="b7dc7138-534b-4126-8512-5400ec167b49" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="16a5f0c5-0903-615c-9dfe-609d3cf842c0">
      <Execution id="0f49c796-70d2-43ae-a44e-6af68b794c39" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="df26d3b9-f003-5f23-426e-c06ccd4a83bd">
      <Execution id="440d766e-9011-401c-bf9f-117e7c2d6a14" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d086f8a-d319-8719-3091-bebdc9937485">
      <Execution id="3190846e-f02e-4a54-a243-22205994b2d7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f1eceb5-b579-426f-37c4-b8e03cc54c8c">
      <Execution id="5823da90-8fca-4918-9b3d-1661ead3a024" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="96bc8447-64d2-32a7-244d-de0c8b356d3e">
      <Execution id="b3eec0d2-eae6-44fb-9260-3ca4d393874a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) is not 12&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8d03796-c0db-b253-1d1c-3810c9ff1316">
      <Execution id="5070ae86-6733-413f-8417-c9e244254fb7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28faa725-c103-bba5-7e01-205a73572d01">
      <Execution id="4a860806-7f78-409d-ad80-9fc0e8230175" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35acdb8b-c38d-4a8e-9f18-01db09682693">
      <Execution id="4398fabc-3458-4f02-8fd5-ea3d0c2db195" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7574193-0919-4ce1-962c-5132655dc275">
      <Execution id="9ed6c00f-c1e9-4e35-9a31-339f215c2b54" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b80a87c2-c3f7-edaa-13b0-f2afc20b7c07">
      <Execution id="d19dc9b3-f1f2-47b5-9797-0c04bd0aacc8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="210f6e22-ba1c-e98e-5dd6-be3648d84165">
      <Execution id="56c6121b-3976-492e-bd16-19174fbdb36b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7aa0b704-640b-7ad3-deb3-a8c1fdc12712">
      <Execution id="bc5c3397-05e6-4a6b-9ab1-e807b9a83f32" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a40a7cde-7f1f-b79e-8f2a-4dcabd0f541a">
      <Execution id="54fbd1b8-4992-47a6-95d3-af371e83a023" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) != 12&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d3d5f6f8-0015-e7a6-45c3-7fad7932dd19">
      <Execution id="2ba11ef9-ce60-4f8c-8681-a5878cbafce7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0083e126-a390-8aae-f3a9-95083d510c56">
      <Execution id="5687185e-77f9-46f0-b22c-713cd7708344" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5514a06f-242e-0af8-9dad-b95bba7e5d0a">
      <Execution id="854a92fe-d681-4458-ad87-3d69360595fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36941d16-f5db-3461-4010-38c9d181c102">
      <Execution id="16d29fa7-8e99-47c7-a14c-998c903a8b42" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b5117f5-cb6f-fcfa-6a9f-ac621a1b49f4">
      <Execution id="3564e4d6-4b56-4845-b0e1-25ec41784aa6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;10 != 10&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="764842c3-78a1-27f1-8347-b98d7ce4683c">
      <Execution id="890b9fa7-6ec2-41dd-80a6-ea63d6472966" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="64e38fa6-35a4-7a09-2052-19582fb62dc3">
      <Execution id="91910a54-a0a2-4254-9e6f-47f96f787158" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="97af4051-eaed-a27f-8787-ad01bf056dcd">
      <Execution id="26024957-cc3d-408b-8459-6105ff0ba910" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5097969a-25bf-bac2-af5d-dba7ab907147">
      <Execution id="f4960298-77f7-4d1e-85e2-33be3db4fd9d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8cfbeabe-5a29-519f-d50f-1fa7986e2efc">
      <Execution id="7ac0de81-e950-4853-a9bc-2004f3faf372" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d374f746-3f17-ee0d-7224-30b5c7012ea5">
      <Execution id="5c2b9d6e-d14e-44a0-b5b5-dfaebb332e46" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d3fade6d-b041-31a8-aa46-eb996e77fc05">
      <Execution id="d89c8201-502d-4b3b-9f40-9a81920a1413" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f3ea1a5-bed4-1b21-f15d-9dc837ac21b4">
      <Execution id="80e97190-8ae5-411b-9a12-a8e5afe343b3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d4ba70b1-c039-13a1-45ff-428ac0ea6738">
      <Execution id="7f86d7a4-6791-4689-8429-06fc7b6e2a2a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b7dd7f2-1952-77c3-f373-97c7b0a59069">
      <Execution id="7894bb59-ea72-49b3-937d-026f19e67861" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="020a0aee-b19d-75b1-e718-e8d539dd81a3">
      <Execution id="f40498f5-98cf-4c53-a0fc-4b41d9497626" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ee6ec60-7b9b-4393-a25f-cb03c018c52d">
      <Execution id="21ee39e3-8f62-4986-9c21-a405c7acc7d0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="777fcf8e-1d66-fb45-ddf5-695b552b306f">
      <Execution id="2f620318-c935-4864-8dc9-7ef61d06b3ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f279bb56-26a0-1f9a-2654-8ee7faae7551">
      <Execution id="b58fe8cc-65cb-4ebd-adda-f1547d4de577" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="80741bef-cc26-62e1-3193-ed868fd8abd5">
      <Execution id="a3792a4e-3609-41db-80b8-f7fb9d63585f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a812d2f-7051-a9d5-0c04-3f6d3141b7e7">
      <Execution id="6c37a29e-9f7f-4ef9-97c0-90db29673918" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e57dafa-8ff6-1c0c-4b2c-2616814adddc">
      <Execution id="53729194-f12a-4501-bb3e-ea9535ee2af7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8332b8b1-df98-2526-b6a5-98e512172411">
      <Execution id="39aa0a4b-ae66-43e1-bd70-4a6eea22a81a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56a6b98d-130b-75fa-a155-2a7efaba2b9a">
      <Execution id="6ac7d70f-cb83-4843-b7b1-48628a3e44cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2690ede7-8456-c0c1-0ba1-6c20f9b52895">
      <Execution id="95def0bc-c819-47e2-8c14-f1caf4e6cd99" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c19465b8-e88d-a62f-cbc4-45c0609111a3">
      <Execution id="c6e19380-6be0-4a7f-9f6c-58233d385ef2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="96ff4a23-73d9-30f0-2811-19a5dcc65ac1">
      <Execution id="3d1fc16c-83dd-4d4d-978e-76aea1d28437" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="74d213da-7b53-ebbf-f2ed-62714b713fde">
      <Execution id="613a63dc-dc13-485d-aedd-5676ef08713f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07b53ba5-18d6-2a9b-bdeb-517a3b9924cc">
      <Execution id="44c69913-e316-4fcd-894c-952f36e5132c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fbca1f90-d3ec-7e81-b220-5d992083df67">
      <Execution id="8d1cf0c2-7715-4fc9-ab8f-eba6c0ad8bb9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bb27d552-19d5-f12b-6e25-20c68351c524">
      <Execution id="693e038b-91ae-4036-9266-b382f129fab0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb59336f-121b-0882-b66d-7eefeb3a7517">
      <Execution id="b906e7ed-1ca2-467b-b6ce-99e91f0ab56a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4725a845-5387-38e9-3e52-ed675fc78311">
      <Execution id="7bca963a-1b14-48fa-b183-456739e4ad0f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="74a8f961-9d51-0311-0d14-1dd0cb7b9aa4">
      <Execution id="7b3f1362-bc30-4f4d-8b52-b8ba6105b0ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="91e578ce-ec88-83fa-787f-009f5f67ce95">
      <Execution id="81a8fe11-f31a-41b4-a798-dcdefd871ff7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: SlashToken, text: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1094150b-e81c-1700-8f0d-247edaa0e74d">
      <Execution id="95b6fa63-5c3a-4cf7-864d-85718d330bed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ed7cff34-308b-2188-765f-9b38a8c15589">
      <Execution id="c37a89fe-359d-415c-89cf-144fe88bf50f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6ba528e1-21ff-98e2-b2ce-f2aa9f3e4554">
      <Execution id="4a5d7c59-6966-4e97-8b9d-c51be1fa8fee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="63bf1a3f-fc2c-3250-bd2a-1d4ffa56bc3b">
      <Execution id="cf5add39-664f-4b5b-b1d2-cd5b3af34774" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cf9d4b4d-2497-fad4-d5a3-5862e6e5392c">
      <Execution id="6c318b4a-3ad3-479b-bbc3-232bc91b5682" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1af9d5aa-4f4d-101d-37f5-9bff6b847f59">
      <Execution id="42bd6473-2500-46e5-b0d5-51856c4b8c5f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="37146f9c-50e5-df81-f85b-a080b111c5bc">
      <Execution id="6c67152c-cf7c-4f17-ab71-3f60a2fd19c7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="90e83e0a-8b16-1e48-624e-11285ee93e11">
      <Execution id="ebd9d461-7df7-496f-a7e0-c227485ad1ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5137272-c1b7-1328-54b8-e6d44d49931c">
      <Execution id="c03c40b3-e916-498d-adfa-401add286365" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eed4483b-d886-1a88-3f5e-1794edfb6b2e">
      <Execution id="01cab1e8-59bc-4882-9ad1-2e25ba7c10a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2e42543-5594-89dd-b6a4-6fe238a337e5">
      <Execution id="ca5ce426-ea5b-439b-906a-0c7ffd44875d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4cafdf66-5fa4-4ee6-5234-8b39983288b5">
      <Execution id="06895172-b9e5-41ef-8d74-3d730287141f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5bae3047-df7b-9c7d-e558-c27a0883e8c8">
      <Execution id="01443603-19b7-4d91-b4a9-39d05462a143" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f5378f77-e924-b851-abd7-ab0158fe4d49">
      <Execution id="bad26625-86c5-4f5b-84ad-ab1e98db1d1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="352c5160-69d4-4e67-8ae9-382be3f2aaa3">
      <Execution id="316aff6e-3e67-4b98-b071-0a8a8fd90b6e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3444d37a-8068-9203-1735-87ba44ab0bbb">
      <Execution id="92e3514c-dc08-4f0a-8e9f-d4c969c8be80" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="409246ac-c89b-79e7-164a-3be40fad3bbc">
      <Execution id="33755ca0-28c0-4f5b-8e0f-0d00bd342b38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e9d6960b-1453-223f-c7fb-ddee751024ca">
      <Execution id="aaa7fcad-1ff9-4dd1-a5da-38d85ecceed4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b875a8eb-5f4c-3bda-7f90-d8381641a09f">
      <Execution id="363ee923-297a-4b7c-9590-0f2b23eeb2ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fac57a1e-33b7-4a11-e8c3-b8d2559a1988">
      <Execution id="79b68ecb-239b-4c5d-a4f2-9482030e8461" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0731f931-8ad7-373e-5bdf-742442555b3b">
      <Execution id="bd9e422e-a1ad-4447-9b16-750fb0de9984" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07ec07c5-4568-11f5-40bc-3a4d78d85494">
      <Execution id="3c3a7e0f-6162-4636-b7c4-1204e4f99f20" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f662891d-f136-4d2b-3cb9-9e73ef5d0ac1">
      <Execution id="cd975df0-a846-4b59-b594-7f236f16f9ba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="40edfb4c-86ef-7423-6570-4f3e11164571">
      <Execution id="23af55f5-6cb2-4af2-aeca-7062b9bd274e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bca85e89-b229-2eeb-4f39-28130b9b10f6">
      <Execution id="ee46ae38-1766-46bc-8ab2-c44311fff409" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="84ddbf26-1b53-934a-88ab-06ef3d3994f5">
      <Execution id="10099af2-c9d0-488e-8362-8e79fef6e4dc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ebe96a17-6d98-4a1f-d0f8-24395f4e2aaf">
      <Execution id="27470341-58fc-44c8-8938-c7e5aa9e5b39" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cfb42feb-e685-4a2f-56a0-d161530bff88">
      <Execution id="a8a8c172-df62-4a08-a176-0b2d89a33e9a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3ff0a76d-7152-6c42-6721-c48e73a2124d">
      <Execution id="5a07ebb5-6f49-4aa2-9c5b-23c0ca10d780" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bf117e30-27ed-20f3-2003-73f66565238b">
      <Execution id="edf76309-c30b-4690-8ef7-9f7ad55125ee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f5a4cf2-e169-a407-f39b-ffd2368e86b7">
      <Execution id="d7d35643-4e8f-49f2-9cde-b0bbfb8808f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="76c34614-ce75-6cb1-6fdf-dc56d77111a5">
      <Execution id="cec21c54-261d-4e73-ac57-09cbde11e8d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1c350888-adb4-3dfd-ba53-9499785a8519">
      <Execution id="8c81c224-0a17-4cd3-b736-c7ee6fed2191" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="392728e8-5bbd-416b-cdd0-2a5ebec0dde6">
      <Execution id="86b31119-5859-447e-bc4f-35f4d99aab5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6b094741-adbb-ad4a-1150-94a18f422c24">
      <Execution id="6cadbcaa-b573-4178-80ab-1f43e8709f8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9dcbe424-2b05-0810-210e-b35bf8018560">
      <Execution id="a03af614-25f8-4cb8-8226-d92cbee67d99" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cb7f061-0d12-3d89-0d49-8156712b5230">
      <Execution id="c69edf40-cfff-49f5-bb64-2e4b18c659f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="88ec2b88-f2ed-1c00-e3eb-b0c071f11979">
      <Execution id="b11f29e4-52eb-41ca-9dc1-29217924d78c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f68d6c05-f9e5-c914-3a77-c9bec7671b47">
      <Execution id="04f47714-f420-464c-94bf-cece39564bba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ef487d9-978a-f68d-6bb4-b170f4e99a17">
      <Execution id="10f4c77d-5de4-4dc9-b720-6ca480b2f29c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3a4a4463-b091-d7da-153c-173264ff2240">
      <Execution id="5524d542-c324-41cf-b82a-31619fc3825b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="720ff017-13fa-11bf-dd2d-1eaf98b060f8">
      <Execution id="119ca13a-cac0-4451-872b-75f03a785076" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0684640e-2b77-41fd-6d5b-29e563b0ec10">
      <Execution id="795f2ae9-1bd6-46e3-a52d-d44c334c30f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="df1b42b4-19a4-da66-3739-ce01213baec0">
      <Execution id="e5bb5b7d-2a1c-4d09-9adb-ca98feae94f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fbeaddd1-3d3f-9a85-1f05-71eaa5c45f55">
      <Execution id="9e330c14-7647-430b-bf49-6fa0f719b69c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1b867b5-a241-9635-0a36-b068e811f85f">
      <Execution id="d61b1f66-17d9-40ff-8e0e-e02ff516cea7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fd87ad23-e322-0503-008d-7737eef0a110">
      <Execution id="0311775b-33fb-4bb8-ba17-810b03daf43d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="530abb26-baa4-6389-838f-ffc4bd44f207">
      <Execution id="5378f99a-edcc-4d69-9815-83f81b4c5a4c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="00f2eb3e-8be9-97b1-56e8-b7e0733b4633">
      <Execution id="6ed179e5-908b-4dc1-a55f-8092d826dcb5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cefad50-1051-db8f-b38a-cb9304e8df01">
      <Execution id="a01052c8-b9d6-46c6-ba51-3f8ee59f7860" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b0975c9-76d6-552a-80be-b3df846d3c50">
      <Execution id="7d309a05-d51f-4647-8aac-d35e5aa51839" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7a0ab956-59b2-4afb-69dd-e64ce5c4a2a3">
      <Execution id="1122f295-3886-47bf-94d5-b6f328dc1248" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="700cea66-18dd-f8a2-3199-e6e934e7bdeb">
      <Execution id="b85fcc51-de54-461e-906d-f68bacb21a7e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49616c88-67ae-b480-de4d-fe1510c78427">
      <Execution id="f7dc69cc-0466-4f25-8daa-4cf05f7ad0ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab422cf1-4d42-932b-550d-f671aca698fc">
      <Execution id="30dab097-b828-4ae3-90b8-3159fa6ac847" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="93c5967b-8aa2-6de6-db09-3ce49be474c1">
      <Execution id="d4fda756-fe98-4c04-a77d-9c8ca1d34a6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a90b4ef-fa83-2c4b-2f59-d5d74fc67a9b">
      <Execution id="43bab953-f626-4da4-a6e3-46bae859b617" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="de167297-0dbc-b971-26ea-f4e823b9d489">
      <Execution id="8f3b330a-f589-44cd-910e-d050463e40b3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="218cd252-afce-fbb4-935b-1cb56ba91aab">
      <Execution id="76c7128b-9b06-445c-b10a-cbb22c765427" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="530483f0-be6f-802d-2a43-9219d56c3630">
      <Execution id="bc6b4912-98e7-4557-a837-5c6b45e58f15" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27f8ae5d-88ab-1e33-0095-6c7936818c2d">
      <Execution id="07531379-8d8f-4ed5-afbe-9fe4e07165bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67b30642-f8bb-5884-c374-3ffd61558c59">
      <Execution id="5ccea8eb-0227-442d-91c3-74ac6df4f2f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="43dd3148-3dfe-b6bb-784c-7043d9536dea">
      <Execution id="e679ff0d-8e4c-48c4-b43d-2f5ea57f771a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aaf14c98-61c7-8de7-3073-d58602844ece">
      <Execution id="18095597-3a64-43ad-a1a1-10beef23c2e3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9bad1686-214d-5c13-5cd9-4bf78a147bd3">
      <Execution id="df270390-a1b6-42e7-a947-81ad1261f81e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="61058b56-cff4-4119-d079-807a621c3436">
      <Execution id="80df3ddd-8249-4bc2-a4a9-6fb2b6be35cd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="42a81f3e-4855-438f-c2a2-7cd2b0b28ce2">
      <Execution id="c45a4996-1021-476b-b755-6c5d8259b514" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NameExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e8c9731-737a-e237-dfe5-8e05e515fb0d">
      <Execution id="2e35b6b9-4ce7-4cb0-aa0e-e08f7d7e7c2a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fed6fe1f-e52f-cbf7-ebe4-951ff14c63a9">
      <Execution id="55aa2e57-f184-4f7b-8787-af769bf7e611" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ef192430-313d-2db2-1482-b39c741ad812">
      <Execution id="866a7550-2fe1-4274-be13-f617c32302e8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="476a6a0a-c9fc-fd0b-2fef-dd9120fd9902">
      <Execution id="7a18a7ca-5d1f-4e25-9644-795d87f46122" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f7ae3281-a1c9-01b9-5f89-41086b48662c">
      <Execution id="e9324c1b-19d7-4b16-95ec-c065283a3d8d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0a738358-0d98-1c31-fe50-9911bd511c36">
      <Execution id="aa01c19d-2711-46f9-8777-f099e8496ad3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b25a9a3b-513b-733e-d129-c498ec726eb5">
      <Execution id="7194d54f-c42f-4827-a973-ee915e47c65b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8f33544-6f3c-4c34-2b82-744fa52a61f2">
      <Execution id="9e37fad5-a5e4-45fa-b16c-8faab95c33ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3ecf0277-7de8-07d0-a6e3-d25e0f81ac18">
      <Execution id="70e4cc7b-2cbe-4216-a74d-0c0d788d5cac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9db89611-6405-4450-f54d-9cf23aae973d">
      <Execution id="88c5999b-7111-4227-891a-7e2e13ae2b55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0c236f33-6233-832a-f108-d4e750bdad0d">
      <Execution id="1c335394-a50c-4422-8202-bfbf021a1785" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d736ea85-bf26-a143-afcb-f35e82ff9cd4">
      <Execution id="c83d62be-a1d8-4499-8011-4d847da15076" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae780021-7678-b319-14f0-acb88805a459">
      <Execution id="98341b43-ec98-4134-ad28-a7798cd44fe5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="43eee416-1b88-5755-39d0-98fc78c8cab5">
      <Execution id="62196d3c-e4b7-48f0-a956-30101155892e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d4612ba2-91e2-17c4-d940-d1ebd09dc16f">
      <Execution id="d3d4b533-acfa-4f5c-8f20-a71a0cfedcfd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8973b091-e178-1d65-d56a-e2b11aadd71f">
      <Execution id="44bdd01a-b8e7-4d43-b5cd-60717098619d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5fc67340-5f87-a88d-6d59-26b2199a4104">
      <Execution id="1f9b0cdd-f72a-4e5f-9695-9325b0390999" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="64c5ddce-ae61-4e51-0469-dd186750bc2c">
      <Execution id="42c766b3-8849-4985-a44e-8b7b1d66adbe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f7d80f94-ada8-43a2-f71c-b8ff30a52a0c">
      <Execution id="74892ac5-96ce-451d-b05f-1a30716b0753" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab3ed821-239d-43b3-cd8b-8ffad9506219">
      <Execution id="b95232db-e65f-4b51-a06f-49f808e6576d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2a9ef331-0687-c587-d3f5-de9248ea5da2">
      <Execution id="3e1fd26c-b4ae-4aa3-a80e-f5721ba660b0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="653c09a7-70be-4c34-7782-419c8b7e51e8">
      <Execution id="2a10b27e-41ae-4a34-97af-bcd0f44fee77" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="11abf243-21b1-3a98-35d2-39fecec129a6">
      <Execution id="d2ceadb7-afee-46f1-bcd3-a8fd0054cc49" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="16619557-e2e5-c279-cede-669420230d7a">
      <Execution id="64c28fc0-e381-45d6-a310-68bd156cc9fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="103fd020-3f19-b932-50dc-e2a1602bb401">
      <Execution id="4c8ab956-04cc-4e2f-b78d-da59ea8439f3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e96ae09-a29e-a808-36c0-8477f2bd660d">
      <Execution id="814ab1e9-0b1d-4507-8ba7-2d66a4e9dc6b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ac9584d-4afd-14a6-d7bd-d80a13d8d18d">
      <Execution id="76b7481e-9d33-4bd9-93b8-fc3bac43e000" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1d9694db-5bf6-a47b-3ab0-9dee227f4d9e">
      <Execution id="8fd6ddd4-612a-4ab2-a73c-02aacb01abce" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58c0c3a4-100f-9be0-cbe6-ac05579be817">
      <Execution id="31406b97-3109-4b62-9f2d-2d0e8d042947" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4db8c771-8666-030d-43cd-077afcc871e8">
      <Execution id="d912df7a-97b4-4dc2-a372-cdabb9effb6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f63f1e41-ddc5-68ea-d736-804cccaca408">
      <Execution id="dc4f359e-8fb3-4ac5-9223-2a415c4e1813" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b371385f-39fd-9b10-7316-0744d06769f2">
      <Execution id="5642f5c7-ac50-4899-aecc-ccd5b0d414e1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3dc236e8-2ff8-fc22-aba2-afb0a14d0609">
      <Execution id="8a7c8932-9741-490c-bcca-b02b3013df96" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f7b3ee6-4ecd-1b4c-0541-8fb97e1df69e">
      <Execution id="97c559b0-e152-4c0f-a417-941cb751254a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c6752d8e-b45e-b9cf-1288-7760a85830c9">
      <Execution id="af621eaa-33a8-42c6-a170-88ad043052f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1f2041e-e40d-8cc8-6e07-bf3e0de7eb4b">
      <Execution id="661c3ae6-56dd-44de-a296-710afc06da81" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a6ab4938-1062-b240-784f-5c0ff39ec2fe">
      <Execution id="4ffc3e5b-b232-487f-8cca-bf058e6c18bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="de05bbd3-df06-56bf-2144-2691706bfee3">
      <Execution id="a4a660a6-9c8d-41bd-8c1b-ef2c78e23415" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1c4ca1b5-fc67-9560-ab21-189a9af07180">
      <Execution id="aa0ac773-7268-44aa-bedd-7629b2dc74f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0bee0aa-6a1c-f1e3-9a10-b90b2995d4d3">
      <Execution id="a44dd9b4-7928-44fa-9bd2-4828b65d59d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb074d40-8b56-c027-b574-e1aa5a040151">
      <Execution id="d11f5a87-b701-4d1f-918d-e704315ece50" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c649c0c6-420d-384a-d82e-29175b911cb1">
      <Execution id="59151b93-4456-4b88-a4f4-9f42d866050e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="695c9ae4-930c-39ac-9284-e52198b5f009">
      <Execution id="90ec4a5f-db34-4170-a2fc-59315cd3f250" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f4100a79-f523-9dfe-0d6e-0b077341e8b6">
      <Execution id="10c77afc-cddb-4df5-9893-8b9a8608e02d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a32eae14-a07f-84bd-5e54-461369523bc1">
      <Execution id="4ba80fac-eb71-456b-b4ad-54d00d8657ab" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4607fc25-5f3e-02ab-2368-fe4effa0021c">
      <Execution id="e6cf54ac-5663-419c-ac8d-1b3e2f0eb7b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fad2b24b-6680-5de1-b3d3-a9105a0006f8">
      <Execution id="24921302-a645-4590-be08-048fbd91146b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e125658-3cbb-ac01-3f7d-59db2cce5698">
      <Execution id="129376d3-4cf5-46f9-b172-5c350cb4f9b7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e5e164e-b8fd-414b-cee5-2341c455e80a">
      <Execution id="17ccb551-3a6f-426b-872d-dd2fef914393" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cc56c7f-5a74-6403-8a4f-f4625ce9e4a8">
      <Execution id="297258d3-060d-41a7-8a39-d5e9a4bf1209" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53c7ab21-28e1-c3eb-f708-07c3541b8a1a">
      <Execution id="5964668a-f2db-4716-9430-a914f147ca01" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0c75a998-1d5f-b872-5b9e-64c1ceceb9a7">
      <Execution id="9ee0461d-3d36-4060-a8e0-056a13038192" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="119e348c-f0ef-c24f-b76b-a648e38851be">
      <Execution id="e504ca15-2d62-45d0-b267-f842af133aa1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ff745070-d32b-b5b2-fc63-e863b1ba90ed">
      <Execution id="868eca14-8b6b-42a9-a8f9-cab0afd895b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="41e9b880-0ee8-154e-677e-70d9328b8ed8">
      <Execution id="216b83e2-f611-48e1-83c1-e2b139dd8003" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d538811e-7b8f-10fc-243e-1ab214d5bf95">
      <Execution id="14b6beb1-239c-4732-a1f7-31bc5e74e132" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2cc4fedb-f54e-4317-85b8-9bffdce157f0">
      <Execution id="523bbe24-1fb7-4b74-b89a-780eafa2933d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e95e742-f250-774a-61c0-f1b47e7bc67a">
      <Execution id="b7f10f03-1397-4615-97f4-bc70531812de" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="24e9ef4c-a97d-76ea-8db0-1481e127f493">
      <Execution id="32854f84-15c9-429d-975e-9d1d2fae6144" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="45d1bf02-a450-de78-bc6d-dafce6227715">
      <Execution id="c238bed9-d06f-4c08-9792-d5b0d8ab3579" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0ecf0f39-dddc-ed06-5456-7bf9ede3157e">
      <Execution id="5b31baa3-d645-4299-a6b1-79b46b4a3ab4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b26ebda-1c3c-7d3d-4b85-dce945ea2fa8">
      <Execution id="b4b15be1-1bcb-4253-b644-1c7f9a30790b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="80630e8e-ae32-f223-5925-7a8d486913e1">
      <Execution id="ae154dbd-1803-49e2-b038-e0ec11264cc5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b8dd36c6-6b29-c1ea-736f-fc398db6aca0">
      <Execution id="c613d2d8-324d-46ac-b2be-40d717f5497d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="da4574c7-cf1b-954e-6f1a-18a48735cedb">
      <Execution id="f11051ad-12f6-4389-bea7-ffae015c9046" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ba2d266d-e3c4-ed52-c910-51d17420a2ec">
      <Execution id="6ef3d75c-2778-4b87-a4e4-579fa4bca753" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6e1d6871-2648-5b47-7735-f156f75721e5">
      <Execution id="4da498e2-02b2-4e41-8bc4-d5da255f9daf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5c40e43c-ac10-9251-ad7b-d9eb2079a1c9">
      <Execution id="68029a39-becb-4062-97f3-4b876c068901" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb8372ab-5916-290d-fdbd-c271b4ec8b30">
      <Execution id="c3856832-5779-4cef-991c-33033b6e0a1d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a11ac9c0-8c68-345b-004b-14455897dd3b">
      <Execution id="78993d55-6ab1-4b9f-b6b3-75e62202263d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7b7cda58-bfba-0a8c-939e-e7068d41b601">
      <Execution id="41105584-dc77-4886-9e04-d5a86ce75e85" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="061e2812-c4c1-0b99-48d8-b0161b9d4f0a">
      <Execution id="a2311ef3-679b-4a29-b7ff-ec3b62bbeb9e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e0b9c78-f315-8511-650d-85dec97d68fa">
      <Execution id="bf6ff315-3802-4032-911f-d7499f99768d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb8a591b-1771-b29c-87a0-4d3c174da3a7">
      <Execution id="9486d1e0-589f-4847-b625-b5bb84e32375" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a70b3d60-f4af-e58a-9314-8f0b47cd8cbc">
      <Execution id="0ac1afb4-8896-45ad-9625-4875372204d8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="66913b9c-15a2-d54c-2f3c-5ef2959fbe1f">
      <Execution id="78a74264-faa2-4cc8-bbf0-47c0e96887f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="94da6f41-4f40-b8f2-d2d3-62479f2af42d">
      <Execution id="8296f352-a3ba-4f4c-ab2c-e80ff31e4683" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2fb6cc08-76e7-edae-d8a7-37d44234aa8c">
      <Execution id="cb093b9f-551c-4e1a-9a46-8fec900a50a5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bf47b1bc-f644-af08-a340-d762a489a360">
      <Execution id="d7a5fb13-1052-4e8a-8739-796d46346b07" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5f77cb7d-81fe-c9c1-a6dd-feeea64d7b94">
      <Execution id="88b2a8d6-5546-4f29-8cdb-3fad4938fa2b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="16a46364-bb02-cfff-a791-1885b1da0e9a">
      <Execution id="237b3713-3eee-4e6b-afb9-d8716421dafc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="09d9d5d8-3ebb-8bd7-b6dc-31a656d1ef80">
      <Execution id="9d77a86b-113d-4f34-bc86-cba483acf508" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e5f8ff45-b6a6-7ca9-7fd9-76cc552fa241">
      <Execution id="67da3369-e7df-4ee2-90a9-f20810654753" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5f80ae9-6dd1-d0bf-9d0b-0a87c052fa6b">
      <Execution id="baced913-f20c-4416-a3ae-15a38f4ed511" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3cbcfa27-4d7e-744e-d193-de1339286265">
      <Execution id="eb790965-2821-45ba-ae64-2dcbdf2ab6f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3c9703c-0325-3982-9a63-348e8d73d303">
      <Execution id="a10f1b1d-f86f-47f9-8438-747a896dc390" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5c177ad-a6aa-3919-9f1d-558bd1c1c10d">
      <Execution id="099cb0ab-87ce-4228-8f9e-1da93e673d86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d703c53d-b220-02e6-8e34-dc4daf37eaa5">
      <Execution id="11858df5-4fbb-49b7-90a0-df24f74d9c30" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8254eb37-487c-0d9d-b0fa-35699aa76d59">
      <Execution id="2ef8b109-43bc-4ee9-88a5-2cdd95c93341" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="171de131-b995-6937-5530-d6e667938fff">
      <Execution id="67bd95d3-ecd7-480a-a85d-0dbac5516585" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="74210cf2-2bec-8653-8d79-91caa831e31d">
      <Execution id="f159c021-4aa9-4d81-a9ee-28485ac85e0d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c3b3aca-130e-ce79-ac21-f8d1e8a689d8">
      <Execution id="95015eaf-0278-4aa6-8849-0580bb074644" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fe74ba3e-2f13-a24c-70b5-eb31994ff7bf">
      <Execution id="78e82ad0-f4ba-4963-935d-0eb6890cb93f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f24b1771-7f6f-238d-4fea-5d9126d6db5f">
      <Execution id="1e054eb3-d019-4760-a5ef-74e6e36a5a4e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a6d3adff-7c5f-092a-ea10-d9da98451365">
      <Execution id="f764ac35-4025-4a32-a3f0-87e88921952a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3470b683-785a-0e31-c0ed-b4792149b323">
      <Execution id="856556e6-6889-4db2-aa1b-99e6c2cf2568" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NumberToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a94eaad-76fe-1c10-f0ed-171663de50e5">
      <Execution id="b275d95d-3725-47c5-8d60-d851adaa708a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d8447601-5c31-9049-ba3a-63d7873c6f75">
      <Execution id="6cf3575b-1c05-4b87-a5b2-05e44e8a4d8e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="190e182a-78fc-1e04-eafb-1b28e62ca381">
      <Execution id="cc36f266-b91f-4a7f-adfc-82506b26ad33" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71f49a81-03d0-a610-b473-4ca78f8047e5">
      <Execution id="7a90767e-3029-40d9-acde-ab153d99a60c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="04db3c1a-9e2e-4b82-d72e-0ecde4ff1aa9">
      <Execution id="67fed126-dd6a-4685-8c3a-c0a3bd560802" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="51911c0c-a783-83d5-c572-8143c6a92f26">
      <Execution id="f4c8e8b0-3b91-4228-87cf-f076426a831a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2c065c9-7414-a14c-3091-56abfc1b06d5">
      <Execution id="786fc0c5-3639-4863-90e4-d68567a78870" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="be7f7c13-7613-4c7c-d86d-f4a504acd7e1">
      <Execution id="f12f4255-0a50-4cbf-9937-3e6246f21cda" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8963b6bd-8fe4-f455-701e-d5989d2cf8bd">
      <Execution id="42f0854b-9082-437c-b45e-12754d0d2fd0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="086ddfd9-8954-5689-f5af-bc08ac306e47">
      <Execution id="487335e9-070e-40fb-9073-5d92bd582dc2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35ddbf76-523b-d161-31dd-d296d85bc2dd">
      <Execution id="af6d2d3d-af3c-4322-9dc8-6d577e598652" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b9b361d-76e2-a372-51f9-8376bcb933f6">
      <Execution id="d39fa4f9-6d8a-42fc-b101-314eb530ce30" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b930009-1d34-28dc-3f66-7de437f049df">
      <Execution id="39d21b82-fe14-488b-a53c-7a86fed6e226" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="417aa184-9281-e207-ffd7-efd7f1b0e0f8">
      <Execution id="74a9f3aa-c777-4234-a505-257d922e9b12" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="641a7b3c-8dbe-59e5-25cf-666fe8d16544">
      <Execution id="e9edecbc-f577-489f-9af1-cd55d15a478f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a282d225-4b2b-8f00-d530-5e69474457bb">
      <Execution id="967bdc54-a5f6-4072-adb1-d7029f2a5e44" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4132fb32-1e4e-54d5-65c8-3f10dc41226e">
      <Execution id="d21e790f-a0bb-490c-b6a1-c24cd0937f5e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="18c94b8d-9747-9775-b91e-7891fdacf594">
      <Execution id="ed830c29-6c67-4b16-9082-3f829416b6ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9ae97799-ef2f-5ddd-359b-2880df2ee91f">
      <Execution id="1f88d556-ee06-4cc6-bcba-c5b21d1fd7cd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1f003c1e-da2e-7149-8d51-8572348c0bb1">
      <Execution id="344d3224-1940-44c4-bdc6-353246287322" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e97be489-2496-70b3-daaa-4e7e68a9bdc3">
      <Execution id="8498c760-d7f0-4686-9935-ea70f4dfe705" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a94a7259-a1ee-913c-96ee-a4e5a8c9db49">
      <Execution id="e493a03f-fd1f-4b19-a371-eb1254f2c5bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="014defa0-47f4-78e1-f10f-60b65ddd5d4e">
      <Execution id="f5b83435-ed98-4496-b0af-f20568fb6cc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0b78af5-d45e-b3cd-9f0a-a6caf685b42e">
      <Execution id="90d3eff9-29d4-4197-b46c-0b7547bb1cd7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af3f4007-d296-1177-5269-f1f6ab79f3d4">
      <Execution id="20760d44-c128-4a57-bbf3-f5db175213ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b30aa6af-5d68-1a89-e989-d5e616935c91">
      <Execution id="50c83b99-f836-406d-a74d-5c0e225c8b50" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="68f3f73f-ba62-2e93-9404-9c89b6d5f158">
      <Execution id="0bf2ba0d-9d18-4421-a517-08bf490219a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f5b43f2-bd1c-51f7-b937-2b7a6d72646c">
      <Execution id="044a9bcd-1c63-4499-83c8-7baa014ac4a9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="20ad30e1-c057-7894-7d76-0da1b4c713f4">
      <Execution id="32fd71a7-c6c8-417c-812e-2ba2f85e5e66" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="385f39cf-6b75-5eb5-ccee-2b5104df2a07">
      <Execution id="71cfd5fd-a743-427b-9bf6-180982ff4b19" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0b4c3b04-b1a2-2489-b27d-13d85675a4ba">
      <Execution id="b5196c64-355a-4981-a32f-88cdcca3cb4a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9d887c0e-5a96-2997-eb6e-044c542c621b">
      <Execution id="9e425744-092b-4359-89e6-4e55fcf715f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1640f8c7-4a85-854d-2b2a-2cd750a6a971">
      <Execution id="9a401d9e-41ee-4a27-9b45-f596adfd5cf5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b94f1a0-7eae-1775-a1ae-6821c88655a5">
      <Execution id="717ac29a-8572-4b1a-82a2-096a0842a9b7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="37cbb153-75d3-2605-5c75-cc9b39e7afba">
      <Execution id="a19b7806-e242-43b4-ac6c-726923a50648" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cae1a2e5-adce-8de1-73c9-222c9c4136a0">
      <Execution id="2fc5a4eb-8bcf-4763-b84d-55c9ae76000e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="481e09cb-ea8e-6299-f675-550baf99fa1f">
      <Execution id="45141588-95cd-41db-a821-3edcedb8b00a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e26280af-38cc-36d8-d339-9ee0df7f0cd2">
      <Execution id="d16d9ab0-b6bf-4adb-9f41-f6f281fdab22" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a60e5d8-3722-6d1e-2172-a2d772183bbd">
      <Execution id="1a07b5cc-640a-4a32-8dc6-f75cd5917237" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd68ea8a-9004-065b-344b-20e4010ebaa5">
      <Execution id="11455f07-87f2-40a6-8b24-9643be2d3865" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: EqualsToken, text: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b91d708e-5ed6-d58d-25c0-77f98067f581">
      <Execution id="5b5a18b7-0ab7-415e-b2b3-abc6723c17d7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cea441bb-262c-4495-fc1e-1d7552242a97">
      <Execution id="3811da08-0b20-41a5-b4e0-4956870d1b18" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8e72d79-df72-8f45-fbac-d766b78a5489">
      <Execution id="781ee8ce-c1bf-49e3-a1a7-42f82bffc379" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2a8e4a2-4531-86b4-7509-58df83a34981">
      <Execution id="0c845a3d-3cb3-4744-b785-87cb0dabd632" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5577a1fc-99b3-793c-96f8-f70622e39fce">
      <Execution id="9eb097bc-3b37-4f3f-9d2a-594d9c232dc1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True or False and True&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="582fd368-2777-2b54-c1ec-a082802a6686">
      <Execution id="aeff57e6-192f-4b82-a154-2212dc4cb0e0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e25591e7-af62-8c32-706d-2883a0efb30e">
      <Execution id="6a5d3a11-d41e-4e03-a356-dc7da5132e6f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4f46b363-ac14-b826-9621-fd802f24ec03">
      <Execution id="aa85b023-8236-4b91-a9cb-10e3eb469bd6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d4d6878d-9b31-864f-eda4-d16aaf3b8ccb">
      <Execution id="d66c85b9-4d56-4e77-8ce2-3dbb9e3de02e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eae6a2e2-c1b2-280d-6e66-008f22ccd00b">
      <Execution id="40ddaed4-d0da-4dde-9357-edcebf18646d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cebb0766-5c7e-a9fd-83bb-06d25a0b73a8">
      <Execution id="36237dcf-77b5-4ac5-aca0-c61f79309fd9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5473567-e360-7801-813e-7ede3b0a1b06">
      <Execution id="6ca7f60e-be1e-46df-be3f-b195565e1a15" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d1cf383-c594-594a-44de-f3ee10f73f54">
      <Execution id="b61655b7-dcca-4dfe-ad15-735ef2dce895" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7ca6dfcd-3a24-2580-23ed-e72fdffdbaac">
      <Execution id="2d989dce-9192-449c-b500-5bd9e622e1ac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8422d324-07c2-3f1a-4a28-6c8ab5ce4ca3">
      <Execution id="0579c373-d44b-4a61-a554-11bc5a0f7704" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8c3bbfe8-0e53-8b11-6a97-7de9ac2e83cd">
      <Execution id="e3d6167b-87e5-46ca-b891-50e7fc416867" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="70266596-319b-559c-2957-01ac7d9ec97f">
      <Execution id="8d660f87-1fe0-4bfb-9994-59b31d865927" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="69fe0a40-b16e-0094-b606-4aad62a26199">
      <Execution id="3788c235-c194-417e-b25c-0111e37e0385" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="05f6be74-66fd-f7c7-0f6f-990e80720375">
      <Execution id="9a24b19e-89e5-4b47-b5dd-a1de4562320a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2150454d-d84e-7ec3-e5ba-143fd6bcdeeb">
      <Execution id="052a84ae-65bf-4949-8a90-e6a08b5b1163" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0342b1bc-0a3b-a04a-7d64-cdddc338d18c">
      <Execution id="c8bc0dac-95ed-44b1-9c5a-2c965ae48c57" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NotEqualsToken, text: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5c45d074-387b-573b-2e0a-51a2f7385612">
      <Execution id="8d227e90-7660-47f2-a029-8b924d2fbe93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8404f4b0-511c-9a29-5bc8-5c00e7e12882">
      <Execution id="38591c0e-9d31-4bc4-b865-428749a2f339" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c5f9831-e9e4-2657-ff43-677ba035e254">
      <Execution id="3df7508c-0cb2-4cd9-9765-f4aa3a7f2005" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f72bfd4a-6695-632f-194b-580972c51068">
      <Execution id="09e5902d-17af-4b36-aad3-57b0dd83bb64" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="83c99561-3919-8987-c084-63ffa77ddba6">
      <Execution id="e9680b32-46bc-46ff-b4db-46ecdf2766ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e4e704e-3ae2-090d-777f-66db55265327">
      <Execution id="bdfe20a4-d3d8-432b-9036-5644ff1a9964" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a6ba3436-f05f-d637-82ef-962c974df69e">
      <Execution id="8c81623e-a17c-4ebf-8f5a-287b14a3ac70" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="746ad2ef-3beb-be6b-fc99-43e979c1f0ba">
      <Execution id="34f978b2-ba07-41a7-b0dc-77881f6c1b31" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02f9c500-2eea-5dd9-f130-06d8f2a813d1">
      <Execution id="05d716b2-130b-4dd5-a004-714dd6bf6bf7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0bffbf7c-ca22-bc86-0525-e7b110bfe015">
      <Execution id="8592f4fd-8a79-42b5-8ed2-e93885a1da6e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1dc879b0-75f8-e62f-bebb-d2dc890b5385">
      <Execution id="2c453ba8-5aa2-4812-9201-466cbd898dfa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="83fcadff-2ea7-3701-ff9b-ccd467d2c8a6">
      <Execution id="cf6026c3-f896-4cf8-8434-e8ff27cc0bbd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="59b8fe00-2b0b-cf9b-1ff0-5d36bc21fa5e">
      <Execution id="d3c88bce-3bb8-4424-a3ee-11881b874033" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e3fad4d-039a-1dd9-3b43-d463580797c4">
      <Execution id="f3f48c22-ce44-4aa4-9ebb-2e15fc715e56" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fdd9df8a-6510-a8d3-0240-a42d6bc9c595">
      <Execution id="9c4e0434-e64b-48f4-bee2-44a537ce25b3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2a26b9b8-9a96-20cc-41be-f0609d0badcd">
      <Execution id="d5f9e8ad-e19e-494c-a8bf-4b95ac7dcbe3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1b086221-8744-e546-760f-a12769cc2c94">
      <Execution id="d8898022-43d3-4227-9a57-42440294ede9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b6536222-3f82-82aa-13cb-38a401133b80">
      <Execution id="f5c2a054-65bc-41b3-87d7-a845957a653e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="625a8520-0f7a-f525-58e9-af1f8eb23dbb">
      <Execution id="c05f5ea8-166a-426c-b68a-e787fc3f0653" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="11488508-1f52-87b8-74e0-61a908c07fca">
      <Execution id="9c58530d-f65c-4beb-830c-21b49a6ead60" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a4950ead-5b27-d095-1112-7aec64e3ee23">
      <Execution id="26ba094e-3f58-4833-9cdf-8a7a6b61e908" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6ddfe2a0-bec5-c49a-8740-8a53e6b49351">
      <Execution id="7faff708-f592-4e09-9c11-48a4f9502202" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="262f77c8-5d41-3525-c84a-ab44befeedf4">
      <Execution id="c39f6063-8e68-41e1-a218-bf005ef8655f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36ba16f7-73e8-5f83-fd44-7d3b363a82ee">
      <Execution id="fabed7d3-8bba-4293-89b0-1771cfd76f92" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9768cb00-f905-4f60-2811-3eca5adb0327">
      <Execution id="afb22c35-1b99-4ac6-b838-d94bf2ed2953" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="03c0af5c-acf4-386f-b4d1-1ae9634e0542">
      <Execution id="533a5992-9140-4ab8-b47f-874689081ff2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edb932cc-0c6c-74cb-9364-d520127a95aa">
      <Execution id="97a27762-d470-4b5c-a337-13ef7a505bc0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="15318aa0-67bb-bf62-c310-87f87cfb0039">
      <Execution id="fdf09551-5b47-42ce-9b5a-19c69c7143f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a9695862-6d4b-57cc-1f6b-01b19c31df97">
      <Execution id="9a6e3441-1535-473f-87b9-fd34993b6b21" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e949c315-53bd-2553-894e-14dbe4dd533a">
      <Execution id="b8bde0e7-2f01-4ff6-b9a9-4046e3b876d8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f34e8549-0c42-c0ce-c742-9cdb34e9330f">
      <Execution id="45b89ad8-13e9-4ee5-a132-4d4aec3e35b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ff2cb129-d760-959d-9970-5ac810598e11">
      <Execution id="b4b2184f-381d-45c4-a614-f49a5421f939" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a137678b-3ccd-02ac-03ea-39b886c0d291">
      <Execution id="b09d5bcb-998d-49a7-951a-9873c72972c3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f4d7ad08-e374-59cf-add0-3b3dfcb42154">
      <Execution id="ef2143e8-6169-40ef-86c9-fd9c81454d0e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3dce1c93-0c0a-d2a7-3ab4-42548ebff9f3">
      <Execution id="6071f668-1022-4f08-b077-e7e65cd3bcc9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02c42386-c9df-7fd0-92e9-b023eae4023f">
      <Execution id="f9033cfd-393f-4742-960a-addb1bf117d4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b67cafa9-d5d4-1bba-6213-41fbc8c46d4d">
      <Execution id="746630c2-9937-4a61-8c70-b1e60345f82f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1eb43d1-2e26-88ec-94af-b10f2d89fab6">
      <Execution id="e8f47800-2623-4b2c-b805-f41702278b90" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6bf90a50-0849-ccf3-46b4-2b469bd7a246">
      <Execution id="8b24333d-0ceb-456a-ac73-d0b40670571f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0707c82-671b-041c-140d-4913d07ff376">
      <Execution id="a3a91f23-a0a7-4113-8022-39822a0a3e99" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="917081c8-4c35-67a8-ab12-13c2aac956ae">
      <Execution id="f2a4a4bc-a79e-4bf1-b843-31a1cc822fce" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="00b08d0a-6119-a572-cb81-5b70b9b550c7">
      <Execution id="47b359fe-5e46-42d2-a395-70a369b042ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4153f852-805b-eb52-4493-8b0b310f83e6">
      <Execution id="ffbbecbd-3983-4267-beeb-d884092ede8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1aa2f39-b82d-5636-857f-39038a354264">
      <Execution id="6adbfd4b-01bf-44e0-8640-db0c1eb3b28e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="06c7b88a-f2ff-a2a4-4bf9-e03a3aec969e">
      <Execution id="ac25cddd-8de5-456b-b8e9-ace4bcd9130a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f6c10693-0871-15a4-0fe5-deb3593b620b">
      <Execution id="999be773-09f8-4d12-95c8-9e8c008c2f87" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4c13b311-2f3e-ca8b-32fa-3915ed957ae4">
      <Execution id="0c7b4de3-d8f2-4b01-bc0e-967d2cce119d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f24b99b-9104-eb95-6631-f14a5ba413c1">
      <Execution id="7d889aa4-852d-4c20-8d20-a43264404364" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="82a43004-da40-7a61-603c-5f4b3f672114">
      <Execution id="e05085ba-7683-406c-8154-55d6373b2e90" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="51894596-042b-a790-ff41-ab3bab3f6832">
      <Execution id="649eb419-07f6-4fb4-8e9b-4ba4a69053cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e94f5737-cf04-b148-8192-38daf599baa6">
      <Execution id="ee473498-ed16-484d-a7d6-9eb254944cb5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="778228be-94e4-115e-9f90-b5810ba9f7be">
      <Execution id="237fc2e6-7114-436d-8465-fcafd22cf89d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b9c52dcd-a3c8-9f5f-68d1-ff1ab85741b7">
      <Execution id="7c57666a-7f5f-4413-bdf3-f0c801a933ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3780b5c5-7bd5-f946-bbf8-0d709675f526">
      <Execution id="d9ec5de3-56ed-4a0d-9d69-346f7b2e3ba6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0f8b334-70ff-780d-c11b-f815ccb412b0">
      <Execution id="0b2eb28c-65b6-4309-950d-4273286b2232" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8dcf19e1-3470-926f-5ace-a8141d03d7fa">
      <Execution id="1704d72b-e104-4850-aa88-e04f14d1c1a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ec23b259-a8f2-7566-6776-62f62d740583">
      <Execution id="ae7caeca-b74b-4acf-a7a5-003d27145cbd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6d0b0f61-ebe7-5cf9-b1a9-e3ca8e742b39">
      <Execution id="745f10c0-2689-48b0-a955-dbd0eb1f0ccd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="543d7e3c-10cf-b135-dc78-d6ca78ee3c5c">
      <Execution id="d82b9bc4-d780-40d7-a600-d43f70134661" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8c7054d5-77cb-a80e-e545-0857b644d6f8">
      <Execution id="945a884d-0bbd-4e1c-af74-16f024862a8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e9837ab7-2ce3-c7f8-834a-30ace14ae793">
      <Execution id="ba919d93-5e46-49aa-877c-a898ef5aac18" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0e340582-86f3-f229-bad6-4dadcc59a904">
      <Execution id="cc909dd0-7351-4477-a06e-f703821cac58" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac0c5913-01f7-6553-acee-775e9bcf62be">
      <Execution id="e1dbf28c-5607-4224-bf19-ce6b8954b6ac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="634b7c8f-eff4-d566-bce7-e18cb89281a5">
      <Execution id="176af900-3fa0-44cf-995f-b0e335d1ab44" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6fda6444-e2e6-2243-10da-3a33e2007b83">
      <Execution id="ae38f18a-c8dc-4e86-9ac2-a05c22933829" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5494b3fe-5f66-a158-28fd-d9f8982fa2e4">
      <Execution id="6a503444-cc9d-4caa-96a8-3d8ac00610c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1297c923-fd79-8a3e-e52f-db05c0de4692">
      <Execution id="3e587f6b-c7bc-403b-a51e-60ba13e6ca2f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b052559-4515-de00-a0d4-8e3b7beeb73e">
      <Execution id="153d7f2b-c526-4d6b-99c9-ca4b4519884b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: OrKeyword, text: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56891394-0f5c-02f0-89f2-0c7a41490bfc">
      <Execution id="efe3bba9-f0fe-4be8-b386-b1dfcba98d29" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7bbb0f02-160e-1591-e618-d763db5ab4af">
      <Execution id="3c7c9517-3b2d-4984-8238-abd8608d22b9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="be00e43c-ef1f-1f96-532f-766a588e2786">
      <Execution id="0e7cd923-6744-4f04-8847-0f1db1eb63e4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="48fb1e4b-ad2d-02cd-95ba-266b1f4c1404">
      <Execution id="d063b104-b72c-4fc8-9da4-16b24aa21525" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="578ee0a5-be03-ca09-3f70-c5737802e85b">
      <Execution id="c967f045-6fb8-4f75-89ee-018c4495df8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="706aff9c-dd8e-5ce4-bf5b-204fc2a78489">
      <Execution id="7e902b24-6e4d-4fa7-b9e8-c3f2fbc081e2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47eae0b1-70ed-9db4-85f5-b905615d2e60">
      <Execution id="a7bfa3ed-3a34-40a9-9fe4-29615302e2aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d6703265-a595-e434-ca4f-59b8845689ee">
      <Execution id="ba1ea35f-167c-442a-87f5-4a7e0ce84cd0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6832806a-cbaf-2811-b635-075797f068e7">
      <Execution id="ee1c694c-587a-4048-b451-e6814e785cc2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="894daa6d-01a3-a92f-b322-55f97ead792c">
      <Execution id="f8d4935c-4333-4546-97d7-69b42af97a54" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="94fffee1-97b0-86e7-30b6-edf1d25ab40e">
      <Execution id="5004170c-bd9e-462e-9b8d-645e7d2e5248" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ea8b797-836c-c3a1-075a-1ce27d599bab">
      <Execution id="71e6c2eb-c8f3-41bd-bde4-86b179ca4bff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a2bd8e7e-4413-7825-8d41-0b9dd902ad16">
      <Execution id="b2a98820-b05b-4686-ad70-e22e2c8e1a80" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="99748bbf-6911-218d-7780-778804d80917">
      <Execution id="dddaead8-6179-4955-b8ea-1c27d0929d86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f3dca42-92ab-7313-d3e8-bbb4662429bb">
      <Execution id="f4739119-2cb9-4dda-a9d0-4c029a421580" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0403e92-9117-6d84-f46a-addc9ea43ccf">
      <Execution id="957f00ec-8a33-464c-8b93-8948d2a60faa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="94b77800-6724-78b5-48f4-5b33793d2302">
      <Execution id="0066347a-b52f-414b-a922-abdc574c1e76" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5165c077-3975-ce69-53f9-299aac70d090">
      <Execution id="328a6d1c-3813-4a5d-a288-42e724394749" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="129b88a2-7977-d6f4-b778-9fca7a490bfc">
      <Execution id="8e83895e-2b6f-47a2-89b0-9d123edd88c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="785be0f1-1806-adee-5dde-a294563b559c">
      <Execution id="345cb50e-316c-4cf0-a4a8-cec026b1b5b4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4c4ac217-0910-4c31-a3f4-3101105f0d91">
      <Execution id="4d65c1c1-3b3e-4cb3-8578-0f09a6ae3054" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9ce8d2e9-88c9-3c5d-5f64-0ee4a7cb9f6b">
      <Execution id="d45f0ad6-c661-485c-8d35-e8fa04ba3f44" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a39b7794-7294-948c-2682-5c134715f1a2">
      <Execution id="5d6d5758-ef8f-437d-809e-461163f142c2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="84e0e3aa-8cc9-b034-452e-e83738fa1f81">
      <Execution id="0e18a66d-b081-4df6-b39d-1b34923bb1df" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b659306-954d-4d9b-2cf9-32e444663d95">
      <Execution id="fe1dfb51-7c8d-4a21-9b75-541c26fd6f78" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0946629c-4810-69c7-0110-8202591122a4">
      <Execution id="c74a7a64-4de1-455f-8447-dad554c86ded" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75a43d67-1b2a-5662-88d7-0d35895bf6ce">
      <Execution id="d997708a-0d23-406f-ad69-bd111b347b11" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8ccfe58-8f41-6406-086e-f09dc7100c5c">
      <Execution id="e80fc55d-f840-4711-9404-e0b2351f8f5b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ecd774ab-3b6b-feed-3f03-8ef88e0dffff">
      <Execution id="20bd5317-61f7-4151-a7b0-ffe7583a00e1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0a4fa741-2b74-d6a1-fa95-6f3569dfeab8">
      <Execution id="2ca1def2-18f9-4bc7-baf4-a403b99e1f07" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: WhitespaceToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3cd3d2b8-462f-9901-c3e1-d914cf4f9d34">
      <Execution id="227dae97-d10c-42b9-a35a-5043ad82df4d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3ace36df-7b19-7dc7-66b1-0b23ad68e7ee">
      <Execution id="a74dcb13-fd57-4270-ae18-6db385ebfdb5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bec1547e-9b11-309e-108a-ef1cb719655f">
      <Execution id="59b04887-bcda-49ce-a2e9-a0f1faa40a81" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1606ac60-72cc-d7fd-2b2d-003c6be36b18">
      <Execution id="5bd8f275-ea63-40e8-8c84-4ccfeb2ee1f0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8d3c66f8-547f-5cc9-11eb-8ad9089acb74">
      <Execution id="b8982c6d-8b3d-4360-9f68-636f43208e93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="17613e44-024e-e7b3-42f3-9d0366f34f49">
      <Execution id="f41490b2-55e7-487f-af9b-93e8e39bb604" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1f21a086-0895-dfc2-3c39-f277da674f43">
      <Execution id="9a3c1a8b-9393-40f3-86d1-2be69e8d6563" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58313bd0-6564-0b1f-dca0-834f976c22e4">
      <Execution id="a38cb782-26fd-4da1-be17-477b8b1021fd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2e1e2aa2-ebc7-58dd-fe2b-a4550f40d5cc">
      <Execution id="f3c40738-ab8c-454e-a732-8f2c34c83eda" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b6512430-411e-65c0-b613-a1a83692b99c">
      <Execution id="030941c4-8880-4493-8d34-32a99313ca8c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b1cd69bd-831a-1a3f-0980-06fec185e5e1">
      <Execution id="a5ae48fe-1ad4-4fa6-be73-044e077bf23f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="863d7ff3-3861-1083-9610-47e08df26e7c">
      <Execution id="357779ea-c132-4055-be91-762cc0e89f3d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="40a21a59-709d-c67b-98ef-403d40a831fd">
      <Execution id="c709ff95-84d8-4b09-b5ce-96b62a719698" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="426d26a7-61d7-c92a-8f45-2114ac069325">
      <Execution id="2bfc4afc-feac-492b-8646-360bd802b32d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1a18e30a-f4ae-a7d2-e7de-c1d7ea3dc62b">
      <Execution id="44523cd8-177b-4e93-baca-3d954f80bcb5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e75cd54-2f41-2679-6b62-b0e0b2a16537">
      <Execution id="917dc06c-41db-484b-ab4f-83125fea258f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f855d325-dbc1-cd31-965b-d0930491e263">
      <Execution id="e36a4925-a45b-49f0-a6f0-1824f80ea1d8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e8f4a621-1f8a-a05b-bb03-1010c4114673">
      <Execution id="48b496b3-37cd-4a8b-9179-b6d7afec7cc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="50900259-7031-f383-6697-f81ab6ebc077">
      <Execution id="91884a5c-bf69-4581-8419-a8d6c5a66bd1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3733cdd9-2ebd-bb7e-b610-8329e3c584fd">
      <Execution id="78aa6d2f-f0a6-4aa8-9135-0eb782cdbd99" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9b90d30b-53aa-f75d-5055-caac21b4504f">
      <Execution id="1d326e3b-fa19-4fa5-a575-88a913241905" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e74908f-3b1c-3ac8-d20c-4a54246d9abb">
      <Execution id="9ca8929f-b787-40ff-9dde-1b78b337dd2d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e7e84321-08a7-a19e-e64c-72ea635d7950">
      <Execution id="8fa1048d-60a7-455a-a985-9bf99a04bfed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5441fae6-0fe4-6e6e-7da1-029bd30f7d6e">
      <Execution id="33921cc5-2f19-4ccd-82de-acaedf741b0a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb17f738-f5cb-a2ff-471c-b0356ee464c1">
      <Execution id="bdb58664-040b-45f6-9476-3b3c21433b93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="76fb9d43-c6d2-4878-b6e9-a60a8ef861c2">
      <Execution id="42c241a3-b2bc-4c55-a299-5df84df1564e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1988b293-cc85-fd92-ab09-d155f2ec1ddc">
      <Execution id="f92af3be-2c96-4ae2-8e90-490267cdea5a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="72bdacf6-c04e-7538-e17a-4b76acf56493">
      <Execution id="ddbd6395-7e9d-4384-a8f6-e94a4d535c90" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f47dba5b-d63f-dd03-e974-04fe8e3b3212">
      <Execution id="b76855ef-52b1-4a43-a7fd-96843474b207" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0b666d56-bf4b-83c8-9a24-e83ce5cb41c4">
      <Execution id="0ee71a9c-9deb-466a-9fe3-c12822892e5b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fa98d31f-c7bc-d1e5-5b95-d1c7066967c5">
      <Execution id="669362cb-1bf3-48e4-a6de-dd6383a3fda1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="739de6a5-3791-efc7-a91e-af875d9f2ddd">
      <Execution id="64255c2d-dc60-43b9-a299-6a1ce5120f3f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: NumberToken, text: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="058aa5a6-89f0-4e9c-135f-4d9fc11ed546">
      <Execution id="77952b29-22e2-48ae-b45c-d42f112248c9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e580a6d-3ee1-64ca-a74b-fdc08768b833">
      <Execution id="c858f0a3-5cbe-4093-9cbd-f6e8113512a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="517277ef-731b-75ec-5fe7-5a452c0c7b9b">
      <Execution id="bf56338f-ccc0-4a82-8ece-92b911f0d77d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac21adf7-d381-75ff-6d23-d8c8c2ff32c8">
      <Execution id="76df1404-009a-4d4e-9a9f-6c473716cdd2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4210c0a8-b436-302c-a0c7-8354612c94da">
      <Execution id="dabf28a3-e585-4dd2-b9ed-1e3d8d71af66" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53c0e48f-b680-9e78-bd30-f5a0f8485756">
      <Execution id="b68c56f7-ecf1-4971-90fb-c07b531c8f88" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9806327e-d986-5657-5ef6-5918aeb29464">
      <Execution id="cf4ced01-376e-4aa8-8b5f-b0d8eec631c5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="65625912-7110-58fe-d39b-97644474d36a">
      <Execution id="5b491d29-31f4-45ef-b5bf-19d0c6eba543" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d16b544b-d6e6-92f1-d0e2-03d883ee34e6">
      <Execution id="0f84d2e6-e173-4c11-99c4-3d35ac870868" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="62167bdc-d7b7-8393-6381-609ce2f273c5">
      <Execution id="1506e42f-6610-43a6-a993-eb2d0e0567a7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1db33b90-734f-42e2-9724-f0f3cb945588">
      <Execution id="49103278-1e2c-41a7-9cc6-dd43a2917058" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7a5519ec-b4e2-1641-103d-15ff0f509796">
      <Execution id="940d544f-68c0-44d9-a85a-768275f81d71" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b6928fb-c574-8e1f-c05f-0fdeedaaa2c9">
      <Execution id="d9d351e5-e3a6-4034-81d0-61f3107d389b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2963f91e-1890-45f5-2c07-007bc45b6f2a">
      <Execution id="73f6eaf9-df74-41a6-9136-586fe5e636ff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b6b3361-7b41-b780-77d0-9262f55bfc91">
      <Execution id="64ab6931-bef5-4c94-a6dc-c400648a29a7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3239baa6-e267-dbe2-0c1f-cf40886141e5">
      <Execution id="d679c570-d72b-4d0b-9e78-acd0ed5b6c3e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e22ab60-1c50-b171-afba-faea93019cbc">
      <Execution id="6ad3f5b4-98dd-4774-8185-70913dd62496" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f9df33a-15d8-9363-fa15-d829c22c7631">
      <Execution id="4599475c-6f39-4262-affd-e1bb83b117cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f7f01d5-dcb3-559e-2f3b-bab584a8ca26">
      <Execution id="c51d2cc7-d1a4-4ac4-b560-445a01b1b6d3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="37416c20-f604-8893-9847-10f29cecc930">
      <Execution id="f752e8c0-fb50-415a-b5d9-85ab54456574" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5f7dcea0-3d69-1407-8f03-bfcbcf02f27a">
      <Execution id="a96eb6f8-3e8f-4463-87ae-5f4d827b66e9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f97975f6-bbf7-8489-dc5b-cb61f5052b56">
      <Execution id="7801e53b-4b8b-4dd3-a209-72f57ee3620f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="93fa8f6a-4cfa-0b97-8ecb-7cd8e09fe238">
      <Execution id="802cb0a0-f90d-49a7-bdac-fef0e6a8785b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75f3044b-b789-1838-3d52-c7c57e56d64b">
      <Execution id="ef2cc2dc-f2f4-4f26-af1d-94aff3ecb14c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bbb8a264-7bb2-9cff-dc36-dc8f8858e8a1">
      <Execution id="90123c0d-0373-4f17-8284-abc8a7c5ae76" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d1888d5-1d67-7dd4-fb50-eaa4f0b471bf">
      <Execution id="be97237a-099c-43cb-8d94-a94aaf6784c9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d6ba95f-64ca-2b91-3c2a-41bef6c2b114">
      <Execution id="0a805b54-a24e-4451-b63e-9a94e39ad074" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7285e30b-512c-3fb1-13f0-26b4b100e1bb">
      <Execution id="d961d08e-df8b-4e6c-9eaf-ce505ad3f9cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e488992c-efc4-b05e-f736-39385d1ca220">
      <Execution id="b5e75f13-96c9-4449-9000-16b74204d85e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cef54e27-703b-1d0a-7b0c-bc617485a163">
      <Execution id="d0ac8444-325b-4b07-be97-68123f42b293" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1833d4d5-596c-48c3-44a0-608e8b40d511">
      <Execution id="c73c76fd-531d-41e2-8510-d1d7ee7a74ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="014374d6-06ee-002c-a64f-a7392fa5c51b">
      <Execution id="20fda31f-104f-4671-8728-311f21abcf85" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="63c020dd-254c-61b1-3d79-dd52784a1ef0">
      <Execution id="e1d033cb-da47-4405-8586-fdace1a81967" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="de168e5d-654f-536a-50d8-310009d9a949">
      <Execution id="4bb926b2-1a4a-48b8-8629-ba91289f0085" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2e2b613-9e61-1dfd-2dfa-ee963b6908bc">
      <Execution id="82329c50-061a-4e73-8464-536f78ef2279" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c093b0d-eea8-6996-3c81-c348a868dca9">
      <Execution id="446349c5-b4fe-46ab-8459-67aa025fe933" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="190d37c0-d42e-4c9c-5970-8e9693d96fc9">
      <Execution id="1ef77aca-0f39-4998-8091-6694ffbf2170" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="861271a2-8900-2ceb-93bf-ab7f7d4a4466">
      <Execution id="b07ae476-ee03-49dd-a9f4-460acc540f76" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0e5bed3-18e7-1d5a-0193-86f5497fc9e1">
      <Execution id="d168a0a7-cec4-4ea3-86b3-c7fd8bbcffd3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="278d2fdc-8160-3dfd-8a05-1d698324cf18">
      <Execution id="2759ff32-0e63-4937-b76a-e908fee2d389" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67e46628-8ac4-cab1-090c-f995db06c8f8">
      <Execution id="45456933-56e8-4325-aabc-18b05931889a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="95080d7e-1009-58aa-e521-57a8a5f8cfbe">
      <Execution id="61a2aba0-c672-4292-abb3-09862bf3e906" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5a838e27-d7d9-e803-67c6-adf4d20225b8">
      <Execution id="d8208770-3027-42a4-bdd5-a16e413ceefc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0584e66b-0399-2b53-1a64-82a7074a1818">
      <Execution id="aaaa3e39-9abc-490e-92c4-368a393fc229" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 4) + 2&quot;, expectedValue: 6)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c809a6cb-086a-3572-a2d4-a7a9a30ffff2">
      <Execution id="d6587847-19e2-471f-a0b6-fad2e51fe326" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f799580-a8db-5713-b5bf-fdd5d866141a">
      <Execution id="b78c2004-6984-469d-8644-007aeb5989f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ee15c058-888c-e704-0270-7a291244fdee">
      <Execution id="c56da7cf-cd90-44c9-82f7-760a5e7dacdc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3a28ed6a-e888-34a4-4646-83721ab8aa3b">
      <Execution id="e549a306-f004-41c3-9ca8-2edc1f5c314f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f2aa49c2-5936-a474-4665-dca01f5cfd05">
      <Execution id="584081bb-20b6-49d2-8174-b4cc3ca172b7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bf648ebf-2fa2-42af-4ae0-976a1c2e654f">
      <Execution id="6c0477a4-1eb5-4fea-aca0-1951e4153308" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="580a3282-11de-3081-5f9e-91044d62b763">
      <Execution id="cb5bc8e9-ab30-442a-a7dc-5aa7991b5949" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="66906472-cbd5-914f-3fff-0017b2ae75b7">
      <Execution id="c7bbdcdb-7aa7-4105-98c9-da874374b626" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab4501f8-6b42-73c4-3329-ded45257416f">
      <Execution id="72d4a877-eef7-41fe-aa28-df22b796ad59" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="79e5f3ca-a451-ddfa-d150-44b754273811">
      <Execution id="70212474-87ba-4e3a-845f-6071d5fbeb14" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e8de1eb-1662-6184-f0bc-9c16a38c2d75">
      <Execution id="23a66165-7160-4125-b649-15558886d5a3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0fcba43d-6d85-f463-4e8a-dc2415cf9152">
      <Execution id="3535b197-53e0-44bb-9849-2ed94a32b812" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="242da0a3-54e8-e900-59ae-415aaf36fb2f">
      <Execution id="0fd6ea58-68f7-4a17-afc4-36db666eb305" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="889e1d72-16f3-f90a-e6ea-bca5507a0855">
      <Execution id="abae4e6a-d028-41ef-a0d1-1955a1b8aa4c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="341c6df6-31bb-cf23-c657-8a478320087e">
      <Execution id="5dc45993-c856-4ff4-bd6e-8492c13bc7f7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b218c33b-227b-537b-624a-0cc0e643ee4b">
      <Execution id="80ce3489-c84f-4e79-b8f8-6f8d839e1181" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8658a7b9-f20f-093b-eaf6-9fda0fb99328">
      <Execution id="1de78f27-2cdb-4223-b4f5-2c3f20ed5cee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ea0aba16-17cb-4c4f-57d3-461af2e4fb4f">
      <Execution id="564b0a6a-3d56-4f23-ba32-361f07659a25" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3f8e1488-9058-b01a-c190-d152af34f73e">
      <Execution id="4ceeda65-d9d3-48ed-b1c6-1f108e757c9a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edf42284-124c-18f4-1841-d19cade0a913">
      <Execution id="9c370e90-6f52-4b55-94ea-a35e044c229a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1b6d6cfa-cc38-2361-795b-ba120dd6cc73">
      <Execution id="0ba69ae6-317f-4682-b06a-8b3500bd16c3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e38815e1-3e25-7003-bcd5-6b4c88f3504d">
      <Execution id="37615c98-507f-4ffe-a71c-a940cd28230e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5cc7c775-e5e9-3294-d4ab-df25400ac24b">
      <Execution id="2376ef50-ffe7-4748-b669-9d2d2a1f7070" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a79d212-16c2-eefd-a8cd-5f4d4c9edc7b">
      <Execution id="c2f94dc9-eceb-4886-9979-5556fd337248" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="beab640a-a38b-f7da-5b38-55dc2a68bec2">
      <Execution id="5e826c01-8768-44a7-bbbd-83e2869ac63c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b6c56780-5fe2-00a6-d4a7-39024888f502">
      <Execution id="addefe65-02d2-4d92-9963-54c6715ad530" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1547bbf-91f5-b718-126d-80f7372a4867">
      <Execution id="e250ab3d-be0c-4059-aab1-daef2e03736b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3f3935e0-5e80-7863-6f72-7bb51fafe025">
      <Execution id="ad2d7ec3-c144-4190-8417-65474178f888" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7a81934-a7af-8729-ecff-9f33d6871585">
      <Execution id="8dbb06de-b299-48d1-a9bc-2be6583883b3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="324123d0-80eb-16fd-6c27-5f64383ff68f">
      <Execution id="ca7b0509-e916-4669-bf3c-7e81cbb76fbd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d9c1d719-8623-3c46-8105-d910ffc46172">
      <Execution id="f2ae41ea-3d85-49ba-aad0-59310700525c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ca44d52f-b56b-5705-6bd4-5df3f329866c">
      <Execution id="6ae2d847-8831-4d15-8da5-aa0f45056e3b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1e4fd54-91e8-ed10-c3ad-6591151f0365">
      <Execution id="26143974-3fd3-4633-81a1-56eee55bd3d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bee071d7-7fe8-f1e5-2324-362f0cd9dabe">
      <Execution id="98e02658-c2d2-4824-8140-79ea2d44788a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8c5c8c4b-a0ca-2e15-1511-29ad22db0415">
      <Execution id="ef5b5fa0-1b89-4264-ad4a-601637e7e2b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ec30bb3-0d63-c142-0d38-740d2a8e6fb9">
      <Execution id="49542510-9329-43ab-ae6a-030166ffae5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="20290e42-b99c-08b2-c4e6-46cf308dd005">
      <Execution id="cc02ddb2-d809-4731-a80c-fad65630dd80" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="41e0f93c-3fba-83a7-76da-699d5d68434c">
      <Execution id="ddb7f0a1-d2cf-4001-9662-7ea445ed7bf5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01c43de7-2ee6-3dfe-a4da-740c997ffb6e">
      <Execution id="3f3fa754-1578-446b-8728-870104cc4749" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="98780885-4400-c861-fda8-dc0f54413cde">
      <Execution id="eaa7b27e-0f01-4819-a780-9ab715192d80" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="21841fcb-51db-8b56-1ec6-330b7a189f16">
      <Execution id="c48b08db-126b-4b1b-82f9-ac610c19473c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e0ccea7-93ae-68bb-50f1-9608ca78398d">
      <Execution id="54f3b1b2-4837-4f24-8b49-0318039655a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="527ae4fc-b32b-e169-880d-5e7ca94e3a7b">
      <Execution id="4e5d50aa-95a4-439b-922d-6acfe31c0d67" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="22bbc83f-d21e-1f73-594e-3b59d27ec7a3">
      <Execution id="7d240080-d34e-48ab-b4ff-e5c77a09ea74" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0f957c3b-70b9-f6ab-5a34-4a26e6bed843">
      <Execution id="9481a424-0b45-495b-8be1-d5a1831960d6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5a8c2451-1457-6f0e-7492-4dc612c99061">
      <Execution id="6c62107b-70cc-4ad4-aa07-6bce40379c90" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="504ac613-a495-1e89-b4cf-0b7e39869100">
      <Execution id="0e8a642f-a847-4c63-88cb-e36aaf709423" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="591cff53-2f79-2466-504d-c072d4fe6665">
      <Execution id="fd7ff8f6-36e3-4e6f-9385-83fc87a9c93a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="687b3502-9e6a-9efc-154f-922d2cca5791">
      <Execution id="1f02a3d6-e0c4-4a42-bfb2-a6185ad4b667" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a0c3f2cb-8458-9f38-8e5f-611c53b57510">
      <Execution id="11f938e7-3cf1-4faf-a854-6a1ed3c529c6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) is 12&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8249eb7c-b8d5-e989-66ea-d4cd9188c4c7">
      <Execution id="11b5769f-afcd-4396-8836-94cb238e9455" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0e829ef9-8c52-683b-7d63-935f0d1babd1">
      <Execution id="ec5e64e6-7c79-4a45-8c87-3d01176d8901" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="528e94ad-3e4f-0f67-f3e8-a659bd53354f">
      <Execution id="01a6aed8-c739-42bf-83a0-b0b98548ebee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9c610144-974e-c8f1-28dc-46031984cd4f">
      <Execution id="52c8cb96-555e-4e06-aea3-bce6792d5869" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e22f2687-ac39-d1ec-cf7d-1ff931ebe8d0">
      <Execution id="a711e774-33ca-422f-a0f8-d95158ac3493" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="51d00848-040b-ff9b-aad8-72c8cbebe00c">
      <Execution id="3c867f88-3d45-474c-a0ce-17339a3d0ec1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cabbb603-69af-7aba-0397-5a67fa86d925">
      <Execution id="c1c24dcf-60fa-479d-9b42-a3e671e16d19" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb5fba2f-5c15-2eed-9c85-527fa52fd656">
      <Execution id="5cf57b18-19a0-47c8-916c-c93c5b747140" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae6ab7a8-2646-6333-099f-50c5bf591034">
      <Execution id="99a997a3-271e-4724-8c91-5fb5f06409c3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ec5f0d4f-387c-0c07-870a-4267daec8c36">
      <Execution id="c77d56e5-6ae3-4456-bc32-5eb423cd198a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="21f9b134-7633-cdca-37db-a93e42e8715d">
      <Execution id="ade551eb-3c51-450b-b0ef-dca9cd95cbd0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2d951cf-e480-469b-b7db-38089ce98223">
      <Execution id="c125f97c-866c-46d2-8aa6-ab100b5a7b10" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="19ec4286-ebe8-a1b7-ed38-a6efbc62c6e7">
      <Execution id="450194da-922f-456e-973b-b26dbd76f02a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="163d1b5f-20c7-4bac-0d06-8efaf06e137e">
      <Execution id="fcca43a8-e0bd-44b3-8bec-cb10403f093e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3477a61d-b717-dd5a-29dd-176556faac72">
      <Execution id="20b2de04-946e-424c-98c5-bcfc05678dd2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f35ba20c-1190-3864-f3e1-a628714dd49a">
      <Execution id="f7b9a9eb-a709-4fd5-b5e8-8985d4c4bf66" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b296b0c-6adf-cb01-723a-664b88352d30">
      <Execution id="b6f11095-30c6-4f85-9cbc-dd75e45c9771" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bafa9832-90fe-b182-50a0-2ab78b37fa84">
      <Execution id="e0a6ddda-5f57-449d-8b4a-95a67dcbd8ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cead969c-8a71-2ca6-3e73-e37adc96884d">
      <Execution id="f0439746-a3df-4fce-b7d1-592028f6a4c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="73030872-9fe5-78a3-e123-137d72e47a68">
      <Execution id="b0b0743e-df7b-47c7-a1b9-67448ac8fc79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b0b6b962-025e-af6d-70f6-0adc0d585d13">
      <Execution id="9e80f874-7a9a-4b41-b9b2-9724a5f26fa9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c96992e4-ca6c-115e-f054-0bd8e3255da1">
      <Execution id="7df88e48-2ed5-4090-963e-2403b41cb73b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="16d3b7e8-d9a4-415c-9c79-fb494ced8e8e">
      <Execution id="43188dc9-b9f3-427e-9968-5ff85c9c3bbe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8677aeb1-5913-c332-d852-05b01b0c46a5">
      <Execution id="08790e58-f022-490b-a9c1-42b0389db9bc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="698dc321-cb7e-67eb-b37c-f721ac4df98a">
      <Execution id="b3016554-3b05-4c35-a39b-e032ef107aa6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e7c5e41c-8df9-ef88-66a3-de999d90a800">
      <Execution id="f57d4ef9-ec08-421e-bf46-54e7f1ecd6a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="19fc5ee2-b61e-61c6-4b92-05a1d8c7d6b7">
      <Execution id="73002d1a-d7fc-4f9f-ab80-967a10bfe10c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5730365b-4a4f-4c55-6a4b-a8b5381ee021">
      <Execution id="6d5d3c9f-89ee-4d94-b161-56f9667fb7c4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4129ab77-f880-3bfb-0cfe-f6525360faae">
      <Execution id="1c0a00f6-cb81-4820-95b3-f4e2a05f035c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="424851ad-c809-0399-24ec-9fa1c9512f77">
      <Execution id="96761132-7feb-44e1-8fc2-0d3ddfa94ff2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a2e63ad-0b13-48be-aeee-82ae3969b847">
      <Execution id="86a8bc82-f6ac-482c-a42a-c7abcf69bd61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="689eda27-0ed3-fe0a-6a23-a0e5fad87e53">
      <Execution id="92cc07dc-19f5-40be-9dff-b79155d088bc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e9db6ed-dfb1-ba50-c0cf-a95a82622c3a">
      <Execution id="b7a3e6c2-3744-4bff-85d5-7b81e076251f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7dea1c08-3c63-245b-1697-1d815dd60b2f">
      <Execution id="37939312-8708-4362-9e96-bc20467a05d7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fc2c025d-7ef7-f2f4-eacc-c40844896fc5">
      <Execution id="ac4de603-5ac3-4bc9-84d8-98a62b383454" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0666f839-a4cf-7fda-34ce-0767cd6677e6">
      <Execution id="3fb9b17e-da82-441c-8a3d-6fcc9ede04fb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5d7c5c7-61e3-d1e5-5ef6-559bdf03dc52">
      <Execution id="ca013277-7aec-4013-b5ca-e626f880ec39" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="10c047d2-21aa-49d4-3ef1-c73100e8afc5">
      <Execution id="a3c3480e-a0da-4741-9a0b-ce5889ea5a67" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8d5ad6b-71c0-d650-0df4-cf5fb14ab24c">
      <Execution id="ade2cf01-b010-48ee-b4b2-424454f852c0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34453c3b-b472-12c1-e402-d01bae3a6a6c">
      <Execution id="8a0bcda9-fd21-4c67-98b7-3f5cadb4f559" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="114b4529-4400-f8bf-b571-dd394abdc720">
      <Execution id="abc176ae-c21e-4bb0-aee3-5c4421847e1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d597a756-60a2-2066-3c2c-55715d9f6e44">
      <Execution id="54f2e45f-0964-44ac-8075-e924e6ba1618" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8ea179ef-47b1-d8bf-4866-06a5a406556c">
      <Execution id="8a0c05ba-52da-4d16-bc62-08f939ca5003" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="48c3a4f4-590e-92e4-0df2-236652912d51">
      <Execution id="6ccf4f5d-65fa-4904-9810-a21d440f81a8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="176d8861-ed7d-7406-fd4f-6bfbe3e1e624">
      <Execution id="04b2c71d-43ab-462c-90ab-87024441fa65" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e512e02-bba4-2cf2-4536-0045d5816e30">
      <Execution id="a67993f0-dd94-4a2a-8deb-84fafd2a3409" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="70b3f917-2ca9-4b43-d115-87783b17996c">
      <Execution id="62dee29a-63e1-4c76-aabd-b674a2af8494" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="560e34f5-e6c5-4355-ba03-c627e5e47ec8">
      <Execution id="bb6abbfd-e907-43c8-83b9-c2b638388b20" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1cd7138e-0ca2-078c-7bd3-9f8f307fc273">
      <Execution id="5ea1b623-a6c1-4436-990c-2e766a42c903" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="be3feab5-257d-694e-1353-572af9f1cb0c">
      <Execution id="1ca7d21f-c640-43ad-99ca-0868b73e88cf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8909d248-241d-63a5-4088-0b7eaf69d0a5">
      <Execution id="960747e7-ea15-49e0-a2fe-983d5fef650a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c16ffc46-c2db-fce9-310c-9b3ea87b1b66">
      <Execution id="980c344f-337a-4009-a3af-1f43be148c69" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d82a51e6-211f-b58e-b28a-8aa3bbbe7d32">
      <Execution id="ce5636da-bd3a-471b-8ae2-4b4dbf038aba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="851f9701-f91d-ed57-c1d1-67f769e36e90">
      <Execution id="ac128081-be95-4639-9c7f-e793ebe43bc5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="17acc240-0903-b201-693c-5fa35fb85788">
      <Execution id="b1b094dc-8798-482b-933d-701a6998ce86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e5a3fb17-8f6a-c139-8856-14eeb854f48b">
      <Execution id="17edc5b1-d062-4754-9115-fe2e1e3aa55a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b70b4b80-f195-6f10-35c8-6d08b0681013">
      <Execution id="8919b7d5-f873-4ed3-a062-426ddb11bf98" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="60e313ad-329f-cf40-c5ae-d37f9c91c3c7">
      <Execution id="06f5ee62-9181-4875-b871-9a0b9a484aac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f1c12d9-7a29-d288-fd0c-6e3d3a3fa700">
      <Execution id="7b09facb-0a77-40fe-b734-70e810598b35" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="62211e29-e33c-ac81-ea4a-1f2d2364bda6">
      <Execution id="4a4960ab-0b55-453c-bd83-8abd89674042" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c54bfdac-6801-acfc-cdca-5abf388ae3ed">
      <Execution id="7bc99164-5244-4393-a77c-de48409f4a86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="322e705e-97b2-f3b9-b16c-8202b93f7ede">
      <Execution id="da7dd312-bfc4-4377-8910-bd950eb3a49e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="95cacc02-0531-98ee-b460-a5c47c913440">
      <Execution id="ec0a2a03-291c-4d2a-9546-aff20932f7a9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4b510403-7e11-b3b5-160e-c952de1f9d10">
      <Execution id="c3b13b67-b3a5-4ddf-a95a-7dcdd5689ff8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2b63c67b-1f6e-8e27-86f9-861cb2cd75d1">
      <Execution id="50804691-5b81-4e19-be2c-78ba67f872b7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58bb4a4b-d318-9bf2-6a9d-19eef808f5cd">
      <Execution id="e8f9ccc2-52ec-492a-ba48-60d522cfc368" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4c3effb1-73b3-68bf-e87a-411923261072">
      <Execution id="a40daa6e-925a-4800-9f1f-916102beef7b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: EqualsEqualsToken, text: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27dc3c2c-a8c7-7bd4-391f-ec452455f93a">
      <Execution id="53e69d53-8561-47e4-b79c-88a86a18f84d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="33bdbc1a-784c-f695-e9ea-d9e709942ac9">
      <Execution id="e4229f80-0bc4-45a0-8698-91ea3f48caca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8911a2a6-4809-3263-694b-ac842068a67b">
      <Execution id="9c8c485a-4c32-4ec3-b8f4-47f961ff0934" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6a58712b-ebe3-3373-955d-152d342b0a0e">
      <Execution id="d4fe5c50-5814-4df5-8b61-f6ddc8d3351f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0e769f33-ee30-8987-2ce4-817c80559e85">
      <Execution id="6e2f0a99-fa31-421a-941c-d704296ce341" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="88d7f173-b5c5-e236-ab09-126d31465b9d">
      <Execution id="3bca7cde-45c4-41ff-8961-9f357d0626a3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: FalseKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01735b00-4d1d-dfdc-bf6a-9867265adc23">
      <Execution id="ca7f740c-6b0d-4be1-855e-b034f2939a75" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02f1db6b-a503-ecec-bd38-204c63d5c68f">
      <Execution id="e365cffd-5970-49bb-93d6-2f4cb46d778b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="367a8e40-6494-cd42-e98f-8a54f0affbc9">
      <Execution id="04382e74-c00e-4cc0-aab5-7f297d5b799b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="51833e43-be4c-fbf7-4e24-a0606ab2da05">
      <Execution id="b8042789-26cf-43eb-8deb-556a578526ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bdd3f519-43db-cb16-d5a9-130d23b6776f">
      <Execution id="53916265-1b1b-480c-b869-29769c9c3b57" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3230971-3432-235d-e0e5-ed722438a33b">
      <Execution id="52d0dc57-db61-4537-b111-b3a3c6c84456" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0c3d988-77a3-bf7e-e830-ee58de1ce132">
      <Execution id="0d369602-ae58-4e98-81ad-da6f38ac5886" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9298a711-3f0f-4dc0-97c1-c7901fe03db7">
      <Execution id="07d32c96-2655-4797-bb3b-c02e7dc10f79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c4ac3a26-46de-3715-c36e-8f4d6f5f9f9f">
      <Execution id="a72f8357-885c-42da-b5ff-e28f37193612" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c1294288-5c6b-1ff0-7c9e-e4879efc9496">
      <Execution id="0a025b88-66b3-4a02-b13f-16507d96ee8f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d565c5cb-ffc5-6fdc-1708-b4909d76ada7">
      <Execution id="dadd53f1-4e8a-4667-9b5f-063c4530b234" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b3c3bf21-3da7-e041-c98f-922dec8e31ec">
      <Execution id="ab03930d-505f-461d-9fa4-2262c52851c0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="098a82a9-6d3b-6182-bafa-c40fc4d60429">
      <Execution id="826649ad-c83e-451a-9758-2761ca78ae56" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5a3577e-6c32-fe1a-59fd-dc485aafd646">
      <Execution id="8843404f-9f30-4aad-9fd4-ff72dbacd731" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1&quot;, expectedValue: 1)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8d670c79-b1f2-a7b1-512c-d1fc547b9fde">
      <Execution id="27fc60b5-d0e0-4ff3-a913-050ed62121ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="676dc216-c3c3-2d9b-3369-d44a1498b609">
      <Execution id="dd141589-639b-4b85-9bcb-9ac474e750de" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2d8670dc-23be-1d52-84ac-70b24c4a5473">
      <Execution id="66a8b769-39b3-4a3d-941d-19724a0cc914" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b8ead2b-ccb7-78d2-1144-7d9cce24d811">
      <Execution id="1332fe97-7cf0-410c-9248-5cb8f9aeaaff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eb3c49ae-150d-bb52-7485-ce206265fe6c">
      <Execution id="ac5d68d2-7132-4826-9c66-156eec2c0b5d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4769181a-5e3c-cedf-d36c-7328cf7af390">
      <Execution id="d21b06f1-378c-4125-b304-8df835377384" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1f939fc3-323b-d2f1-acf8-d232bd60dbf2">
      <Execution id="1361f52a-f762-4957-99a8-8b1ba4638d79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9bf19e57-c470-cca5-3c98-872ba87473a1">
      <Execution id="c0518737-6b6e-4575-84a2-7b10643e2a45" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd0950fa-4ab7-98d0-c249-b6cb8c0b8517">
      <Execution id="aae35cfc-4e8f-4f8f-89bb-45b1a8ff7582" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5d2fe5c-40b9-a00e-2f30-2c2999c0e904">
      <Execution id="3904a0ca-e832-452b-b4cb-1f12d760ef95" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="698ffbf9-73d8-f970-4a05-60a63396beb0">
      <Execution id="a01d649c-2def-4ac5-9c34-716643a0f2f2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ca1e8384-2c1a-2e61-30c6-769a171f781d">
      <Execution id="76611b22-cdaf-4fb3-99a8-c4fd4ab8bf87" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02ded587-b99a-23c1-ce7a-ea90d5d3f41c">
      <Execution id="44356ea1-d629-4a1a-bb25-d4174b2a7857" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e6428bc6-1927-0bbe-1970-1a21bab1e4de">
      <Execution id="b85fcc29-596b-4136-83dc-58967480e01e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e6f7375e-1401-ba15-ecaf-69a460be3728">
      <Execution id="3804d220-7e8b-4047-90ed-8a8811eedc68" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="57e8aee0-ff63-3635-b398-bb18c3b7251e">
      <Execution id="e891fd83-f3bb-4e3b-8d67-baa921ae8aff" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="383c68bc-26f0-7c02-6eb8-ed0c1145f2ca">
      <Execution id="dbd603e7-82c3-4776-b2ee-b23837eeb60c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e2b62f8-d7a2-e8d9-9808-87ad6dfd68a7">
      <Execution id="28120d4c-4377-4af8-8ff7-48cc9b66f43b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f2c4eea7-4ab3-232c-9c7b-3c688d4216df">
      <Execution id="20da907c-9a25-4dc2-83a7-23e9ad77c890" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9390dbe4-f245-909b-539c-51ec2778d67d">
      <Execution id="edea6f70-9645-4306-b044-6b939303a8a5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="44cc864c-c7a1-e2a0-6c60-2d46344ad365">
      <Execution id="e61b0e43-89f7-4ec2-a577-f4789f6585a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5bfd12c9-ebda-74c7-b8e7-80c542893292">
      <Execution id="dd5b3b5d-9239-4d58-8894-ff3d8cd49e6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9fae981-ec1e-2bcf-ff96-35d378008be4">
      <Execution id="b8c9979c-47f2-44bf-a62f-c83037ba243d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4dec9f03-e31d-38bb-647a-72258968556a">
      <Execution id="905980bb-400e-42a4-bf8f-1db31d317515" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2652e89-08ec-3257-411c-b9e708e89df2">
      <Execution id="3971fcd0-dd26-4c41-b594-7a10769e3eeb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="068a10f6-68eb-5c13-fc33-ae4622bdd23f">
      <Execution id="52a95755-228c-47ad-91c9-d4779fe8a50d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="09ab0fb1-2079-6e6b-0baa-f926554331bc">
      <Execution id="4b89d565-5e62-46ff-8899-8d70f0ee5609" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9b5bbc78-c55e-abcd-76c4-de671ffb596a">
      <Execution id="938de7f1-1315-48fa-863c-e177c8d30236" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f5de07d-2f74-9b66-5f8f-668dafc78abf">
      <Execution id="361236ac-76c5-43c1-8988-830082ed3d56" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="66ced87a-2120-00c6-032f-8f5ca9a61935">
      <Execution id="11d763f3-cd9e-4b8e-8441-9b1311a1194a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8791e29e-fa4d-12ed-5dd7-2ca199626822">
      <Execution id="e2e6bb6e-b2d3-454e-b92b-df2e7d5866c6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b714498c-9c87-0b78-d61e-f290fd7282ab">
      <Execution id="a7e731da-2f35-4427-a4c5-4f15566ad5f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2772dddc-181f-e9a7-24fe-1b061f9ee0f6">
      <Execution id="19beabb5-5fcb-43ef-8e6c-7c2788bd2e47" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 == 1&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="88afcde4-85a2-ef81-4f13-4b549b5ea95b">
      <Execution id="9dca7a3c-7b04-45dc-ba49-047ab5fb9877" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8a4c009-6744-85aa-0bef-4f1cd7a9a8d7">
      <Execution id="fa496413-20ae-4281-a2ff-0b006883a501" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ed347eee-50cf-246f-7b24-33c602d5ae12">
      <Execution id="fa04e6a5-17ae-4df7-a2a7-b8b411619c06" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="79b93339-c796-01c6-7d95-1801f339a3b0">
      <Execution id="81d9ef3d-0130-43e7-b5ac-67459a20c936" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28d367e1-973f-baa7-5e17-faef9167b176">
      <Execution id="66b31adf-0d92-451e-97fa-0a81e33d8685" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4721f483-4ccd-b9af-34c2-5560a2095b58">
      <Execution id="c00c0d65-6ee9-4bcc-9399-3f82d5ed86bc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9393af05-7595-1c9a-8549-0294d3109c38">
      <Execution id="2e6da362-fd47-481b-a82f-e7bb849675e1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ecdd2bf-5ead-19da-3c3a-43bc86066452">
      <Execution id="5485c233-92b8-47fd-8f10-5825c613e114" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4b87edc6-5800-273c-b384-567e59d70f26">
      <Execution id="d26457a7-9fe6-4253-8ed7-eb1adeb3e205" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="791f42ac-ceb4-d480-c447-7f5de1b50d24">
      <Execution id="563ff01f-4446-4b7f-8d0f-c823dab4b5f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="970cd828-1d55-7f07-5605-8f46841926a2">
      <Execution id="f7079635-92e7-4270-9752-5ad3c2db1da5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28e8acbc-84c9-b9f3-0fa0-63cc89ff73d7">
      <Execution id="424b1e8f-f605-4029-995a-057a59036704" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cd26a307-e0ac-1c6d-82e4-dd491b9195a8">
      <Execution id="021148c8-4aa6-4498-811c-c27ff7a14fdc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e908658-07df-1df7-5f15-a1c2e2fb5a13">
      <Execution id="0bc161cd-7d35-4017-9690-fc4b851a6f72" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bbc988e9-2b51-7338-3c9c-0e28e5e705ee">
      <Execution id="e6a3e9f2-8e29-4edf-8c91-1e9e92d99b4e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1ee421a-2902-b97e-d16f-d4bf268450b9">
      <Execution id="42de6caa-3fb9-4645-bfc9-0086e3a74312" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4c9f5007-e9ce-25f4-7f66-0e6ece299711">
      <Execution id="76b34d44-cd91-455f-8a4f-63339548e862" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5300a261-8f98-ab75-b49d-1ba81493d8bc">
      <Execution id="92960d2a-323b-4ec4-8fb1-cf46d42471e7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c2df2d92-05ed-6b98-3118-e9ad3e95bfc7">
      <Execution id="8bf95a02-c753-4f54-a8ce-f20aa2cf0f16" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cbed7b4b-94d1-6b2c-4df8-22f8d9d07ebb">
      <Execution id="54ae8b42-d5e4-4f11-b0f9-692f2c83306d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9395a4fb-3993-cf09-aabf-5d94a84836d3">
      <Execution id="2b9be3aa-068d-4fd3-8609-ca896f15a8e3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e7a0c95b-54bf-d542-28e0-dfc7363ae16d">
      <Execution id="f863e82f-d521-4d9b-a8b0-386875a23976" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f1251b0-41e3-d504-bb10-f577dc488621">
      <Execution id="40b14888-37e5-46c0-8fa1-ae11ee2995bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="10d908b4-9bb8-ad9e-8b05-f34d17043a16">
      <Execution id="026bfb81-74fd-4439-9b44-dec17cccec0f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86730318-5043-b157-22c1-f1a0d72833ec">
      <Execution id="bfca530a-895f-419c-8f5c-59d057163e4a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b60a39ec-5911-415d-75fb-8c08669491b0">
      <Execution id="7fa06fa6-8b1f-409d-9b02-d67fe0a19e5f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a51b68b4-ecb1-2121-cfe3-0d421e95b9f1">
      <Execution id="b542477f-b190-4841-979e-9fece958b31a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a3ef1e61-66fe-7efd-3646-5d7d477cc23a">
      <Execution id="18c9354b-bd2f-4c0f-8222-493752d7f197" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34caab8b-7e9c-5466-74ac-9fc650104071">
      <Execution id="3331b20b-9322-4f33-8aa4-1005de3abf34" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7c14af97-e814-cc31-bdfc-a393da2ac7fc">
      <Execution id="71eb1fce-a937-43f4-b00b-61a29b633cd1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="307f6ab8-7796-f860-77ed-a9583472c0ec">
      <Execution id="9bdce840-7085-4bb9-a5d3-e3bdd903bd5d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35f9377a-7ed1-5fdf-492c-e8a7715ea5e2">
      <Execution id="2db016c9-f56d-4143-9306-be8927a4ab34" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b29fad7-5e5d-57b7-18c1-103e2dba36b2">
      <Execution id="22671523-b317-4655-9025-3dd2147fb149" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7820b041-1667-43a9-4746-db4c33f4b2bd">
      <Execution id="f5052f20-229d-4d7b-939a-c2be1ac1cda7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49a8efbc-6f2f-7a28-a0c0-0c67e74dd12b">
      <Execution id="4ef5f74f-2e7a-4f66-9c7d-2ec85fe17a06" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9e67261-6cca-689c-f1d1-0a706e0d7abc">
      <Execution id="11bb385c-ccbe-4cf2-875d-8e2250ba3acf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f39d3e44-b8e0-c912-738b-a251c6c53806">
      <Execution id="9bf0a1c9-59f3-47e6-aad5-4daf9667fa77" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9606b27f-0190-804f-7408-ba0276149c3c">
      <Execution id="c5a9e448-1ade-4352-99b4-7c20877eda11" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7ac4b2dc-1929-c368-4227-4cb7f68560a1">
      <Execution id="9c036c55-8ac8-4bf1-b626-852d83d7739d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1b705caa-324e-d2e9-a521-6b2a451a71d4">
      <Execution id="99a916e0-0cc7-49e5-a2d2-8c9da51a5490" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f3cfc05a-c6b4-326a-3412-2a8d498f10e3">
      <Execution id="2e40afbc-5dbc-4903-a52b-215ec855f659" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="037c9e3f-2fc8-dac9-3f4c-ca47fc564681">
      <Execution id="adfa5ed1-0953-4e93-b4e1-238110e274c0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="be84df17-db24-0bb2-915a-c8a1fa417ec3">
      <Execution id="6590dc7e-cab2-4987-80d1-8379210f2618" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="25e6bc71-97ec-816c-ca78-3c6cccda0ba0">
      <Execution id="5ff31343-bed3-4301-b7a6-1666956bd18c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7bc644fc-953a-2932-ca0e-a0d38ce73fbd">
      <Execution id="dfe573c4-df26-4f26-9f84-dec69bb0ca2c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d6289a1f-1ddd-f2c4-2615-1271e8766494">
      <Execution id="6edcd507-08b4-496d-9f0f-6a8a86444efe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e170dc6-a8dd-5e54-857a-dce5e3b444b1">
      <Execution id="7c8b3751-e6c9-468f-accd-368ed469857d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d5b4189-4c7b-d26c-abd9-132311143c89">
      <Execution id="7eb04e7b-57b5-4b18-b55f-78aa142f3277" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a75f0aff-a91d-e29c-20b9-e290c9b91a31">
      <Execution id="b9b22b50-c3d9-4966-b365-07ac72d1df52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6db4b3b8-cc63-6835-6d3f-2aef31af9244">
      <Execution id="4cbcd659-43b6-4a94-8877-2c536d27fd56" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="21e524a3-5eca-426a-7cff-3e67f8b100a2">
      <Execution id="83df16db-01e9-497b-8669-3ea52383ed6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b50cff92-a8ba-8ef2-db15-04f14f76857a">
      <Execution id="5adb5881-7e79-473a-b6e1-57fedc6c2c9f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3fdd6d21-2bc2-306b-1ea8-83738a286047">
      <Execution id="a54f2371-25f3-4ead-897f-476daddb1e69" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="862f7806-9df9-f6fd-0e4a-b455ba538745">
      <Execution id="ad31fd3d-fabc-40ed-ab72-588cc53f7867" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ca94ee6-073d-5728-12c9-6cfec33708cc">
      <Execution id="95f96a76-a381-4f6b-8868-7d5472c149c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b4dc3b9-8bcb-83d6-862b-e97db610cee2">
      <Execution id="17b2d97c-dd36-488c-a889-9afeb3ba780f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a7c9d2bc-5edd-4cd4-1c50-ecf8e09afb27">
      <Execution id="0f6b5e04-837f-45d4-beed-121e0b022776" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6b429fc2-9357-bd5e-3e0f-b54645775faf">
      <Execution id="9e6cf205-1d78-4bf2-b200-1779059a69ac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9bee401e-d51e-a977-67eb-72ad4761a646">
      <Execution id="7d96d165-4e0b-4dbb-acda-8d0e6e1b7116" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6a3413bd-4701-e4a3-0b1a-434c3bb62f23">
      <Execution id="652d38e8-35bb-4e8a-982e-5d19d31fe3ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="99db7bdb-cf0c-bbc8-c7a9-538e3ff95f5c">
      <Execution id="d62380eb-c611-47ee-9044-b9e9973dedae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d455cef2-6145-61b5-ce22-bfe9b401d266">
      <Execution id="fcbae167-bfa0-4e3f-929b-ac0dcd7039c5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58c92ea8-c868-e8f8-b831-647186eb97f5">
      <Execution id="df51ac4d-0684-4176-a72e-dd483dbe6d30" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="791d91ea-f7da-72b2-2c33-75d7a471b0ff">
      <Execution id="23a1eec9-41b9-44a8-bdb2-3c9b01b11dad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d2d7e718-110d-a9a1-021e-56f3e1c6790b">
      <Execution id="3706fabc-bf2b-4c87-ae61-19d1c4963794" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a0ffcaef-8d57-1300-6329-df7a82b327be">
      <Execution id="f82e8192-6e3a-402d-a235-50da2516111e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="873c80d2-6e59-883d-3bc6-f24e502d6f12">
      <Execution id="2e169501-d26a-4384-8e34-ba79d42b33c3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0645a6fe-056e-ce2e-21de-b74a96a64eca">
      <Execution id="0724beca-2427-483d-91bf-973fdb3d5bec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d898f853-754a-6c5d-3b2b-ed8a21dfc83c">
      <Execution id="64ea5c76-6669-405c-82c5-02d6b5b48c66" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6129cd43-f48b-d030-16f7-338898240e78">
      <Execution id="25a24f8c-2b42-4bb9-b534-a5e6462436ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="48ace240-48ff-d82d-4f41-d52a68336ded">
      <Execution id="47d70792-f9dc-458d-bf16-5fd0cfe64cdd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af999560-22a6-bc64-49f2-60fb7c16e83f">
      <Execution id="eef2a22a-6e7a-48b6-92f9-7d84f0466094" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c3b00382-709e-f72e-b3c0-f108f4668a1f">
      <Execution id="09d3f3d7-3f4a-4a73-8410-c5826977d0a7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3649a616-d1f0-dc94-834c-e74fd02da661">
      <Execution id="9cacde8f-33f8-47cb-a41e-483ad6fd7636" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb8b2a55-e397-d4f9-1645-9fb4780fc14b">
      <Execution id="c6094b4d-bb8d-4410-b4ca-db6eb108b33a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8951f6a1-cf92-62a9-dda8-25a185bbf2b9">
      <Execution id="c580124d-4c54-4915-b65c-d4e1c7ec181b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3cdd10f2-2d1f-2cd4-6e38-b5ddb09d2e34">
      <Execution id="5eaaf9d7-2365-40f3-bb41-5575646135ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0327bd49-4410-a9f2-6e19-ddfa3b7779c4">
      <Execution id="eb90c987-543d-48cf-8fde-134e27901ca6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9a7e0400-23cc-3deb-0ea1-c518d7284095">
      <Execution id="75f3bf54-f55d-4739-99b8-ce25b7a1aafa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e21b315a-b699-650d-1b81-722cee4b0d7c">
      <Execution id="6571e822-8445-4729-af17-ab87fa606bb0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="982e2f7d-0b81-b484-4778-e33ac3cc1588">
      <Execution id="bf3e9a13-81c2-43a8-8d18-062b83580d38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="faabcec2-bf48-2a21-7f5a-6810518ac9d0">
      <Execution id="ca3df0e8-c5bb-4c37-ade7-2c36e9fc0952" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ff61f6c5-edb2-5414-8279-15dc59d17452">
      <Execution id="94e3a9d2-5185-4c04-9097-91b3edd5b7d8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="57aa77ee-b946-2c03-830f-9e9cefd6b4bf">
      <Execution id="90b0845b-bd6e-4c0d-9422-f07ad73ffe74" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="74b5b173-47d8-f463-4855-e3aa9d2dbe67">
      <Execution id="4315a4bc-0555-47da-a18d-ec3d9a74df75" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b8d40bdd-3bde-10ab-c638-dbe861456930">
      <Execution id="e0c8a392-354a-4463-814d-f0347e52ba79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="be4d338d-16b2-a32d-798a-61452725088b">
      <Execution id="c4600f69-22ae-4b78-b891-d0fc95352258" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="626c9d36-46b5-078e-4f38-81a01f436752">
      <Execution id="c430bed8-26dc-4e7d-bc90-9fc6af226a0b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e3b9f7b1-d4dc-b20f-b949-a8b3f2124ad4">
      <Execution id="d415a067-3668-4ba8-ac54-9bc8ecc0e4eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;not False&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="574857b2-e588-56ad-f6bb-bf0becd1ff43">
      <Execution id="06537bff-6483-4115-807b-59a6f99cb8b6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eced55ec-0ba4-d364-48ac-e76623af532b">
      <Execution id="9fa05217-6739-49e0-8a46-3441d664d9ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edf39d1c-2b56-351e-dceb-e574d568c819">
      <Execution id="b668a6fb-ba30-4a5b-be26-1df593e28b8b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a70b3424-56cf-202c-2096-92abb5bfd76c">
      <Execution id="314020ca-930e-4d20-bd19-7c64687b9801" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="328f757e-a26a-de36-0fd2-3e30404e0bd1">
      <Execution id="f8c7f739-98b9-4f70-95a6-c298d65aad6b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="da871efc-364e-61ac-f0a1-3aab93ca62e0">
      <Execution id="76cd6e57-0fd1-4b67-9770-e53f3758bb71" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ac4c1ec-c27e-dc02-cf1b-986640fffe9f">
      <Execution id="ea33e63a-1f38-40d2-854a-98e91e3a5d78" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e88e2b48-cf17-7f2b-796d-fc356ce0df9f">
      <Execution id="45ea5575-7825-4d79-b41f-54497d9eee61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a0bab2b7-b712-8bd0-2f9a-190c72b0d608">
      <Execution id="49f08632-aedd-41e6-920e-d4573e2d37d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="754fd436-2a38-0955-7fdb-7f9c38febecf">
      <Execution id="443a4b8c-86d3-4c26-b48e-3e8e80a742b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1466e056-48ee-497e-1c0b-265acdef1176">
      <Execution id="d3dd5590-96b0-48c2-848c-d5545b82d08f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13737a59-ca1c-a4d8-a36b-20a4dcd26802">
      <Execution id="dcd16024-4200-4d54-8d66-fb7c76ebe02e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f67854d-8914-4da1-fd11-d2897634ef0d">
      <Execution id="19159ccb-35da-441a-bd04-2fbe637251bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5c847e9-374d-342c-6593-0919f640a50c">
      <Execution id="5d7946b9-3d86-4b34-8a37-2a00a842ed09" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9422caf1-3c6b-6cd9-f625-3e3d62c2b8d7">
      <Execution id="ddb21f05-2dbf-4672-8c8f-b431512938f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="87f5185d-4b3e-bf18-7b43-7d1cc0ffba54">
      <Execution id="4c14d7d8-e274-4e1a-a853-369d4ef85190" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5168e817-aa8b-3209-e13a-7dfdc424e751">
      <Execution id="f5d28e94-070c-46fb-9b64-f50dec71fe07" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f8fd5dfd-38e1-80a0-9c7e-8b93183aa940">
      <Execution id="c9ef8a30-dfbc-41c0-ac7a-8b9b7b738551" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c3d2893-1e26-b923-a71e-15d5cfce2db1">
      <Execution id="9a9624f5-d008-437d-a94a-88e06200d543" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8763bc6-c204-b842-6764-91aef6141ad0">
      <Execution id="2576f8c4-a657-4cf6-b257-2b8a587a0000" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f90de586-f0f7-7bb7-7e7d-66ebc740e111">
      <Execution id="d62f4e48-ead8-4391-b7f1-0291872cc9fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="93b8eed8-29c2-1c92-494a-ce2d96c118a5">
      <Execution id="8d446419-4b45-4978-9dfa-18a7db4ecbaa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ea74627d-7c0b-604e-141b-b95ab24e5e13">
      <Execution id="c91c086a-cb18-43d2-80ca-37f94b0acb82" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c99e539c-f68f-5e6d-1ae2-8eef75476423">
      <Execution id="ea510a65-c2d8-49e0-8fb5-41b089d98dc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2e8aaf6a-6702-b466-7926-345741e5078e">
      <Execution id="a1ecfdfb-c7a7-4cad-94e1-21dbd3872fac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8fd6afec-26b8-e121-f4e7-998c3ae4ac2e">
      <Execution id="c3fbcf5e-507b-4e7a-8382-29d660b8b741" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="50ddcb2f-913a-d660-942e-a66dd9e79dc8">
      <Execution id="0baf9514-295b-41ae-bc8c-2fdee12c104c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f770d189-0326-2a4e-4cfa-cacf88844102">
      <Execution id="2bd7cdae-fd6d-4469-bca6-72676b8fd2f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35a49b1c-3f79-0752-4188-b1f1fb479193">
      <Execution id="438adb58-ff68-40ac-bb87-c08a8dc63235" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="904ebdc9-31be-da35-c276-af88d4ffa9b7">
      <Execution id="80dd93ea-0e7b-4566-a5c8-2e5f9b2200f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="31b64d55-5380-54cb-1e53-67960d6b4a5b">
      <Execution id="06c9cfd4-a016-4344-b12d-581ccbf912ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e66a33ba-f11b-65a0-880d-89261eebf08b">
      <Execution id="027cd8d6-c838-4782-aa07-f6f9a68a8c91" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d92df725-e1d8-f617-db26-09e684180403">
      <Execution id="d1aafdd4-0ff1-4007-ab0e-2e8fa7f5f0db" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d8229abf-b486-4d78-bc37-754dd160b273">
      <Execution id="e2d15a0b-7fa4-4436-98f8-f2be60a937df" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f119d45-190e-479b-9944-25bc1309b44d">
      <Execution id="f2919647-126b-4a6e-afa5-37368a0beeb8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: TrueKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2cb25b3f-e618-5b6b-5e54-3bb03288b28a">
      <Execution id="08af0dd4-b36c-4e2b-bbca-698d88ae2b9b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="14a0db9d-8e98-e05c-3063-7e4e2fed6c5b">
      <Execution id="58a359cf-d3a2-4e80-a2d9-b34d55ec901b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="156352ea-c069-4b02-af9c-7724dbc0d349">
      <Execution id="30b5e24b-15b6-4378-9151-1a3b940aa98d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3f408609-7eec-5b04-dd9f-bf6a06759eb1">
      <Execution id="38cde186-fa2b-4478-a6d6-17d5970fcb81" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a3ff86a-3739-1b12-beaf-ff4b1fc946f4">
      <Execution id="0c5f07ab-3371-40ba-ac2a-f135b414af5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9d463f6-07ff-cd6b-63ed-eb96a2221272">
      <Execution id="44518620-dcc2-4f59-8d88-c3a7cd268b07" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e3851a04-87fb-3c75-a227-b90a1bfccd0a">
      <Execution id="84eedc4e-6bf2-4c22-95ec-125022a50b4d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f17390ee-c248-4f10-8f08-1516c130a9a3">
      <Execution id="d49c0f92-8193-4cb5-90e7-ef4983121bbe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="09b27210-9b36-0eda-3afd-880d3cb68602">
      <Execution id="614f9c08-1514-4bf0-b56b-28db43acadfa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b39669b8-6133-4c3f-10c7-b033ce629552">
      <Execution id="0ea7dfeb-7563-4d2d-80a4-5683b18c7b9c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aaadbd51-b37e-23fe-dfb6-67360ea79bd1">
      <Execution id="c0fb468e-69ec-49b4-9c5f-c1d01bca9f7f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="040e36f9-ec88-9ff3-6ddd-845330af1957">
      <Execution id="bf871f70-2520-4a7a-b481-b502e2de2cd6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="237aac17-b6ed-978a-3962-43a5fd10e445">
      <Execution id="607b6b07-769c-4406-9f97-98b0dbe2a5ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="513a3b57-b5ad-87c9-97c8-53046841fe44">
      <Execution id="d26866c9-b0e0-4ab1-aed2-2a1e39304486" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac38bef3-6340-4454-f640-619b9ea69904">
      <Execution id="3c9a91b4-e02e-4b65-851d-0dc07d9aeaf2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ce5c576-0118-6755-3cef-101645e2bcef">
      <Execution id="1ebbabd4-31d2-4f20-af15-350e7c322e48" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f4aa721c-b012-b7dc-f47d-c418c832514f">
      <Execution id="13215d16-fcf5-4c5a-9f38-58363843cb40" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bf85620b-2c13-b33a-56cb-58c7377065af">
      <Execution id="6f71fc49-6727-4466-b481-f7a7a7552013" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="416f70d6-19f6-3066-c054-a25409ca2939">
      <Execution id="f95c2964-a55c-4486-a451-f4aa080ec67d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b3bd7f8d-0f1f-6936-9169-5efeb021948f">
      <Execution id="dc8dc46b-e55f-4cfb-9225-2eecc137f437" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bbe735d6-fcbd-d59a-5d62-49868141a1d0">
      <Execution id="55db7ab8-f322-4bf7-bd72-897abc608957" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56ff286b-9b2e-7556-3758-557f2b9c545c">
      <Execution id="0ad0bdd2-4ae3-4166-9fdc-cbf8c8c87037" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8133ba28-0888-df23-ee42-db7d702a2d5e">
      <Execution id="2e5f4920-fce8-4aeb-a282-e8517b262eaf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="80bc1e0e-3f35-015e-4382-15460e4a9226">
      <Execution id="3c6c9b88-1e5d-42e8-a910-faee99d744d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="492ab3e7-a934-32e3-c9e8-215d9345387f">
      <Execution id="31f35473-ce57-4cf9-b4e8-ada9d2c82707" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;+1&quot;, expectedValue: 1)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5f679b46-e8aa-1a62-032b-1e8afc34f3f3">
      <Execution id="8dad3bda-41fe-4295-a376-1ff74f232e16" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="96423b6f-6772-8c83-9a94-77ab2204c5de">
      <Execution id="1824a70d-c118-4874-bda8-52651220239a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b51e26df-499f-fd50-88ea-4ded76bfc0c8">
      <Execution id="268e7405-9523-4269-a937-06eab37caac0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="93fc0752-902f-5bcb-e0fa-6552707ecb89">
      <Execution id="c7f62d7a-6ada-4500-8cfa-302b86e073e1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a2d93c2-d779-4b70-3d91-257a0bbbf2c0">
      <Execution id="50bd49c6-ea2d-430b-80a6-d0465fee9ecc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8df2ac41-3169-dc1d-ca3c-a2c3cf53f1c7">
      <Execution id="2fcd2f06-bdb1-4410-9d96-c63e3aaa3df3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2fff00b8-33ad-55ce-3df9-4490c6103e94">
      <Execution id="749392de-ce0f-4a0e-b40d-c14dabcd4b02" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f7562ff2-954a-169c-10ed-f6ed01beee7c">
      <Execution id="2e1601f8-cfc8-4a1b-97ab-9797873d75b0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="06e9a9da-3bcd-2c8b-acfb-ef18ca77a802">
      <Execution id="5e1f80f4-64e4-4ba3-a167-925a2e3924c0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="04a0b750-5fd0-655d-24e3-ceaf8247fed0">
      <Execution id="5b5a19e7-044d-4fe0-9aef-4a55678bdbc8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b8f11d4e-7fe7-d5c6-4619-0d1b21fa7ad4">
      <Execution id="422118e5-36e2-4cd5-9215-d9024b75e5fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: IdentifierToken, text: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85f93516-3e4f-26f0-d82b-c7951d8e363b">
      <Execution id="6c8fb37c-52a4-4a48-b746-f0562588a69b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;8 * 2&quot;, expectedValue: 16)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b489d305-0b59-98cd-dfec-481ac3164301">
      <Execution id="090b0e66-0652-46f3-8ca6-830c71342451" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="08b590dc-717c-c757-b69b-ebcc9e0d3001">
      <Execution id="6fbb8dfa-a142-48e9-a45b-b737a94c6f5f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="722b8766-7286-b23a-ec20-4ddbb66355ef">
      <Execution id="cec4e6c6-3fa0-47ef-b74b-4f20473671d3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f7a4a9f-115d-596f-d650-eea1a84e0fa9">
      <Execution id="479f188f-bc14-4dc7-b316-7b12f53e23bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ead2b41d-cb5e-6698-404a-f4013e5f8a6e">
      <Execution id="bb924eb9-eaf8-4029-b339-59692dd8c6d6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="589350d6-7e10-43bb-83dd-a978f8b1ddda">
      <Execution id="8ac6bab5-370b-4217-99ae-053b57d01dcd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4560a98e-b5cd-13d6-d888-0299b48a11dd">
      <Execution id="7495a883-74c4-4071-a3fa-8e6ec6d61827" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ad93ff4c-d2bd-a777-86a9-95b7c9e04128">
      <Execution id="48f86aa1-6eb4-4ece-8ce8-914af60b7a4b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d3bf771-1af3-0ea7-c288-cdac10fcbfc1">
      <Execution id="9e32a536-e994-4077-ba65-825d2f32d55a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c6f85034-7c6b-d3a9-a00e-49934b44cff4">
      <Execution id="b7bc296e-76e1-4608-a121-5516c35f1b42" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: UnaryExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e4b3ccc-8b91-0568-3e1d-72c8922e70d0">
      <Execution id="23a617f7-def0-4e98-86f0-e9b1a2de2c5a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af962a83-6338-5e2d-e184-989b6ce27121">
      <Execution id="2682c34c-acda-49c7-93af-ac7009006dd6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8ff53185-a489-c2c7-2a49-5350f1f99fd6">
      <Execution id="87364003-5d8e-409b-9056-60ab9e0bf7b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e8aaf302-679c-dc80-2209-46c620d484ce">
      <Execution id="b33e793b-42b6-467f-ba41-d3901b480db9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0eaa47b3-dd9d-3e00-669f-e8cbadf2fa36">
      <Execution id="7c7e4453-ed11-4cbe-a1d1-f2de96261692" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1e36b55-0dd1-5f06-4f2a-b0728ddd2200">
      <Execution id="529eccfc-c8b4-49ec-aea3-608d26771540" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c5b778be-6e83-f281-6cd5-ab477ee137d4">
      <Execution id="16a81b0d-1c95-4ba4-acf7-e734ab5fc7f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f1654ff0-c1b7-d09a-ec85-eb38e4bd101b">
      <Execution id="7524e10f-ea2f-44d4-83fe-3fd5a6fc3747" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7ad5768c-9ff7-5b1f-71c3-55ac5f70113e">
      <Execution id="0df2b0a5-3165-44f6-8cac-b6e9565f4245" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5aa26f02-d133-6cc7-7683-f824f0e3c12f">
      <Execution id="861fdda3-2a11-4e80-bf92-e33f85e014d1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1dd75b6f-76e6-951c-2872-d569faffe5a3">
      <Execution id="cf8a0a14-37d2-47e6-8906-e01523f1cde5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fee15622-a411-246f-0c81-a60d1eaaa5f6">
      <Execution id="47148c38-eba0-49a8-a694-164c70eee642" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ce0478ba-7529-c192-3f22-d3c8957f387c">
      <Execution id="f6e4627e-5b7b-467d-baa9-c8d3a6c668e5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="73e21423-d408-9d0a-110e-7b8036bba3d1">
      <Execution id="26746863-3e42-4a12-b929-5329a7c2b9e8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e446c4c6-a872-1b19-3a95-a77520104b91">
      <Execution id="9959a76c-dbc2-400c-a6d2-3f76638f973a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0e5906b2-d2bc-e1d8-cd2b-12f22212f185">
      <Execution id="2db548a4-c470-47fc-8804-4150a3d939e8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6233d8b9-2b76-27bf-f094-7967368b8f2d">
      <Execution id="ff4dca96-ea00-44f5-b100-fad797944df0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="82901ec3-e988-9aa6-5ce7-cdded3a0760f">
      <Execution id="7813d2b6-d68e-40a8-ad65-5a70e8e523e9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cb218683-84fa-84f8-36c5-b189f9b8cd96">
      <Execution id="bd463d34-669a-4bea-a303-e56b90156429" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01586e9c-790c-6a7e-d1b1-f81bffdd5510">
      <Execution id="14486e80-c251-4a08-937f-8643e5801025" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5ef777a3-8eb2-d44e-c06d-6656c44532c3">
      <Execution id="d6325983-a7a6-4aae-b131-650dae5f7453" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1b83da0c-08a2-320a-173d-f7f32c9b7b79">
      <Execution id="3ec6926e-3327-4bf2-9799-d83b8740857e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="19d98804-c911-4824-6e6e-d8213db96bd2">
      <Execution id="3d519113-a8e3-447c-9893-69cb246ffc61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13d6dbb4-682c-c3f2-16b0-9ac3f68f6b72">
      <Execution id="9c678eb5-48e5-443d-85b1-3fde11d440a7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ddf6f135-86d0-9637-6276-da22d7aa96d6">
      <Execution id="149149a4-2b94-4f79-a13a-356409d2244f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="434cf9e3-f67b-d3f1-9963-f200506a12fb">
      <Execution id="ae9a391f-a8fd-440a-8035-c31b34844b67" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="092b54aa-5a8b-523e-4c62-6753045fcc57">
      <Execution id="b47cb17a-43aa-438d-970c-a41a2b1db75f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="793406c9-b5ea-4e3f-7f4b-02dc29a281b8">
      <Execution id="0695055c-e0f0-4630-9659-a3b8a8080179" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f08de649-f8ef-0f46-d483-58264824271b">
      <Execution id="be2cbfda-fbe0-40aa-b626-8d2a0e931e85" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b5f309eb-034b-6a37-aadd-a92858c9ef26">
      <Execution id="ce664204-28dd-4a52-9ab6-5d803f547ca9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f5a3707-79cb-f959-873c-edf3c878e958">
      <Execution id="9c92aa73-7831-42f0-a384-8cb15fe9636e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="15ba331e-9eb4-33e7-0f69-8143990dfd4c">
      <Execution id="9b15c8c5-c9f1-465f-8658-9a3e6d9cc044" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="16281464-b63d-9914-3c06-7d706ef6a663">
      <Execution id="ff398219-cd15-40ee-b0f9-d91c26b6e5d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a77ac8a-258d-afe9-e1a8-68e185302b51">
      <Execution id="55bb8b9e-ae0b-4d73-9a38-c5ebdd5d20aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="19a56280-872e-49ca-3cef-54276e1e5d2b">
      <Execution id="e8ea6ede-3d97-4696-8bc7-2b6ecf406a54" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af425286-20bf-1aba-6a73-c01778af4221">
      <Execution id="e7eab168-ef45-4273-afcf-591a876e428e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1db0614c-1a60-4394-e324-2d5851408d25">
      <Execution id="1e9d74fd-37ca-41cf-891c-038e1deff0cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="55e73abb-0ab4-736a-c45b-d442b1c22907">
      <Execution id="96326201-b83f-4b05-afac-ca2995b546c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b52d0822-04af-b0f7-d030-908b71193673">
      <Execution id="0a4e482d-061b-49aa-a1d8-c35873d51fea" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0d7ebab8-a8d8-a105-a6a7-767063cb7a1e">
      <Execution id="0e1df000-b8b5-487d-8980-64d2e15ec066" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ddc7dd4-7644-0681-53cc-6eaf7a50ab74">
      <Execution id="23e875db-87cc-46fa-95e6-4eaad66cea7e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="217b8b61-8316-0232-a090-7e3b4bf18884">
      <Execution id="c7f87ab2-2f3c-41b6-955b-a43776132175" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0a81c69e-727a-72eb-53bb-371d696f4fa9">
      <Execution id="2740ebbd-0e4a-422e-9611-c83666cbbe29" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dcd6b635-689f-8e95-18f6-1b75d8e71214">
      <Execution id="0f013244-dcd3-4834-9358-2b60a61e48ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: CloseParenthesisToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e9f7c45-e9b6-0779-a26b-f747ed21350a">
      <Execution id="2eb0d569-76f3-427b-b595-153cf9e59254" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e0dea92-77e3-53be-777a-0171c358a448">
      <Execution id="9d0539f1-0f28-4cc9-88d0-3ca0765c18ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="475ca5da-3572-deda-fe26-b17a160e440e">
      <Execution id="c6d3c944-be4c-443b-b896-71dfdf341dbe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1d6e6b64-215d-278a-b5d2-ba87784c2865">
      <Execution id="9e77c9f2-40fa-4d57-9632-66bb00802f8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cc1a9500-e810-a78c-88c2-7189a5b5ba53">
      <Execution id="00de71fb-ddeb-4523-b8c4-973f42b83aa3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1c8e3bad-b9e6-1cde-728d-2550dd3acc80">
      <Execution id="10ca9766-8844-4e35-8a41-68b94cf6cd0f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd7d445b-d179-3e23-276f-9e420f3d7554">
      <Execution id="90cd422d-29ee-416a-a967-8fa74a198c05" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cac49b5-cc17-2ffc-c05b-4bcee9fc03d9">
      <Execution id="7e026bc9-96b7-4776-8122-94d043c87696" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f4144a4b-3866-4b81-64d2-857c6a9f450a">
      <Execution id="a219256c-f189-47b4-ac6f-4e2fb7b0b98f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e74bdbe4-eda0-701c-3df6-918b86926662">
      <Execution id="f3b6902c-b305-41e0-b680-5dd7575d64ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="012dffc6-77a5-6b3a-83ef-514994b77051">
      <Execution id="d24f5275-3615-4d11-9b1f-06164b644eec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="00e8da9b-6db3-d92b-712f-e2599cadfdfc">
      <Execution id="b8530db6-ec2b-4c15-844c-1f9d4f10ffee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a5306c4f-12b5-4b21-95b8-49af91f0265b">
      <Execution id="25f1f2b5-620b-45fe-ae38-7b39461c4813" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d8e8c50c-2308-244e-d60e-e854c5ca350b">
      <Execution id="74689a93-1b69-4aa3-b59f-e6e2917dcbc2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae53641a-4d55-4ed6-a531-052bbb67db4e">
      <Execution id="39f28194-27fc-431e-b55d-7812dd044364" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ed89ba17-bb8b-bff2-9e02-842d4519bcad">
      <Execution id="912b5c90-e6f2-4733-a026-f14e3fe51cae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="721e756c-b7b3-4e3b-237e-440d75ee9eb8">
      <Execution id="2672c5f2-8bc5-4731-8977-a60607ee3b13" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d61a9fa-8b85-2002-6ca1-d969fe122866">
      <Execution id="859bad60-b7b6-4cdd-a8c5-70f16824cc01" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ebba3194-8aa9-efdd-5fbb-73128887c60d">
      <Execution id="35b0a12f-6d4d-4781-8f05-f97405deef38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;12 / 4&quot;, expectedValue: 3)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7337caf-7a27-2772-3805-d7038e85f2c6">
      <Execution id="9b26f9e6-1d35-4c2e-a09e-c17efe16147a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="55734c88-0e7e-b987-d1ef-a5f600957170">
      <Execution id="ef2a2c75-3d32-4879-8775-f2f09024ff5a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e922a3e-2752-2f2a-324f-e6f7ce286000">
      <Execution id="d18e9fb9-69e9-42dd-8a44-fb63847d9aed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b3c013f-4c34-2209-e77f-fcc0d9a6dce9">
      <Execution id="9dce60c6-82cd-4f83-ad71-c3b08c1f53f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aac1a977-b439-6f21-ea6e-6d2600155d96">
      <Execution id="03c29a89-8675-4428-be11-bafd3978e034" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5b4c9925-032d-6377-7b2c-c642ae9c4f80">
      <Execution id="56ff88c2-8589-407d-a076-fe22a7565e41" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a15fdb8a-8b2e-0a07-8ba6-dea6dcbdcda2">
      <Execution id="640916b3-1d6d-4ff4-9074-a16ccc481cf8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="63eb18e5-3115-c666-2a29-6ad068d51ab6">
      <Execution id="67da93fe-e343-4d0f-8ea8-64c0b5e33254" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f907696-e62e-7d5e-faa3-a1026cdaa905">
      <Execution id="616e8fba-789a-4983-bff7-7dbe314a64cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: MinusToken, text: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="665aace9-c74f-af3b-205a-dcb76d0d3118">
      <Execution id="ee02dd02-0981-4976-bd45-8fe4d3558c16" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1818161-b7f3-3085-65f9-97f01f397f0f">
      <Execution id="eba7760c-e81e-4fa9-aa0a-864510eb7803" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(1 + 2) * 3&quot;, expectedValue: 9)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1aac750b-370b-3d51-d272-28664835bf62">
      <Execution id="b9973539-bb00-4ac8-b4d9-843da14ba883" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f6e5188-9a3e-6f67-1995-e35a3a406cc1">
      <Execution id="03981b39-ec0f-4e86-af62-6ba58dfbbc55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae4512e0-2d4e-6f21-4b8b-631a1dcad613">
      <Execution id="9d4d84cc-49da-41a5-b0b2-1b1b52cac0c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="305ab289-63c9-dc7a-94ee-e12e94beefc7">
      <Execution id="e37eccf0-3132-45ae-a1e7-b2c301451893" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f56ac008-0206-6f51-ef42-047186e37b79">
      <Execution id="8c541b95-9215-44a0-acb1-f76f657b743a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="82b8b82e-d510-e24f-344a-de88362d2e89">
      <Execution id="99edf53f-ff73-4765-8e5a-f006f0501f54" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b9fc2bad-4475-9233-6854-2f48e605d6ef">
      <Execution id="a1aa058b-44f3-4456-a02d-3d05b86ee943" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="05ad52bc-4a27-d0ba-b4d8-fe12eb695765">
      <Execution id="897ddf77-dfa4-4f2c-b69e-1ada372118ac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True != False&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e719c5b0-b18f-2ed4-ef3b-0d9c7c036d87">
      <Execution id="5bc7cc38-55b1-4268-b49c-1c3cea584e55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0408073a-0179-580f-2fe9-dbe9f3cea242">
      <Execution id="108a75c7-bae9-4182-b6a5-ec3e9f134053" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1114b2aa-c924-b2b8-10d3-bd2923467151">
      <Execution id="f8ff6f00-e426-4a86-8aab-22063569499e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0037e65-395e-2a2a-8b0e-5cd43ae62081">
      <Execution id="6c6fd892-d28e-47a9-a426-5b6574ace989" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27c2506d-be45-145e-ed2e-c72034354d60">
      <Execution id="065a43cc-1113-4dab-adbc-c0a1108d9a70" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ffbe5a70-5aeb-128e-8f54-97e9d02ba9c1">
      <Execution id="4b0c65af-e425-40e1-942f-b3f4628242ee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dc772692-58ad-043e-bc85-d589926b199e">
      <Execution id="9a61f34d-c74e-42bb-b7fb-241428908904" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9f2c7bbb-7367-cbf3-abb7-bf71e63a8dce">
      <Execution id="c082a77a-0a7c-4ddc-b3e5-f063ca688b1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b26828a1-9f3b-9467-0912-2bc4297e7cc8">
      <Execution id="290982e3-41be-4fae-b38f-80658067e2fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="273b8cff-a6b9-02a8-3b91-8dccd58d5a50">
      <Execution id="e76a9a11-0bb1-4017-993a-7f9312023965" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6c3fc3d5-03f6-d947-cb4f-8ab0b4c8df9a">
      <Execution id="54f844e5-bc36-4f02-821c-81372be69cac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1aa98c9e-341a-200b-6e27-5917d08404b1">
      <Execution id="00f46d8b-cbad-4ea1-bdd3-fb168eea444e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="69cb8a45-2bc4-d23d-48dd-74b4f89aea6e">
      <Execution id="3df49285-e6b0-4501-a89b-4c662e06a54c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="79861e8c-c273-df77-174d-9de88f917c9f">
      <Execution id="6c21c92a-50be-42a2-bd7f-1c7d3a3231f2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f0b63aac-d829-5d9e-8fc9-664338d1b279">
      <Execution id="6ab697a4-371b-47ea-a8d1-de9c6fa33ddc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1f0c2afb-36c6-51c8-aa4c-f5b72f00edd5">
      <Execution id="017c1559-4609-48b2-a430-64bf2032e473" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aa127ae4-9d19-2afe-25d6-0cc7f6c47649">
      <Execution id="59cb5e55-8ca5-49d8-ae03-30729c8eb101" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8431fad6-3402-4cce-98fb-9016c711451c">
      <Execution id="f8be3004-bd61-4930-bbf4-9ac9aff19b93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="020deb21-f286-a61f-8c3e-56af19d1953e">
      <Execution id="7ec40a25-8bc8-4bf3-8935-756db8e9b8a5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c666040d-3c70-ae9a-231f-38f8ad37406e">
      <Execution id="ce257f4a-8cbc-4fac-a90b-585ab5b5ad5c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34e241f5-85a0-cc69-909f-6757093ed9f0">
      <Execution id="53056227-0089-423b-87f2-641cfff5e130" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edd904b3-adf0-ea6a-4718-4f379db827ab">
      <Execution id="81ec572d-10f1-4def-8945-3527a31bc349" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="09d55e5b-7f43-161b-9ba7-43ccc2bd98cf">
      <Execution id="0efc2f4e-1ecf-4919-acf7-4e42b29d7c07" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="23653d3a-3f40-7f66-0cb0-f41e810c471b">
      <Execution id="e369607d-3b3e-41f5-8cdd-25b164ef3004" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2d48139d-2efe-d8d4-b1ca-179d24d41fe4">
      <Execution id="d874ab3f-7cec-4022-95dd-70a17f4332ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c4314f11-abf7-1ebe-026d-b131143fb8cf">
      <Execution id="b9d78785-b681-4d98-b12b-449d2c0110b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="99d600d6-24e5-6106-5ef7-c8dc03294f82">
      <Execution id="3b33db7c-6225-4e7c-b3e0-c8c8613e263f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2d2d3033-a848-df08-a8af-68975afd756b">
      <Execution id="365a571b-9e1a-4a07-a385-d9d0c5528c9c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b67a550b-bb2d-c2ca-834a-5311283fb41a">
      <Execution id="2d91f108-e054-4cf1-81f8-b0616c3efaf0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="03c0ff53-8796-075d-a339-22ab7ea4afcf">
      <Execution id="dae27e9b-18b1-491b-98da-ff4f250c0c86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1822004c-e5c1-959f-2ce1-52abfd1cb520">
      <Execution id="29f5743d-a91c-4010-bda0-b01fb0936615" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="32d4b650-86e1-f288-11b0-0421fb77706f">
      <Execution id="20d68182-b150-406d-b092-67c7f4faef3c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="566657be-9a21-ffeb-e2fc-d50069bdb6e2">
      <Execution id="e7f5817a-232a-4cce-96ff-c843a9ebe03b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6c67ff08-f95f-c2c1-c6b2-9a48b898f459">
      <Execution id="39726975-91b9-4829-8fc8-1e6fe9351829" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d76a921-3fcf-29dc-4dd3-c780d5d0b8df">
      <Execution id="38dc5abd-1fa6-4a0c-bea1-d35e11c0bb91" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d2bca085-7c67-7a1a-4bdf-2f4dc33da277">
      <Execution id="a041d8d8-fd75-4815-b6b2-7e664a4c280b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="898a8d52-7827-606c-bd04-304b333c6834">
      <Execution id="fdc76cba-b391-4e16-91ae-4f7e667d2fa0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6333b374-22b7-36b3-0dfd-8e04ada13077">
      <Execution id="ff22dcb4-1372-4028-b3d1-c2a5fe3a21fe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3f3f5f6c-d857-3ae0-9bcf-447f8e4e1486">
      <Execution id="e64d2cd2-1b7b-425a-9033-13ce98713d37" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85064fbc-f963-b912-332f-7413014b4349">
      <Execution id="b8e0e1d3-e642-4ff1-a744-fedbefc23786" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f2462922-1185-3094-4672-836f2a428f42">
      <Execution id="50665f1d-84b3-4440-b01f-e08475f5ee59" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="292c36b2-3355-2fb5-8487-b491324b2f6a">
      <Execution id="0887eee8-7801-4b8e-adf1-0611409e69f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1500a01-baea-8cb1-0fe7-9d30bf6bebf5">
      <Execution id="d68753c0-2cfe-44fa-9918-8bfb5f1422f6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8ebd882c-a2b7-96e0-6cb0-fa894f919aad">
      <Execution id="7dfd6d37-577f-459f-a1d1-69ed66a1c73a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="80bdb5b5-48b1-16db-6ee0-a05c24cb3d79">
      <Execution id="ab7773f7-a46f-4001-93e7-c45a6c3167fe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7873f42-93b9-3e2c-3380-efc4bf3f8250">
      <Execution id="4ec929ba-8f63-4254-8a79-e97aec7b663c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7dc91527-4294-4b1f-f59d-4978e86bfdc1">
      <Execution id="24b142f8-3864-42f0-884f-1b959ee143d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="09961795-4559-55ab-8bd2-54abbba399ac">
      <Execution id="2192f864-2f0e-4a8a-b11a-a66734412831" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ad90694b-35de-007b-a23d-4cc067a59958">
      <Execution id="987bdf6a-4658-41f3-b7d6-6ca6f7b358c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35538943-d80a-bd7c-6e38-f8afe172a1ae">
      <Execution id="3378d846-b2c2-4db8-bf10-f7a63b20b961" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="12220949-71e8-a712-ba67-259b76a39314">
      <Execution id="7a0bd1f6-19ff-45da-999f-1dd2b683c61c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d2420bfa-f8fc-7e3c-e2f6-b97691f3164e">
      <Execution id="7b9d2744-0919-44fb-8988-3c6e4c866106" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8ea2707-02d9-4b6a-eeae-4c63c1b98208">
      <Execution id="2c8477f5-56f0-45f5-9a8f-b1cde91ab604" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5df97783-014c-6ecb-c920-cc279e3b7cea">
      <Execution id="d4aa9c8a-b871-4371-9ca1-d69792135e29" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="998f9400-d2ac-7fb5-a4f3-54b6cc212210">
      <Execution id="eb99ff8b-b046-44e5-ae17-80929c403d6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="354b0482-c0b1-fef9-9174-55b403cd9a02">
      <Execution id="403b1847-8899-42c4-98ad-9ead979b313c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a3687180-e6d8-837f-4ca5-b1145ac982d7">
      <Execution id="fbdfc61f-819b-4cdd-8e50-458b690343c9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4a51cf95-a5b1-06eb-a384-68b9138bde4b">
      <Execution id="dc134e05-87d6-4f65-bce9-d1d28eb3a503" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="90747cfe-56f7-9d8b-de50-2002695c643b">
      <Execution id="9fe9552a-f0b7-4785-8c31-318ec803ed43" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af24482f-1b81-c7e4-62b1-41827cf2c048">
      <Execution id="3deff0ac-6275-4703-8298-09eb1c61729a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ffcb725d-0463-cbeb-e70c-8b29fe642664">
      <Execution id="264dd7d9-b2d3-44f9-9bfd-18ec6a448811" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="394db978-6072-84a4-ec1e-fb776cbf1410">
      <Execution id="46ede7a0-73cf-419d-acbe-a92f1fe8eb8b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7494c470-a3e0-23ff-98c9-2ca5a986358e">
      <Execution id="8fd9ddd8-39a5-4a87-9f33-c4b7b839c450" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9644e009-01aa-4834-cefa-4c76f3d62362">
      <Execution id="fb97d5a2-f7be-435f-9bc1-398c8839af8c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6008cbb1-c96b-2538-4e26-48b07bcfc706">
      <Execution id="4f18dbb9-483f-4da2-81e5-24b344ce1628" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5fefa066-99ec-3b42-f36a-2a1132d2e42e">
      <Execution id="e53bc0e9-5aa9-4ff7-ac43-579c73209d4f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="45b25a6b-9748-424c-d52f-7b90920b7dce">
      <Execution id="d7aa045c-7201-4b55-8d72-6f0a82e80fa1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="977f00cf-b737-ba6a-64a9-c7458a124c3f">
      <Execution id="8e83e492-75e0-4636-8d4b-dd265edb400b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d69c70fb-25a3-1919-4195-e4575f2e97cb">
      <Execution id="0f25a093-9920-4a47-85d8-2e4a3c92f25f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e48b5b61-6f81-3d93-e52f-36c739af3f73">
      <Execution id="eb5ac064-1a25-4893-812f-23ed29b92c79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5039a68b-c6be-d319-6ca6-ad5b83059696">
      <Execution id="352d96af-651f-47e5-b43b-25b5b27e55de" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f1f6d016-597b-a42c-0739-c0a32d743783">
      <Execution id="c68ad833-928e-4502-b100-f2d5bfffb82b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b0feccda-2425-3568-d557-c9e790e35e6b">
      <Execution id="e9699ec2-f66d-4b88-b7d9-352015bb7478" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="55c81bee-3be9-9d88-671b-354fa510d63b">
      <Execution id="aa0d3293-134c-4727-851b-1ca790e11f24" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6e55291f-b54a-15bb-9d0e-2b78c679e2a1">
      <Execution id="ce902f76-7552-4e53-a4e1-6ea2e6386b15" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f76b4a7a-89d2-afc5-1032-a199a8eb90bf">
      <Execution id="6740c5fb-f62e-4ebb-9858-83904f87cbc6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9a66a788-ed3f-20ef-5577-5eaa2059f650">
      <Execution id="7e29c723-d068-4f6e-b1e9-b68fdaabc6c2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2fc95601-174b-591e-9230-a83d7d1f322a">
      <Execution id="b873d2fb-e022-4440-8a26-f5e80c7e55f5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9eced631-6690-4f0d-b334-ac2e1ad045e7">
      <Execution id="ca41df01-a2af-4a42-83c8-09bf25e6676e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="27c0f553-3b87-e6a0-82a6-70b41ee00a13">
      <Execution id="8e9be030-121a-4182-8042-335abcfa70f4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bdb47406-5a57-45a6-7efc-8a99c65ae766">
      <Execution id="6aeab25c-20ff-47be-99f7-15a96770bd35" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cf4c819a-1d7e-1e71-6825-1b9a814173c0">
      <Execution id="cb3bfa77-111f-4718-b370-a5297bb5dce3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae443448-ec19-1d1e-fc1f-8824a6207db7">
      <Execution id="50c77140-57a6-444d-8aac-9233e325739a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7b87667b-8c5f-026e-b74b-6bf3ca35c414">
      <Execution id="eb7e44a7-9cb1-4225-b604-a6cfb8f7a14c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: OpenParenthesisToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2f730cf-dfc8-9b7c-14b9-74530f15c391">
      <Execution id="9a68ed8c-db42-42d1-84d7-f93fbd50bd72" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d61c7ec3-391a-850c-ad64-b8106de1db4a">
      <Execution id="63ee9e32-14eb-43dd-a8f2-d678050b5915" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd31cbbb-5445-df5a-3096-6086391f6519">
      <Execution id="91a02d6b-70d0-409a-b980-1d955e2c3a25" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="06df0aaf-e5d9-dcc8-d834-c043f9348e4b">
      <Execution id="0cca2bba-0b85-4a70-bfe9-5566204b348e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f5d9ceb9-d44c-f81b-3648-57132569fa6b">
      <Execution id="230facec-3b41-4498-9ee6-29aeedd35911" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75edd253-fff7-4d50-2625-9591fbb5f98c">
      <Execution id="003e0496-a755-452c-8f86-7ffad0e4d6d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4b714dc-1764-a355-8d55-f74348bff8a2">
      <Execution id="1040588d-734d-4939-b743-66134a1ed0a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="553f2e4a-cc91-cce4-0d74-6705cd96bbf9">
      <Execution id="e31acad8-8e34-4922-ae3a-c0f02afcf7d4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="db9b66c8-5d08-2351-fe38-435aad3dd716">
      <Execution id="0adfe2d8-05db-43f5-a824-531b657c7fe0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8e9e1f35-2378-79ac-f0bd-b697137e3241">
      <Execution id="26d53659-2996-406e-b37e-64a7132ec705" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d7340824-4a76-2eb4-a932-16bf262381c9">
      <Execution id="9150fe21-8fdf-4959-a05d-ff09b49b00d5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01d1f829-c199-bb4b-f31a-178340baf2a9">
      <Execution id="d8655585-5f8f-44db-8a70-e15ea0ba0ae4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2c0e477a-e084-ffee-e366-443f3330dc5c">
      <Execution id="08fefb1a-501c-4be9-be21-2bfa6f77a4b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e2f50f5-727f-42ae-2274-7a9a8d3b4a4e">
      <Execution id="ca43961b-b0b3-4917-9f5f-2290db68f89b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="591508d6-83aa-305d-79fd-6edf55999706">
      <Execution id="6d4200f0-5ae8-43e5-adb0-4b28e936d7e3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="752fd025-80f5-0dc2-bb9e-fd26e1e2b85d">
      <Execution id="86c854ce-cd8f-4a11-b5fc-0c320ddb408a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ba61a29-dccc-ccbb-fc56-8a209e264e47">
      <Execution id="3f766ada-5e60-4edf-91b0-41e39abb9b64" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="08264f66-e072-76a5-e30f-fd7fb3d52543">
      <Execution id="fbca4c3c-c853-4239-84e2-8d8d0c48ac00" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="39abb43b-7f9f-b04e-d127-799b4d9f2be1">
      <Execution id="b477f375-9618-4315-af92-7061bf5d972e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8688c188-61ce-2426-a2f9-1579fb2997bd">
      <Execution id="497b25bf-8ed0-4dee-8912-df7c98ca3710" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85ce88b4-c68a-f38e-eaa9-e9ff0edc49dd">
      <Execution id="85355ef2-6fc5-4bef-b93f-5ae3f396d163" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="de1ba7af-c501-e3b1-1a99-04d4905d97fe">
      <Execution id="f2621edc-12fe-463d-8318-558f1418c148" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: AndKeyword, text: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="85adb41a-0f43-ced9-5218-5fc86386ea5f">
      <Execution id="3c9851a1-f9c5-48ce-ad3d-cfd0107059fb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3097b537-eff8-5242-b364-c45faafb1314">
      <Execution id="eede9116-ca17-40cd-b6ef-e43519c8d78d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ccd18b98-1132-1a8a-622a-288abe0aa11a">
      <Execution id="aa4dff79-939c-4495-8cee-48f9a5fb3ba3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1982e5ca-0562-e040-c47d-b570831b3ee1">
      <Execution id="bf84b4d8-480b-49f5-842a-5af1f1d7c175" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="db141841-9d70-4914-320a-a2787dcc9e72">
      <Execution id="4d112282-ac64-4cdb-aa26-f269077157fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a109bb21-22d3-9c2b-c9e9-acfdb20e43b9">
      <Execution id="f21411da-8c28-4efe-9013-365989abd534" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a3895574-3df4-7edc-1d73-355359de381f">
      <Execution id="4e94ded5-eef0-4ae2-ae01-508263e3b8ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac430569-7b30-affd-0f1e-04ed1017b891">
      <Execution id="ea188d99-a7a2-4996-b32b-b4cfd57e5d62" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6ec8f8db-8e3f-a8db-e522-5ed2c96f596b">
      <Execution id="16b14a98-7715-4fc9-96e3-2978a32939bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8798851a-fc16-bf8b-14b4-6aae81f50222">
      <Execution id="80d16ffc-51c4-420a-a14b-34d6feb21393" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6ce8da62-b5f8-672d-599f-ea5f575ba062">
      <Execution id="15dcc1b4-e186-4247-83e1-787f308fc1ba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e9809c4f-04e1-b87f-678b-e1a8d8674c22">
      <Execution id="cdd9ba24-af44-4e5c-8d89-da0de5c9e789" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dff5b088-61b4-472d-cca7-6329cd40a0f2">
      <Execution id="126d2a0c-73d8-4c06-98ca-d5f64baa9f52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="78c11c6c-25ad-d110-699e-2a19e2fb2ef3">
      <Execution id="67122c72-d760-446d-b27a-83a4dff8a2e6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1fbd687-cc65-5ab2-40f6-83a626f88c8b">
      <Execution id="649710fe-acc9-4f6f-bf65-3b5b1a200f61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2280c6c6-e7e6-1e0a-6a6f-b8a9bab06fca">
      <Execution id="969613e5-c1d5-4d90-82d5-81be39b315b6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4516515e-40ff-e57e-862d-83f2d090dcb4">
      <Execution id="8073358b-f5a8-48f3-a6bd-22b7ebfa5dd5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="41347753-742e-949a-a019-3d7559f5a685">
      <Execution id="7140116f-eedb-4264-9344-ea5cca765c5f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53061ab1-3e87-afb0-c279-52a7068c96cd">
      <Execution id="3c96bdb1-4a86-4434-915c-fd6c0874ddd1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0e5b6e0b-814b-2994-5090-0cdcb803d32c">
      <Execution id="477c77cf-ba7d-44ed-ab5d-2e8c8dd7fba4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fe24ef45-09fc-753a-529a-135dae94ef06">
      <Execution id="66dbf4ac-5dcf-46e4-a9ee-ee90832956a9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="454f6007-76d6-a992-17fd-468ebfc1c663">
      <Execution id="2b61f166-8c58-4523-b8b9-a8dbe6473a09" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9919c738-d4df-0f33-e473-29c8a9de4a9e">
      <Execution id="a586743b-78a8-49ec-8880-2b3401e8bed5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28828dbc-e777-b02c-1ce4-a1c03ee84582">
      <Execution id="0fb34a67-8ebc-48ea-899a-1ff16a22cc74" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="61b290f5-c7a7-0cd5-be1a-4d226956de5b">
      <Execution id="6d1bb29e-1562-4485-89c4-d73f9d4cedbe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd9e7a7c-60b2-e811-9b4d-553ee54a5f4a">
      <Execution id="16365fc7-776b-4937-88f3-468f6d9289df" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9041a8ef-47b3-3922-ea9a-ee8b21be9e93">
      <Execution id="ada05501-a563-4176-b8af-0156139ff178" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b08698ed-7242-73f4-83c4-338a805baa66">
      <Execution id="3602aba6-1835-4ff6-abd4-e4fbfec45ab2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4ea12431-4c9a-8271-a06b-a5171a90f75c">
      <Execution id="5e1c47cd-aa46-4687-9497-917a8e7bf368" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="164210d5-b48c-451a-25cf-7d0a25ecd5d8">
      <Execution id="f9e612d5-67f0-4794-a97a-4115741bcd8b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5fb3d89d-9906-d3d9-fdbf-926779b9d610">
      <Execution id="caf48613-eebe-4a3a-b370-291384fae96d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;1 + 2 * 3&quot;, expectedValue: 7)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dc5267ea-c6dd-7107-7014-36fe7c569060">
      <Execution id="c5248d70-35c3-4f04-9f67-0a9a0b155175" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2dc00c52-2be3-57f9-b44e-ca51ffe61a97">
      <Execution id="b46b73b3-e289-43a5-9ed2-7499e56d30f2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="08437775-c8ec-b30c-cbcf-8fabbacbc360">
      <Execution id="5a925f26-e8b0-406d-aec6-9bf701196eb3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cc3a911-96e9-3990-fbd2-58931e2ca5f7">
      <Execution id="276c67e1-87c0-45a4-b2be-739f37ceb7e9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="895bfc18-7a3a-999c-f718-97b48a26d087">
      <Execution id="be78d746-b55a-436e-8958-a7c991c0f5a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f888c12b-57ae-15fd-6fbb-5eb8cae0e6db">
      <Execution id="539b7c6f-fd2e-4d53-a9da-58b8c036504e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="caacbb24-c998-5982-b46d-618556934016">
      <Execution id="b8f8f5f2-0acf-41e0-af1f-846ab28dbc0c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b508b1a0-9474-1cec-cbb0-45b6446607ef">
      <Execution id="8e2e84a0-294e-4a31-a3f8-879c33775ad9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d11b35ee-f503-18d7-3c2b-0be57da3e1d9">
      <Execution id="f0799e59-98c0-4142-bc76-40f4537175ab" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36d08b1c-bb0a-1be2-2941-c1ebfcd1a026">
      <Execution id="53fbf22b-1353-4cf5-93c8-b7e8de35d433" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f19d4eb4-b1af-9ed7-7d01-d277bf111395">
      <Execution id="3edbd6cf-13cb-4bff-ad43-b669b66375ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fddd01ad-3b92-2894-53b8-c40ebef85e6c">
      <Execution id="f72c8e98-7117-45de-839d-bb7a0d2abf69" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dc8159fa-efaf-bbaf-76ba-587cba99aebc">
      <Execution id="e9202330-f11a-493a-997b-beacb5e7bb96" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="704bb9b2-e8cc-0539-bc1a-31e8b6f137bd">
      <Execution id="03cbbd12-9210-4f71-88c0-b59bd83f9e76" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9817940b-51ef-a6e3-e88d-66e1a32cdf86">
      <Execution id="0f32e7d6-1c9c-4c74-9370-18747ccaee78" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="baa099a7-ddde-6ab6-3697-bea6e047176e">
      <Execution id="17bd7f2f-4358-4143-9f76-bf59e5dc7622" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="012acce3-be70-9c52-0079-282537368c45">
      <Execution id="a71ba074-11e3-4173-acd9-fe199444f176" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2a2d33c4-7a7d-9adb-116b-080b10fa253e">
      <Execution id="ba313daa-be06-4b13-bef7-771bc7c895cd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="275dd1d5-1dd3-fe33-a1f9-dc3786b661f4">
      <Execution id="0047cd94-587d-46fe-b3e7-f4490d669923" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4eb5bdaf-4e2b-55dc-3592-444673729556">
      <Execution id="7da12e06-57c2-4f40-9c5d-0a881929c767" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1edcf536-5c18-7c69-57e6-6e6902a99a6d">
      <Execution id="c4c01560-c45f-41ee-91d9-abfbea3a360b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9459469a-c5ba-5862-a4df-cd7979acabd1">
      <Execution id="54831116-05bc-4577-8a80-7ada1a25f91b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9ea05522-f318-217b-a7b6-8a7480b836a8">
      <Execution id="835c9157-e02b-4f51-8835-aef4ccea3027" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="905374de-5ee6-b8e8-cf19-58986d68be62">
      <Execution id="e22cc8fc-3a48-418f-b2ab-8deec7032457" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53c43bc3-9298-d204-5229-257d6bc0798d">
      <Execution id="97f4bc0e-8be7-429f-bc75-549c5afb2167" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0514bb16-2428-f4e3-9eb8-723bd792e3b0">
      <Execution id="620708b1-f5b7-4fbe-b671-3765f934f8fc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="86b6fec7-d8f1-e243-d86f-a32c4401d439">
      <Execution id="0a2c921e-b757-40bb-bdb7-9a8f0234b1b4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="48404b21-efa4-8869-cfad-85feef889555">
      <Execution id="a0e3d6ec-5515-48df-a867-51377b5f9725" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b530098-4933-04ea-97b6-97a820cd10bb">
      <Execution id="1f5f3e90-6628-4344-a6f7-b1f48e3075d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="97188b89-2695-38fc-a66e-b65dd3d51aa5">
      <Execution id="9034269c-5abd-4375-9d17-65ce9a90dec5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="91598381-0aa2-05fd-d092-d01eefedc8f3">
      <Execution id="e14b809d-a518-4f43-87bf-39edf71dc8ef" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0f8b329-5796-ea53-a626-ae1acecaa874">
      <Execution id="4f41ff5b-f4c8-4964-ba89-8fe27dece696" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dab5afe7-0f29-805a-bde9-8a531234a53d">
      <Execution id="5b2127a0-39a0-4a21-82e5-a63b45b61262" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8d522191-ab7a-bb2d-7a3f-2fe13f45b1e0">
      <Execution id="af5d6300-d566-404f-974c-2e4a380f320e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="214e9979-0e11-c33f-f5dc-07e6dd3bfea8">
      <Execution id="67b34076-24dd-415c-bff9-a241de24229d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c919bbd-7ddc-e420-7b5c-9c1d43e66900">
      <Execution id="e380f60d-6fce-48bc-8dcb-d854c2d092aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="546dbf2f-4c34-e290-f3e8-0d13bb1c1203">
      <Execution id="6c7cbd48-e57b-4d3c-8aaf-c9bb515fe53e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c976687f-2997-76e6-8bfe-ecba1890fc88">
      <Execution id="ebc2c2e7-e4f3-4682-9369-1012ded5b2b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47107f4f-71ba-1b0b-c429-d93a17b98798">
      <Execution id="b027951e-deb7-4642-9b2c-fc2470c64a87" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cd07e200-61fa-0d64-2512-92e9985b3612">
      <Execution id="a2725cc2-140b-4cd8-8cff-d1b570bd369c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="72f8ebfe-0f3a-6579-1794-af70a0da7d4c">
      <Execution id="7cfebcb4-8dba-4314-af9b-4dc5cf03148c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8dff03e5-2f6c-5e9c-72a5-e3730dcefe57">
      <Execution id="26a01cb9-9859-41ce-afec-6e2fa7f1a305" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fc304ebf-6e0c-d128-64bb-d7d12ee8e65c">
      <Execution id="7a038ba1-4cb9-4497-bb48-1e4716797d18" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f9819cdf-834c-8d40-3de4-e0d647ebc1cd">
      <Execution id="f0674439-f926-4edf-9b30-0647ef35f4b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d34647df-ac9d-8b4b-dae2-5908931e93ef">
      <Execution id="07e62c1f-a00d-49fa-997c-d37e0328c7ca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67971d7f-8966-085a-7fcf-4c4b94c23809">
      <Execution id="01f88704-d26c-426e-8734-846cea9fc3a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1150ee68-35a9-06a9-5dd1-55810ab9c938">
      <Execution id="43669982-bfcb-4b79-9530-b274985ec9a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e0a9498-7f25-51c6-b87d-0cf3094798f5">
      <Execution id="abd7616e-121b-44e3-bdc0-f1ff47dbc506" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edd6fcf5-7034-f862-8f6f-052f101a8282">
      <Execution id="9232e097-f4ba-48ee-a6c0-b4dcae9d3d93" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9c15194e-2fc3-9185-ec78-0ace59e1b31c">
      <Execution id="f8984489-244c-40b6-b275-3e64adec702b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13d8651c-47b2-cc66-8112-0d5ce8366308">
      <Execution id="29c3ea1e-e281-498e-8482-71b751d856ce" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6ec7cb64-cb36-cd48-7010-19b4158a1c1f">
      <Execution id="7085ecb6-3429-4332-ab3d-a2b43a90adf2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="69d334cd-e5e5-bd6d-eee8-627c2cade6fd">
      <Execution id="87360d76-c783-46c6-a71d-3a80a025d4d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5f62cbaa-1030-d810-0d21-dccde0155dd0">
      <Execution id="15c56f24-2fad-448d-ba32-1b514fa248bc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75c2e1a2-8def-69bd-46cc-9978c5631ae3">
      <Execution id="9e27daa0-84dc-474a-a78c-533d103a0497" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1272676c-ac90-6e3c-6f29-c30dd512a079">
      <Execution id="23b67532-58ce-4d70-8c84-da5c845b1a2b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cea2b52f-1881-7260-794c-706088d868c5">
      <Execution id="c979234c-07ce-48c7-ad9c-ec9c0214a53f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49ca3500-bd8a-a55f-81c7-7a5dc1b06c17">
      <Execution id="a1ab29ae-31f8-4645-b265-92d6ee0a4685" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9772630a-6883-a071-3cee-f0109d62b43a">
      <Execution id="9070e079-b5e3-42b5-9275-38ac4610b585" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1b1dab3-c067-dc44-d015-1e9946c97a82">
      <Execution id="b35e22e0-654a-4c72-b6ed-e31b9ac18fea" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53683f5b-88cd-fed5-e45a-12a6a65115ab">
      <Execution id="92f436b6-a3cd-4571-81a1-b7f18f95a7fb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d5a3f5df-915f-7e07-ec15-fdb83fb6bb01">
      <Execution id="b9d9b002-9f5d-4166-b7d7-c46206b70c65" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="23d4be0b-8758-9fa2-973d-43bd9c9b81f1">
      <Execution id="fdb99b96-018e-4547-b46e-76c44e1ecbb0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="674f4a36-5948-4240-1bff-e53cf94e4cb8">
      <Execution id="8ed9085d-8e04-4b3e-97e7-fa552ce3e966" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="25c86072-8c08-290d-06a0-37377681c084">
      <Execution id="b0c1e667-f916-4c02-b1c4-9a1dcb7544d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd8bb4f7-b50e-0a8d-9152-fc0dbcdaa1fe">
      <Execution id="fde1ec34-7d30-4231-a1b8-8fdebd561043" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="23deb1fc-2e8e-b1fc-c13a-ce2d7255f9b0">
      <Execution id="5d6b4c00-4723-4a63-ac6e-5a91bec3c6c6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;a = (x = 12)&quot;, expectedValue: 12)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="31dd3e22-2f4e-1a7c-734b-be4e15f090f3">
      <Execution id="bb799368-655f-445e-b53f-6c56fb2f7dca" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ea3438f-056a-3872-16f6-e23ae4279cce">
      <Execution id="f356bddd-697e-4409-a1d8-1c8c7ec25a22" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="84ef0cbc-5ccd-bdcf-51be-bf8e0949419b">
      <Execution id="1c3388f5-1e50-4fa0-8fea-50c82d0d7647" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13c6c706-3c8d-63ae-fadb-12d20f5c0ab7">
      <Execution id="c6af82b4-4766-42a7-a82b-edf75629a353" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e476daa-9dba-97c8-29fd-5beadc78b489">
      <Execution id="b5094e1b-6aec-46af-9f2c-bf930277a819" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6cba16b8-941c-3619-9a6b-e1a0280bc62a">
      <Execution id="b5c24bcf-9252-441c-ba37-a6d5080c638d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8fc5f65-eba1-51a4-ba64-797ccccac2d8">
      <Execution id="6e154718-716a-43e7-976b-1280c6ffcc8b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0571478f-a537-74a2-bd2d-b7358040f25e">
      <Execution id="a2d88459-a46b-463d-8947-018488e1dd08" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="178fbd62-52fd-54ab-2c05-b44f8fe31448">
      <Execution id="5e0e58c9-a3bc-4fe2-812f-29269f64495a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7cf34c74-5e0e-37be-48ed-05e001616231">
      <Execution id="4bab75ad-b413-40e5-8af7-211647dfa109" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="06f6a57a-9244-7cf8-9188-784e694af20f">
      <Execution id="d250a6cf-1338-4cf6-b74d-d63f776b400f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="13f9a5d8-2bb2-113c-cc4f-1c7d076ba956">
      <Execution id="526075fd-64e2-437e-a3cd-2b7850cb3bb2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f0efbc1e-13e1-e677-e6fe-e66f2490824c">
      <Execution id="df27ec9b-afd4-4c5b-bd80-1fd2230e2df7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d59c78ac-b503-9855-e35f-d56aaeac37b4">
      <Execution id="0faaabc3-9fc0-4103-a426-e5a54f8da60c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cbb70de1-4508-b3f7-38f0-28da49772502">
      <Execution id="5d234424-a35f-4f54-ac03-0a04aca8ad36" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: EqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7790d118-6bb8-107c-aaaa-8b02de5e0897">
      <Execution id="d9e98b9d-8509-4c7c-80e4-5135705b52d0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: StarToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c5601ea6-b7e4-fcb1-ba95-8505570050d7">
      <Execution id="89fa3d3d-9762-4b5e-a5d5-4512bc1d06cb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="00f4036c-2907-7953-0328-b3296a3034f9">
      <Execution id="ef790f44-50cd-4436-9e0b-aefd73f59eec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: BadToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f23448ad-2c2f-03e0-8d55-724d70412633">
      <Execution id="c5e4b76d-7402-49b5-b081-840b69705bce" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4ea26ca-f5d1-e377-073b-395a97ee7db1">
      <Execution id="4dce40d2-1793-4878-812d-8e1cba3aa84d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8fae7a39-2e70-aa95-e9fb-88bf16ba3e4a">
      <Execution id="1e85e695-63b4-423c-8163-ecec2c488495" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f0a8736b-c661-2693-d4b3-56a6c89fc54e">
      <Execution id="cd07e86f-b7e9-4a2f-adc5-c057c34d8a8c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c554ba80-6e9b-4756-ee7b-f875dbcef4e4">
      <Execution id="618dd392-0477-499d-b7c5-088c1da90c76" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c70338a9-860f-330e-e043-ebac8eb09ef5">
      <Execution id="09fc4bc5-e015-4c8b-a828-4ae34b6a3807" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47f63a76-b560-c5a5-a496-1639cc309ae8">
      <Execution id="1a03537f-5afb-425d-8430-72aec8c6f1d0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9b8eef15-b53f-3a32-b6b0-2ab15c6af564">
      <Execution id="4d740c28-9b7e-4127-a2ee-8cb9615ad1cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ce4e9a28-0816-669b-223e-bdb8fba8925d">
      <Execution id="93c1cf93-7f1c-410f-b43c-89f8428a38aa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47cee45b-2205-9030-50bc-e2b972f36765">
      <Execution id="bbcab57e-913e-4f94-bfee-f9aa72e25d2d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3c24272b-36e1-6eef-4428-7de31da8c6bf">
      <Execution id="c855781c-816c-40db-9fa6-b8c58b906a02" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="54144699-a9d3-b2bf-967b-acebf5d92b05">
      <Execution id="d570bc52-576f-4cae-a1f3-a3653e6c9c2b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="553c73cb-20b2-dfd0-e3e6-fdbd2e4b1ee4">
      <Execution id="f453963f-aa70-4853-a289-19dd37914b1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ce28c4ac-90ca-fd17-d63a-a7dd7bf1405e">
      <Execution id="10ef1ed1-36e5-485e-b989-6e2dc0d3de46" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9d9b031a-42eb-1694-07a2-29494e14750d">
      <Execution id="c7df7113-4dcf-4fdc-992e-02801aeee9cf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cfe36250-fc5b-e0bb-2e30-635019cb1bff">
      <Execution id="5565b0f5-21bd-4f3a-96a4-12b0da504bf7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="59be6f1c-5330-253d-47ff-cefb2866c6cf">
      <Execution id="f322175a-11cc-4a1c-8f5b-ce42816de348" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f0f7565f-0b1d-362f-8182-5543a95ee675">
      <Execution id="e1195ce1-683c-4989-a190-c79e505610a6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7f2a78b-93d1-c6a1-3938-79fb42a22a80">
      <Execution id="10f1d8aa-c325-4a58-b209-3aa299c9eb95" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2db76a9-7eed-8b38-833c-486aef3f0bf7">
      <Execution id="c5051df0-6b3b-47e2-aa05-16f8958946bb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0a9231b8-c735-6643-d8d8-8b067365fd1e">
      <Execution id="58daa03a-ccc9-4425-aabb-140d33ea7cba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="550c20af-0497-f645-c85e-64fe0d1f8c0f">
      <Execution id="998fbe23-5495-47cc-8d44-5320a01bbdc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2050e47-0b1b-92f2-ff4f-f8d0e320795e">
      <Execution id="1a624055-6a6c-4d84-b598-fc750e9bba58" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="24d1f141-7886-cdf2-2ec4-62cf846b5a92">
      <Execution id="205ecacb-f070-4334-95bf-82b488b03fe4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7f0ce942-65a2-8ad4-2715-a7d5c81026ab">
      <Execution id="5de4c7fd-cc3a-4ef5-baa2-13b3b3b232ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58b21109-3f37-b86d-cfab-fa4ed648fffc">
      <Execution id="19e41737-175b-401f-8912-1992dc478482" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="627327bf-75f2-71e2-ec61-0b0751191811">
      <Execution id="ab320255-4102-4328-a323-27efe44e0edb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="144b311e-9fd4-86d9-8480-fe2713e17baa">
      <Execution id="96093f4b-e9bb-4b66-9754-6e1d4171641e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="164dd723-c912-08ca-effb-aa29b50daef1">
      <Execution id="55cbd604-6763-4075-adf1-671c14bc845a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: BinaryExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8727ed87-1c84-93ff-cdf1-6c012d3ba718">
      <Execution id="dca7cb0e-e6cc-4bcf-b205-ff66e8e984b9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="073babc4-9763-cc0c-7466-a5710e36d6db">
      <Execution id="98a95a6a-5bcf-4df2-bb0d-99ead4d47d78" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="18effbe6-662d-7a50-8c7a-2b49148e34bb">
      <Execution id="c0f7f1c8-d30b-4378-bc46-6b02aa8b49a6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1073c8b-dc47-9489-63c6-4d389107b031">
      <Execution id="1f2fc169-51c6-4825-bf63-987a68fa94d9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="24b61435-bce1-7991-7d37-b00bc47339d4">
      <Execution id="eca81b96-8e9c-4b6b-a91b-6b42b42fa2bc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4ff99611-0353-5a01-8b98-38f88cbd50e3">
      <Execution id="4510bdfd-75b7-4daf-9c53-df690ef4824f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="80335936-ceb3-2cff-faba-1752411fe5a2">
      <Execution id="75832943-79ad-4a79-a4af-388a2bb95b30" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ca73f45c-2676-b873-1d67-02d75f9f9f9f">
      <Execution id="8ce03861-dd19-4f96-8c4a-6c70bb7cb584" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b62effc0-dd9e-8915-b05a-9f77f0fec9af">
      <Execution id="f6eb0d40-395a-498b-b38f-0c7bc74a2733" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True is False&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="153972a2-e76f-e124-12e1-307fd06427ad">
      <Execution id="88fc6c9d-e29b-4672-879b-fce9005767ab" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e601f3c3-acb2-4248-fa55-e9d847a7ac92">
      <Execution id="20e1798f-a891-4bc8-8d88-62f16e2d22b1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="61211be4-f5c9-7f09-5865-5de9d00952a7">
      <Execution id="6df392ef-73cf-4aa4-887c-afe30e038484" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8d2c133e-ded4-e6f5-9fd3-b6af6fa39538">
      <Execution id="afcb84ed-dbff-4ccf-8874-8ec9486e76c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c7f5925d-bc31-e1b2-cfab-17f249612df4">
      <Execution id="651a5dd4-700c-47b9-8ac6-b3e181499a50" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_Token(kind: PlusToken, text: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="91dec442-1e98-f1c4-bfdb-35f69b70f9bb">
      <Execution id="12cdaa96-e201-4b44-8c8b-8a4338b86a2f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_Token" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d3558819-576c-8c39-7e22-ae9fcdd69aec">
      <Execution id="6dfbe033-2228-49d7-8c56-4ed288bc7ad1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e812edc5-2934-cc45-255d-9846116b0121">
      <Execution id="34026177-bcac-4138-bbed-9ef6b844f9d8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="754fbe09-094d-38d9-5abf-92e2d7a8c418">
      <Execution id="a8ab4d42-95fd-444c-b044-c5ca1188e02e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b898a2e0-96be-7f91-4113-4ef4f93f2e11">
      <Execution id="5fc5de3f-5c13-49ae-abd8-08fd334f98cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7a17427d-9a51-29fd-701d-30bdfba7f030">
      <Execution id="1c62c116-c7ed-4daf-8c5d-a53430a48f15" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="169bf705-1531-8bca-9199-1d46e1ec91be">
      <Execution id="738fac98-59ac-41ca-b321-44772b2833e3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="11a0aa3e-dfbe-2d6d-3c87-42de2ce233a7">
      <Execution id="5b266e03-826c-4aa2-b407-6d94a0b25c5b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eff25ff0-56fc-4ee1-87f1-135137e8adb2">
      <Execution id="021f4a0d-8cb9-438c-be7b-f1ef203c189d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07fdeb2a-f512-5f85-7505-901c93821cbf">
      <Execution id="1c34da40-bd28-41c0-b750-55ecb76cd507" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="92ee789f-d7fe-2328-8fe1-9a2017a63a10">
      <Execution id="37664507-e4bf-4954-9c3c-fb6904f829b4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: OrKeyword, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c1d9f8e9-41ed-543f-9740-495641f3531d">
      <Execution id="4af94246-87c7-4cf5-b3f2-6a01ab4cb379" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71fb6d07-8805-2958-15a0-1820a3c546b2">
      <Execution id="f70715ec-4243-4d5c-913c-a025c281e24a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0de504e2-c1bb-b2d3-40b8-05f755f08415">
      <Execution id="a5556e6e-e88f-4da2-a2b3-7a976857b23a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36698baa-a51d-af03-02d4-cac0f86e8420">
      <Execution id="7147d272-6162-4d6b-89ac-76fb73e00c0e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e734908-cc69-897a-6187-6cd749f259ae">
      <Execution id="d04b93b0-168d-4bc3-8f13-05cafd13ec79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a38aad17-04e4-0fd3-a043-f2cb546da0cb">
      <Execution id="6b651c97-dc64-4194-b4c5-7fb589a7c38b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e056c5b-06aa-d4d7-d2fc-0f30995e22de">
      <Execution id="44a6bce9-a01a-41d1-ab93-225db86e059e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6379521b-db8d-bb6a-d193-4a67f679741c">
      <Execution id="7fa64feb-1439-4915-aed4-a08d089c6017" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="57192594-1201-4522-b027-3056f5db3eb4">
      <Execution id="a6b9dade-7033-41c4-bb5e-20e83eafe01d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e4c7c0c4-bd41-5d78-6489-31ba242e6c5c">
      <Execution id="33a97b13-d1a9-4345-998e-e6ca7e05a5cf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="12b40b79-c0f4-6f93-9fb1-20d5a6270ccf">
      <Execution id="e34b187e-9547-4a8f-b3e8-d1e99f7b7669" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e059a0a-a014-9956-e5a3-ce82d093ec3e">
      <Execution id="751a3081-644d-4690-a0c9-84c06a263d2d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3bd2e43f-cec8-c83e-607e-373e5e226f0e">
      <Execution id="28c75b61-fc92-4bf5-a39e-331d3fbec77c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cd2abbba-32f9-ce04-569e-7a401e651b01">
      <Execution id="09c5b42b-05a4-4660-b128-809e6c10d4d4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28cfd509-62d4-8953-9f7e-2199d0979cfe">
      <Execution id="53036180-9f32-4b3f-b33b-77123164e159" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd1f5237-f9cb-c893-b47e-ce791a7532ec">
      <Execution id="9121afaf-2a82-4e3d-9f99-f1488a928ae8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7e636c7a-6e90-954d-02f9-a4c845d8b00a">
      <Execution id="df5b8c62-33b1-4180-bcb7-86d29c765479" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="284d5173-f3a6-7e92-e7db-585a93a8fc95">
      <Execution id="793c01a3-2873-4188-bf2f-ea2f9cea605a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="66779f0b-541c-007c-a724-97b97741f566">
      <Execution id="711b4c10-6719-4661-990d-aeb69562725f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;x = 10&quot;, expectedValue: 10)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="535573fd-35f9-2ddb-076c-1b89437a63c0">
      <Execution id="b6c0c6c2-6474-4857-a1ec-c8db5e5b5116" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b8fcae20-fa53-2a74-662a-8f6aec8a4e12">
      <Execution id="55a15823-f33a-4b19-825f-4e9086a62077" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f937a965-a506-0fd0-6005-a18c2e13083a">
      <Execution id="66355291-880e-4af6-865a-156af02323bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="43bb04f0-57ad-d421-11ca-dab72d694243">
      <Execution id="6b586731-8472-44a0-97de-1cff8095766c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8f4697b-44f7-ec79-2ce0-69ad63c37cf3">
      <Execution id="64c640f3-add6-4a23-af70-339842c18ebf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a2a9db68-2628-daf3-1d5b-49839ec4a983">
      <Execution id="6ef51413-d2fb-4308-b59b-b39da09d6b52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49cad0b8-2faf-dce0-0b8d-58fe8d0d5df5">
      <Execution id="fa7e2cdf-8efa-4cb6-a821-e7e0894489eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2225e452-b7e5-4c55-c00d-4b6a9043e20b">
      <Execution id="1f14efb4-2101-4830-be6a-4e60aa7380ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="89dd3379-cf8c-49e0-6b28-139ddad8f9c2">
      <Execution id="610b091b-a917-407d-9a3d-b52ee18b6864" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="848fd43c-2b30-afdf-3b69-9874a4a0a45e">
      <Execution id="be285329-6209-4109-ba60-51fcd94a72fb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="815588a3-1276-cd58-3f2f-b608f1b78a2a">
      <Execution id="7b7da761-1ee6-4bdd-b6ed-4a352e769bba" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="101906b0-6af5-135e-61e4-0c0935fe0265">
      <Execution id="24b367e4-4f77-43b4-abb3-435e9907d030" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1567d10-e963-2ceb-4f22-9d2373bc7599">
      <Execution id="ce576137-6310-4265-9bf2-96a04aadde95" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fad32ae5-c881-6601-cc30-397bdd2f1f1a">
      <Execution id="d1aabc39-161a-4358-9c98-41d68353e384" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b9a4c94d-c360-210d-577e-1b0fc4e0b9b2">
      <Execution id="3b081c2d-5472-45e5-a2e3-8772821ca799" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4b369127-e8e7-defe-a8af-ee1ba7a6deda">
      <Execution id="3c036593-c576-481f-b75e-677469411260" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ab61f069-d7af-6363-23d3-7889d08bba0d">
      <Execution id="aa10a46f-4d3d-44e4-a42b-cbbb028cdc25" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="41263061-629f-5122-b60d-99058ccfaff5">
      <Execution id="91b85773-d91e-4752-b8a8-960c62e5bb4e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="576bc1fd-8ac5-2f75-2f02-7ae58b0a71f3">
      <Execution id="51177352-e63e-48e4-92ac-121f998d99f0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d4c28988-d268-5c5b-b062-da0832d7c71d">
      <Execution id="43c5894a-f0c1-4e30-b4a9-fe704b12924d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cf3ed160-397e-e526-f7fa-dc726d96cc25">
      <Execution id="b9b28b69-e61e-4d0c-b612-7a10e96462ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="47580bb7-0de7-7d32-6dac-1c3e3659cd63">
      <Execution id="e173e770-a8b5-48bb-b202-3fcf4a459754" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f87397af-4c7b-a3ad-67fb-5dab9a5624aa">
      <Execution id="91d8245f-06b8-42d2-8290-586fd5cb4979" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="04a6e469-7af4-6b78-840d-717c082138da">
      <Execution id="7cc00402-7c0a-4ab1-b85d-a534245e3107" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c8fe67bb-e07f-ae57-7127-7acdd649f324">
      <Execution id="98d9a949-d459-4156-bbfc-c7e7795ffc59" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9e48b2af-1dce-232e-e1fe-5c4721430113">
      <Execution id="78aaf205-b41e-4c60-8537-eb3fe7efdc83" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0bb9b590-c574-13c4-3f4f-0597b98bf335">
      <Execution id="1ea3fe87-b880-47e5-8d0f-3cfa1469b2af" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="baeb2572-ea31-9ab9-2b30-36ca6fd6e405">
      <Execution id="6492fe99-31d8-4275-88a0-ecda27f20735" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="74d5adf3-f8f9-137d-c242-8334cfb33e97">
      <Execution id="2fe29938-1e75-4a25-b4ed-8b80ac1bd16f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="32ff2ea8-dc00-1a11-7672-4d21618b9ca8">
      <Execution id="5c006856-716c-4544-92fb-dcf7ce4c0cfc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0127a3f1-4b9f-2272-ab52-3848acbb584f">
      <Execution id="36d258ee-2118-4da1-a183-016e2854ec4c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ec9d91f2-e860-03df-f360-fd467302876b">
      <Execution id="4ab89610-b94a-4bde-b747-f271f5f32d6e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="394272e4-c6e4-7e1e-f042-b063b0e59c79">
      <Execution id="2ace5243-e3cd-4ef9-8c8b-7301d0f11317" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ea7a2060-8204-9a65-570e-1d6d84a96f7c">
      <Execution id="731c3635-8d04-492e-a7cc-c487d29cd08b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a2c5e1dc-a090-8f95-0a7a-60758f8296b5">
      <Execution id="df891e0d-aa73-4547-bfcb-04d255bb4710" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="12d98f25-c244-1fab-2f65-18107c158b74">
      <Execution id="ffd5bffd-0e1f-4c3d-bf06-47d4c6835202" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6bcea128-aa38-b86a-de84-24399800363d">
      <Execution id="1a387e36-64cf-4b95-b8cd-ef4f96e51b2a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="32d68111-5fc2-d40d-1dcc-aeac84a1b029">
      <Execution id="6e529173-9c70-4b71-b504-024cf0265af1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67afc45b-dc45-13c0-2a62-ab056e044b5e">
      <Execution id="88d645cf-a744-4a4b-911a-6f11802dc68b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ecb69047-ada6-cfd3-a341-40e7b8b49794">
      <Execution id="732582e4-c80f-42dc-9391-2db28949fc32" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="53df6eb0-1c19-8ac4-03b4-2e6bf4081b40">
      <Execution id="78076b68-e921-4c49-b520-f5b259fcb150" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9deb4dc9-04d2-aa36-e34a-e2b267734126">
      <Execution id="9cc465fe-0e0b-4558-b237-f53ef031f695" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="726ca4fb-3893-04da-0600-871c1729012b">
      <Execution id="752d41e1-50b5-47c4-9959-607ddb444153" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="171f6e95-7ed9-0e3c-3d72-638ccd34b1a9">
      <Execution id="a1188f1c-db6e-45c9-aa35-1be5aa9c1fd4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f54c69dc-1abc-c069-cdb5-72354020d797">
      <Execution id="242d393a-1938-413c-be50-5f2a4d69e25d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c26efca5-de6d-0ad3-3751-2bb9c82d1565">
      <Execution id="3b5cf074-3cd7-441b-a5a4-4be38a87be89" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="36ae5b4a-87b6-a099-e670-7a6d91c4d83d">
      <Execution id="03a5db11-13ad-4bda-b8bf-312a1b47722a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c259fffe-ac88-138d-4ae1-4de313cc4cbe">
      <Execution id="c22da87f-4e81-4665-9c45-189b69b0acc4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f5efb945-4cbc-fc8b-c033-2133940017ab">
      <Execution id="5d6ba43e-86ac-41cb-9cde-be69ddc72642" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7c3a1517-60e4-c0b4-7622-e1707a7ae41c">
      <Execution id="eeeeefc6-9a02-4878-bbd2-00f5d423e323" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: NotEqualsToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="63b1ddbb-c2b4-8aec-b5a2-5094832b3850">
      <Execution id="68b2450a-3600-43c5-b38b-29fbc02b2f8f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f5e14e2f-3aaf-3da1-227f-3529cd4c7ef1">
      <Execution id="a9b2acc8-fe11-4c6c-a226-dfff9f3112f4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f0b0a1e9-da05-1823-3adf-18acfe1ea997">
      <Execution id="c86946ef-5100-402c-9d57-867c10bd700d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: IsKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a8fabafb-049e-bb23-be9b-39457b33e75a">
      <Execution id="60c87ba7-688f-41ad-bdc6-3a71498da69e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: StarToken, firstText: &quot;*&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b77690e6-fe3e-b99c-d733-66f3a0b85d85">
      <Execution id="150146ce-943c-4351-96c8-c138af6f968b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c211c607-5343-f2de-34f3-bbe67d91c19b">
      <Execution id="150ebbc9-e26b-4d21-83b4-aa4a805b0c22" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0589868c-8c5d-7b03-3914-961a10b359eb">
      <Execution id="d151d27c-851c-45f5-aaae-7555eaffab92" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a0b04c73-ef8f-6dad-daa2-9d570fec0850">
      <Execution id="3efa08ca-fa93-4ee6-a60b-9e053d80cd33" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="11ae4c3c-a8db-d2a7-8fd1-218a71aff984">
      <Execution id="c811ba9e-b9c0-4c3d-acb6-78ebcc2b4610" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5a754e99-d0f5-e6a8-b1b5-63e33f0e3b57">
      <Execution id="bf7f2fb5-7a69-4bc4-976c-fda450fa83c9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="95eaec89-c84d-a811-39af-b3e0502c4c79">
      <Execution id="240243d0-facc-4cae-8025-c482ccfa8ec4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c4b0977e-9ef8-fe01-8470-cc65adfa6479">
      <Execution id="f71490b5-3f27-46a7-a4c4-ed8892edb4f2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="373d0b5a-6be4-ceb5-f920-6e8b98355e38">
      <Execution id="60c95e1c-2fd0-4046-ba10-9de079debce0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6a742b88-870e-529c-4a86-d85ed0d8bc4d">
      <Execution id="0f03221c-33bc-4749-bd1c-2a564372abc1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c7d292d8-b278-a12a-9b66-e868200d3235">
      <Execution id="fb8cc541-3af5-4e13-912f-bb1c0c0205e2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="353a45bc-71e1-2e10-9592-3078160abed1">
      <Execution id="c3519281-bec4-43c8-b1c9-5ad126ad5dfd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8be1547b-6e6a-2e20-9fde-e40550f10438">
      <Execution id="9a6763ab-21b9-4ead-bfc3-93459fc844a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;-1&quot;, expectedValue: -1)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4629ff8d-7168-9f21-10df-e12d7346c7b7">
      <Execution id="9a9dbfd0-0227-4f57-8200-51dd642faf60" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f693ce20-5b70-1c96-fb84-b894d6920ebd">
      <Execution id="58a49d0b-acd8-4953-8545-287f3e60d30f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ac742156-1ca2-f768-8f01-02cab9be2bea">
      <Execution id="c80c56f8-944f-406a-b963-61c6ec46e5cc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="42791c29-344d-2068-00fa-c7ade30915d9">
      <Execution id="ddb0ff1c-2c1e-4748-b7be-ab9f8631c195" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a9937e1e-695a-bc97-6b5e-324cb9404919">
      <Execution id="d52595ca-bbc8-4e07-b301-772370e73936" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6eee8cd5-4736-9a77-82cb-935761a7f0b4">
      <Execution id="92d17155-5fb3-4daf-addf-d130231303d4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ea07934d-794c-76b5-246c-9164b30beba1">
      <Execution id="89055f09-60a5-4e5a-8282-ed42f1211036" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f265c629-f9a5-10ee-ad96-8ff2d7867fe4">
      <Execution id="2121bbfe-f8af-472d-bf42-976bd49ae7b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="201b7ecb-36d9-3b2e-4072-94d9c4983761">
      <Execution id="c98cbedd-c721-434a-bc78-036cbf39f0b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1630493f-2047-380f-4f32-ec9c56ec784d">
      <Execution id="d07fd49e-1dab-4b75-badf-d4ad8bc3325a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ed962006-ff3d-3c85-3d3c-689173bbda9a">
      <Execution id="c6526c73-a8be-4145-a80e-5b2d5ecd0e79" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="218808bb-3dfa-02ca-30bb-89c860576546">
      <Execution id="32b806a6-84c4-42ba-80fd-8df467984d38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5f89b294-644a-5682-d7ed-155ee37774d3">
      <Execution id="e0b713b8-1f9e-4dfc-9ddc-df70f12d1eed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d2b5c28e-4b0f-eeab-0936-1bc69d41f584">
      <Execution id="ecbb1e86-3c37-40d2-b918-78e30f5ff176" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71f1c7b5-4442-472a-ed86-d31b32a1610e">
      <Execution id="c4685fb2-873a-4eaf-af7a-72476b6348ab" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd56c734-11d1-2315-1b8e-93f8819101cf">
      <Execution id="f4e80f18-84b6-4732-9f8d-f36ada4c1f87" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6793cdb2-1fa9-c573-12c7-687f212d19a6">
      <Execution id="859423f9-d5d8-48c3-9c5c-e7b4eccdf9bd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd12dbbd-a97e-52ad-cf1d-cf02da770442">
      <Execution id="1da97740-d0b4-4f66-a954-9793f5ccc62f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="24bf67f7-6715-db0d-b503-b3da6f2827f8">
      <Execution id="8d855ed3-d565-446d-9227-7c2bbbf660d1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="54799e39-be94-2e32-f4c9-a4b72c43e732">
      <Execution id="9834fc98-e5f1-4163-a91a-b85be6cbd361" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0ce1ea39-5eeb-f3a2-6e84-cb6522947fb5">
      <Execution id="43ef2720-4e06-443f-8431-df60281fa5ab" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2fcad8c7-b322-4b80-08bb-3b73b5aba7ae">
      <Execution id="25aeb6d1-7794-47a6-8f18-7af49d87e92a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="608e3f1c-f64a-0864-6159-a878358b4542">
      <Execution id="06cffc5c-a4f1-43a6-a744-829beb8699fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd02a14c-ffbd-de4f-d618-0b7a01870273">
      <Execution id="ce5a0273-bb44-4518-a6a7-3f925ccdc631" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsNotKeyword, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ddf30769-3901-7c63-0655-c6557a394e21">
      <Execution id="131fbcd9-ceb2-44c1-8594-bcd11d5687dd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="550320e5-5c66-0986-209d-1c90aa745c65">
      <Execution id="c8d908b5-f9cc-42d7-9abc-2c36a4526259" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1ad04a27-a1af-5939-ec05-361baff5f24e">
      <Execution id="f75c382a-d7de-4dfb-9aa6-76750839fb86" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="15578177-dd32-65d2-c281-c8c05880e3a9">
      <Execution id="9106f80c-973a-4f6d-8664-79291da343f7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a16029e6-c586-7611-d0aa-fcfb876458f7">
      <Execution id="e662def6-07c8-402f-8c2d-a6553ebcd5d7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="46d5ab2d-979b-c59d-2023-7b18c34b32fa">
      <Execution id="ad6acdaa-edab-4bae-9284-822d483bcc40" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="400fae07-37d3-167f-ba30-c1f92fd8965e">
      <Execution id="23bde27f-b138-45fb-a1f3-32b5b76fa554" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7a61bde7-f5d1-d1b6-9435-cb4502417842">
      <Execution id="5c531dae-d2d2-4e0d-8cb9-734b7979244b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae404166-de87-63fd-a901-a2021c260a88">
      <Execution id="0c1447b1-94e9-4ef1-ac0c-2db821517271" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8d748a0d-dd37-0c20-ef03-fb1e8e68d04a">
      <Execution id="2a7780fd-fa56-487d-8563-2033a47b4aaa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="68ab69e5-31a1-d038-e858-27ba18a29700">
      <Execution id="c3b3e0d9-0e4d-4807-977a-615c9ff08e03" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d86bfd56-da35-62f3-ffb2-408b52750349">
      <Execution id="628ebd9a-1b4c-452f-bbcc-d2d49594f080" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="028d767f-19bc-4b1a-74fb-f7bdde096233">
      <Execution id="581eccb4-5f2d-4b4a-ab22-dc38b53dc4fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="781ecebd-3a99-e0af-147c-ea295bbd6327">
      <Execution id="eea86e20-b9b4-4223-86f7-415ce80dc70d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5423a2bf-9a2c-a8b7-9566-d8fce8666586">
      <Execution id="798d19eb-220c-4f6b-8945-048b5016dcae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: IsNotKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e8143c1b-1962-f0a3-ddc8-706060923d82">
      <Execution id="5a0b71db-4dd5-41f7-a374-84b2c4b56ec2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ca121c4d-bde8-1c87-8163-9d61a33d29fe">
      <Execution id="3f2d1d71-cf69-486f-8800-4d71026ad6c3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bd575521-b575-59cd-62f3-6b0ca4653cef">
      <Execution id="5c0d7049-7c76-4864-bddf-274a353d64bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: OpenParenthesisToken, firstText: &quot;(&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="87dabd65-7cdc-8a7f-2bce-66cb02085a5b">
      <Execution id="653e51f2-98ca-4589-a18b-3ecfe2f497a6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6e649dc9-1c36-2be6-6bb9-8a357e1f9fb9">
      <Execution id="8410551f-85c6-4b22-a5e6-d9f316e930c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f415a706-6309-b096-b079-64237d4cced9">
      <Execution id="7a0cbfff-6026-49b3-932b-c0cd40925420" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ae3f38ec-f30b-0cdd-db91-d7e3eec08d99">
      <Execution id="0edd9e55-2246-4497-b95b-a57f9d982b36" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="89f3fb75-60e2-9524-111d-0966b9fdb5d6">
      <Execution id="a531b4e3-0cb9-4a64-8d9e-8bc2da192adc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="da68f6d9-f043-fa82-30f4-89885b5beee8">
      <Execution id="adf5c685-ae48-4820-900c-1c148f96db1a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3513ed47-05c3-618e-d934-3f640b6376b6">
      <Execution id="3a108a17-6442-48c9-90e1-7d7fa9223416" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bbeea391-3856-1f31-5580-3b5d5086be60">
      <Execution id="07fd7942-c621-4ea6-a69e-789486b92667" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="eb23603a-5108-c6b8-afb2-7e8255c016f0">
      <Execution id="35407bf6-738e-4d13-baab-cda7ab40c91c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b2bef78f-4ef1-abc3-ea1b-d4318033fb05">
      <Execution id="0cd396b4-209a-46b7-a88f-f03df75d9a49" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8908d670-0648-87a1-686f-bf0e3444597f">
      <Execution id="63131f25-0871-472e-bb9b-924f61ee891e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="455ee5b2-6a14-8e52-a211-79222312a84c">
      <Execution id="73e28e4d-75e5-4342-a3d0-ea1878bd4b41" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3d88accf-5b21-1ee2-54bc-0357b8edfec2">
      <Execution id="d8437816-b881-4fd2-9812-4a2456879ff4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02d979d9-f5d5-4ebb-6257-416210f1d06a">
      <Execution id="81d34ed8-d54d-4125-8031-cc820fc831f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1c516af-1cc3-4b7c-b57c-30ff65703d39">
      <Execution id="3e51e158-d7d3-43ce-a480-eb7e137e20d2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8b68a73a-2978-36f7-3551-24c6ba58d561">
      <Execution id="ac5391d7-8c5a-46ca-8c96-0570276a9e01" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a4cf1fee-5d4b-bb41-588d-21705185f386">
      <Execution id="bc0e6b3f-c8af-45c6-95df-4a21b8b5fe8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3e5ef830-54d4-6e15-04b0-33e1337e051d">
      <Execution id="e66b7259-bf56-4644-b2d6-612e397f1122" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="206d99a8-15ed-4aa6-480c-aa2d34516e87">
      <Execution id="612a83f4-1ea3-48a0-ad1a-da8115917edd" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e2009fcf-021a-1553-64ec-60c3a57d8882">
      <Execution id="7d31ef36-f33f-4634-a6a8-16464d318fdb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9464a9dd-8a6f-e31a-9933-d439f6aa4e52">
      <Execution id="59b37d1c-951a-415d-b691-8c066191edcb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0c12fd7-65ca-dee6-f976-91ee3feef222">
      <Execution id="6ab45b0f-80e7-4a4b-a70b-5741607e7224" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: MinusToken, binaryKind: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6451027a-ae47-8334-a04d-000f4719a66b">
      <Execution id="3f40a957-a88d-4273-ad90-8b595af20d85" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="571bf72e-0b9d-9508-739b-4a52e08c199b">
      <Execution id="60ae46d4-0573-4206-b924-40c2bc1ab610" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67cd61d0-e417-67fb-fa8c-bf1616a4d473">
      <Execution id="1561b887-71ba-427e-a493-006efbafe961" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="03add391-fd70-d731-6b05-7eea271f1ff3">
      <Execution id="27edb798-683f-4164-872b-8fb671f6dd20" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="721a6d40-2ae3-6612-7f9a-7c8234775d74">
      <Execution id="2d6de4af-f21c-43c8-ba28-a5bf549390d3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b4ab7874-07aa-12e3-0e1f-94d137641bd8">
      <Execution id="41502724-abe5-4ed1-95dc-642d2b7cbb55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e3cd12a9-19e3-aa4d-48c8-bff04da64316">
      <Execution id="65aa8fe4-073f-44f5-ba2b-b733cec057a9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49e3a4fe-2f55-6551-73a5-a3f0b39efed2">
      <Execution id="14f10ea2-36c6-455f-af77-f8e562b34844" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ddf005a1-7a61-5a8b-b241-b6033981e872">
      <Execution id="b367a2e5-46d0-4a6d-af64-713bc4b855c8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c9ecec52-a192-4926-2fb2-f975c18d28ec">
      <Execution id="3bc9af1f-6e56-4fda-89ae-c6b2d22ec0a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3003a3d8-f738-6d2d-1fa5-74d54eebf6ef">
      <Execution id="9adde724-a8e0-49f6-9d26-44dded45df0a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b3e95e52-ba53-f5d4-58d2-b501b761f33b">
      <Execution id="92c77724-525e-4a07-a506-12de9c7b6463" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="954398a7-0fed-cd17-1f23-3b2250c67c39">
      <Execution id="d6e7ed0d-77bc-4bc5-9198-7751ec1c7362" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="bdd3ecba-87bd-95a9-1c6d-650cd9ed1ef0">
      <Execution id="7f1c91ac-6b55-4e4e-854d-e69cf3f058c5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;False&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f63738f4-a69e-536e-e5fe-dffe29e8bae5">
      <Execution id="97310311-4ffd-43ad-83a4-eeb7fdef3940" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d4a3633f-999f-667c-424f-36b2672c8bac">
      <Execution id="df3b1123-4453-433a-8b4c-64cb6886867e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f334652f-6872-d535-5d8e-973f68dc84b5">
      <Execution id="f007f727-4549-4822-9fd0-a6c46f6bfe14" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8bc515b4-89c6-0a96-3010-d092e0485562">
      <Execution id="899228ec-275b-4ffc-8eb0-85edc7ffd6a4" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="07b91b2b-32c4-5d90-13d9-49dcc248effd">
      <Execution id="ccd9bd75-5239-4435-abd8-1d4ac2fac6ed" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="233436fb-7e81-49ab-ce4e-c4aa1312968c">
      <Execution id="674ea246-3ed3-4f15-827f-c375e9525887" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ef901d08-6a2c-0aa7-d1b8-e0ee187f63c3">
      <Execution id="77e38ef7-268d-47f3-a4b4-2b4e01eb3585" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="691d4d8b-d940-61dd-e201-77202433c358">
      <Execution id="3e8be15d-3b5f-4033-9dff-71dd9c6ead9e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="87f39797-68dc-dbab-5c1e-3ada9f9086b3">
      <Execution id="a217fc40-66d7-4f5d-a2e7-fd1d73990f9e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4b2ef06a-3f86-4a9a-0980-a987d0fecaee">
      <Execution id="f7d4c092-5983-4992-8f35-bb9376cc4792" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fb0f2d93-ecb4-aa58-2535-9422b6c9773a">
      <Execution id="f9df7285-2658-4e37-abcc-c1398220125d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b0351ef9-2e5b-dba8-1ab1-9aadef153bd2">
      <Execution id="26630537-8db1-49e1-a812-862a04654414" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2c6868e4-20a6-b561-cce9-8c434590924b">
      <Execution id="d3000a95-00e6-4d14-b646-e015e0306457" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="423a9cf1-507f-88c0-320c-1466d658562a">
      <Execution id="dd7e13ac-c9e7-4214-86d2-b3a20c2e9716" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="249440b4-0a71-1e76-25eb-958ffb710349">
      <Execution id="117d3c1c-6076-447e-8bb5-6f601353def2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ccaba2fe-7e3c-fbce-dc4b-8ac3c38ee367">
      <Execution id="6a92d12e-bae7-4667-a08e-5b1e68e56aa0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8fb3ef76-c78e-5994-60a3-484b8e103b71">
      <Execution id="3d5e6979-b88c-4462-aaff-8dc43313532a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="af6465da-40cf-364b-3bda-a17184c621fe">
      <Execution id="7949e48e-4d12-4539-bfbc-8096faa9081e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: MinusToken, secondOperator: MinusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0debdda-33e1-906b-c3d4-2f5aecdca33a">
      <Execution id="9c3ae2b1-e8e3-40f4-812b-0b3452d1fd47" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ef3c64cc-812f-5128-6cd4-964f948a2537">
      <Execution id="58dd0afd-3908-4b11-aa54-cde4e39130eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d582a3a4-33ce-d84c-edb4-ab8ea031d52e">
      <Execution id="97772db0-f87e-4f0c-920e-620fa521bb81" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e7a8328a-4187-37b3-b8e0-a1d7cf90c7fb">
      <Execution id="603f6788-5d90-4262-b8a2-c538e8b0997e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9caa0bf5-4f9a-4b98-df88-a2b19464a5d0">
      <Execution id="40285740-5ee3-42f1-8cfa-0f72f32276a1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="039e0dad-470d-f08a-22f3-644b6025d750">
      <Execution id="8ca6b751-a670-4446-8680-cfaccaa5313e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4e8095da-774e-f38c-8f51-11ac5c142268">
      <Execution id="68209ed5-12d7-4e72-aa31-9a69791a427e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: PlusToken, firstText: &quot;+&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6433901f-bace-5a58-627e-89465e706e05">
      <Execution id="ca9f72cb-c3c5-4328-bd87-d05c544f5ef8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="29c35deb-75a2-534f-343f-33dc1c8f67f3">
      <Execution id="b6047576-aa88-4ece-9654-4b56dff9a70d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6591d89f-2a0a-3965-b5ec-423713b2c205">
      <Execution id="baf20633-2db8-41be-815b-0bf7e1aef92f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a895bd09-e362-8a88-4b9c-81782e66f735">
      <Execution id="dc1ec2c5-47f6-4fa5-b1c4-44a060173e1d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d1763ae5-c014-70fd-5320-0c3337c77fb8">
      <Execution id="f3360b6a-7fa1-4ac6-ae4e-f4f631961306" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b7c31353-afd1-ec7b-cced-9abc15a585db">
      <Execution id="73e93b61-d5eb-4db9-8243-4ad43bf7979a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="58290772-4edb-9bae-a3f4-2ad48f29d0a8">
      <Execution id="a377451a-f7c5-4168-9d9b-6c3f24fb7108" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cf31d202-853d-290b-b6f3-6da2ca7b4cf6">
      <Execution id="c9af15c9-0c09-48c4-bd9d-7e565839c7f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="33d34085-64ea-18cc-b9d5-391d98918d2e">
      <Execution id="97bab17a-fd17-49a7-9825-16a4bdc9be49" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="746b3c8a-d934-231b-7ffc-8f1ad35724fb">
      <Execution id="da125257-6767-45d3-84cf-a2db772205fb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="39f83c82-ff4d-ac91-804d-1e6b8e3ee9f4">
      <Execution id="fcfe30aa-473e-488e-a5f8-b321542fc29d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3b6f2abb-9a38-5112-18e7-87917ba90bb0">
      <Execution id="bf109af2-c09d-426b-8ffe-948141efee9d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1815e82a-9441-6fcc-5630-07e10b12a97e">
      <Execution id="292589bb-2e72-47c6-98e8-429ff485a797" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d42ef24e-fd73-71ba-ca10-b5233a720bdf">
      <Execution id="aa7fe799-ed99-423f-b4d0-f51e91a54e8a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d298a0ed-05b9-cdd5-4f28-0e49abb5a26a">
      <Execution id="1e7493cd-908c-43a8-9c0d-5884a3cbc3cf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a1b68a48-1ec2-b9a7-7400-72a1c2ff56d9">
      <Execution id="3cc98646-5307-4b64-82b5-f3148c0e78f8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8a636c7b-9a0e-f99f-86b1-40253fe8a20e">
      <Execution id="d8dc6536-a571-4981-816a-0504e368f4ae" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a91f24bd-eba9-7759-381c-13904cbe1c6e">
      <Execution id="91bfa6b4-f8cb-470c-a997-bf327ae86c3c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5164a3f1-84d5-a931-d10b-2f77edad0aae">
      <Execution id="c4209f25-cf99-43a2-9f14-04e32b0b6be3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: IsKeyword, secondOperator: PlusToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f7ba2ee8-957c-9133-ec07-a324b409ee19">
      <Execution id="b8da0897-69a1-4c18-9b07-698f337e52c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="10bd0d99-dd11-97a5-08bf-8ee974d7db00">
      <Execution id="49101e7b-66bc-4fe7-8119-9370334b5010" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1de80ec0-3369-3b04-c4aa-4be357da8a65">
      <Execution id="6d015dee-e53c-42b2-9a4c-ce43897d1e95" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a93da7a6-b15c-a772-d3e4-f2e00d18236b">
      <Execution id="cb5b771c-2816-474f-af2b-ffa42bf4cf3f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: PlusToken, binaryKind: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c87d3e8f-d9a4-e676-9f17-6d68c48380ca">
      <Execution id="b14d708c-1425-43b4-a3be-6b05502e9e5e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1b8be8e5-1c5d-54f9-ecd2-11a9ebc1603c">
      <Execution id="a385c08c-a2be-4963-871a-25ed1d3e82ec" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="108df3e3-b792-4d18-72bd-8867183f06cc">
      <Execution id="6e0b7838-b6fd-42cc-92b3-52021e8248fa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5c4d160d-6034-b7d4-4318-32b366f2ef7b">
      <Execution id="17796245-05a7-4f18-9822-c0d2583686f9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c3ec5a87-d8e6-2fd5-2075-7fb805be3b5b">
      <Execution id="916d522d-e3d7-458e-9e80-f79d6a01478d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="79248556-6a4e-8c8c-d60c-14dd0d87fddb">
      <Execution id="bf045597-2861-48d7-8eb7-e62c8d4c81ee" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7d5212bb-785d-5eb5-d44b-4e83eafd21e2">
      <Execution id="b22ffaed-bc08-4c25-a11a-af700fe7c749" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="22407006-8b61-9da1-2321-fe2679b6238f">
      <Execution id="3c6b36f4-5390-4fa3-9b98-91dd0d9f5834" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2ae6e9dd-07b7-0461-c652-c50b2736e042">
      <Execution id="0df75240-b4bb-4146-b196-dbe656a9ba2b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dd853531-f6ac-1005-7638-fbd4ee5ec046">
      <Execution id="bc8a2efb-e7b7-4857-884d-786c34efd7a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="ba461e44-0c0d-5645-c754-a0378a14299d">
      <Execution id="577fed21-d692-4580-a4e9-2146c21005c2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="790420ce-dec3-eb6e-8248-7f17368d93bc">
      <Execution id="7209dcfb-0696-42e5-98d7-5ea5ac24e98c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="edaa5339-64d6-c02f-dc09-e6e628958ac4">
      <Execution id="1ebf7bcb-f413-4cf2-a53b-def398faa642" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: EqualsEqualsToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4d5dc888-effc-180f-9ad5-da4fb4052456">
      <Execution id="637a6675-f1cf-4ae4-9349-6ddc93eeaeac" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="49a4c055-5280-55bf-c752-20dd20b13c98">
      <Execution id="9a9eecfe-b858-40d3-b9ea-90b54b6343eb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7d413269-e355-eb50-397b-daa79985694b">
      <Execution id="bb8e9015-fe65-4429-ab17-50591d3fe3f1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2e4ceef4-90d4-d9be-16a7-1baf4fa8f7dd">
      <Execution id="4484acfd-1927-4a4c-8a7c-3881eb76e0b2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e1da831-283e-c51d-73e4-c8b3b7762473">
      <Execution id="b5ed6ae7-2ea4-4d73-83bb-f66c48eaa447" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b310265c-d10e-5f47-0138-e012f182f10a">
      <Execution id="4f3fabe5-4d76-4bf7-89df-ab25bf99b2ad" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c9d79cd6-5aa4-e12f-1a12-31dfb82bd060">
      <Execution id="30cf4e9b-b77c-4940-9de1-cc8120e7096f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="70720e19-d021-9b52-28c7-c8eb037230f3">
      <Execution id="b4536447-b679-4cb8-aad7-2d491e9b857e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="809a06a8-67ad-14ed-a615-fabb2a11e91b">
      <Execution id="7ac1447b-d3ce-4cc5-a01e-220dd08e346b" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="379ab016-5707-4c59-ec49-57f0b60c3051">
      <Execution id="65decb2e-d0e4-4286-9f39-c06b08383fa0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c03f330f-8bf0-d307-0400-2089618b760c">
      <Execution id="39178687-e5eb-4642-b0a5-981f8a540aaa" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="75a4b8ae-8d50-1ee7-aaa8-5bca8a21ed8e">
      <Execution id="a5f97539-6863-40bf-a970-3d07153aac1c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0922fb92-b11c-d22f-3471-b89a046a1537">
      <Execution id="32995318-7e13-4d4e-9b57-48d38636ac61" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotEqualsToken, secondText: &quot;!=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="56826720-405e-3aba-98d4-21fb65e5b5ca">
      <Execution id="0bb69088-b189-430d-9020-2a8c695bf22a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0cce541d-e87c-72d2-a6ac-27960277941c">
      <Execution id="f09500c6-241e-4d9c-8b59-33165e9e5b23" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsToken, firstText: &quot;=&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fdef38ce-592a-5759-69d8-c660f97f4980">
      <Execution id="f00da08b-3136-4239-bc35-d83832162019" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NumberToken, firstText: &quot;123&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="f7825c15-6955-9c10-2802-be9060546fa9">
      <Execution id="8cc76fb0-80d0-49a6-aa39-00ad901531b5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2beb7582-ce22-581c-071a-330eb2eb1828">
      <Execution id="c473a340-b9c2-4fa1-a4cd-96b8816ace52" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: MinusToken, firstText: &quot;-&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d0f560ef-6fee-6530-f893-9a03bb1b295c">
      <Execution id="6f84a8c2-d723-4d6f-9a2c-2cf17f1d82b8" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: LiteralExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="67c7784d-5169-644d-8592-d1f2dd2cee63">
      <Execution id="9d7f1b63-36a3-49b1-a9a3-e1a556cc0cdf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a39d1ebf-f122-92aa-193f-145fd0bad93e">
      <Execution id="a95dc371-4004-4653-a496-95ebf89edddf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3005ec13-dbf5-14e2-e530-058c4bb5f308">
      <Execution id="15d93bab-1521-4992-ba44-631cf88eeb00" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c0d4ea25-116d-7084-e18e-d337510bfb2d">
      <Execution id="c0c2db46-5ad1-413c-a5ec-306e81d9ac6a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d6ac5a1d-7351-5915-72c3-f27b40ed69b3">
      <Execution id="32fa6e24-7eee-4fd9-9bb0-23adf7d7ecf3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="28ecedf6-e67a-57b4-4fcd-5a83da7efba1">
      <Execution id="1b937cca-5117-4331-8f10-3328a5c9c3bf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="02cb5229-9e22-d16f-c533-58496aed8a74">
      <Execution id="6990a173-605a-4f3f-96e1-96d2c32fc6c9" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="704e3035-4eb8-5208-1539-178ed2721509">
      <Execution id="7dc5e5ea-e13d-4644-b0f8-21b660aa796c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IsKeyword, secondText: &quot;is&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8f1dc184-32f1-9847-f9da-84ac0a05d222">
      <Execution id="47eb9566-a005-49d8-ace9-b9b93a2fcd39" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: StarToken, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fa42e1b3-e34e-f0a3-8c1d-73b1ad018a1b">
      <Execution id="918c785d-4ee2-4545-9b68-808d3bf8bbfc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: NotEqualsToken, firstText: &quot;!=&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d09a4c72-054b-a8f1-4db7-1a8b3bdecc33">
      <Execution id="2385fedb-a8f3-41a2-98b2-8df99344c3a3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9914297b-f7c6-2a38-f4be-be33c86378dc">
      <Execution id="28ee2f18-b53e-461b-8507-705f6c90410e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="79039be2-27c0-022a-c307-08b8bbdddbb6">
      <Execution id="00745c9b-ae3c-431d-a768-6b30dec5370e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fe546d2c-4689-085c-ec57-e87a9c2d9b84">
      <Execution id="0b9c9139-fa48-4226-b3ab-47814dfb1e3c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7619ad62-05fc-e7d4-d58b-fce7dcc67370">
      <Execution id="23a4a4e0-d44d-47ae-9967-da247c4c3b67" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a480d80d-abf1-5208-24d4-fb53b008ab79">
      <Execution id="56359220-3481-424c-af10-1d4a54eba49a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8ed41bb3-0b3c-3ecf-6d35-19d04ab90a4f">
      <Execution id="cd4e36e6-1bf3-4eea-8992-11aafab51e4e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7f8e3947-0655-8d8b-9307-99ef9480c20a">
      <Execution id="fbe1858e-4002-4ebd-a6b9-fb55b8801c97" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.UnaryExpression_Precedence(unaryKind: NotKeyword, binaryKind: EqualsEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="cccb977c-4018-6daf-19e5-3269b56bda53">
      <Execution id="5bff48c3-2caf-4bd8-81be-f0c7614d724f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="UnaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="952abe4a-6dce-9577-00cc-181d036e1c37">
      <Execution id="2cf8595c-078b-4c49-acf7-e71ae88f6802" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(a = 12) == 12&quot;, expectedValue: True)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34bb8306-c29c-4626-c5b0-9b49ed139da4">
      <Execution id="a4bc55d5-7e27-46ca-ae7d-876d9dc46565" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;True == False&quot;, expectedValue: False)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="15bee5af-28d2-4ab5-4a80-2f35765b2090">
      <Execution id="11983811-25ff-4e8d-9efa-8ebe0d99e3d0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="915b5763-ff6e-5eea-f3ee-32d5aaddbfca">
      <Execution id="bc513824-973a-4438-adbb-0fce3bb23117" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: EqualsToken, secondText: &quot;=&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5055d80a-b074-4776-a476-517b795199ad">
      <Execution id="88c9ec6d-17bc-49f1-b170-d75b73122b1e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="a015f9b3-8328-352a-d22f-991e77b13b1c">
      <Execution id="503b43ae-3007-46b0-8c1c-b3b930c15a17" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="8dfab34f-3331-68e6-1c39-591a4e844b20">
      <Execution id="e2aa4fe3-d4d6-4f69-80ba-9393c030ebcb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c9473930-6aea-13e9-e12e-8ea5ef88ca22">
      <Execution id="d104a89c-ddf4-4690-bda0-d75128afddeb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="1457a30a-82e9-b48c-378a-3a0036838e02">
      <Execution id="e5877421-3f53-4273-ad21-47ada61d418f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5e9c8d8b-2e1d-048c-f99b-129e36038b28">
      <Execution id="3ca91c73-474e-4722-b257-5c5639217dc2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="38aeeebf-2015-d81e-0616-89cf0f9cde39">
      <Execution id="86a7fd92-835f-479e-97de-fda78ddf4c78" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: CloseParenthesisToken, firstText: &quot;)&quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="01d764fc-9fd6-3840-ec0a-c18d9ff90cfe">
      <Execution id="e2c5507d-d5b1-439d-8b57-870bbaea7cb7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="aad798fe-de41-655a-d019-5ce8f37af00e">
      <Execution id="8ed6e331-a481-4afe-a2b3-e4fc4dd1428d" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: NotEqualsToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2f1d5359-fd53-238a-fdf7-ab33697228a0">
      <Execution id="54c0383a-68d3-46af-b037-ba4a6edb0e6f" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="87bbc937-ec1d-6f92-9f66-de5f666eadb5">
      <Execution id="66d402d3-6a4c-4664-aa29-5d3a811a6adb" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.SyntaxFactTests.GetParsedTokens(kind: AssignmentExpression)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="84202444-fb40-9dfd-6799-534a246e10d3">
      <Execution id="55ab10b6-89c2-4ea0-a371-a1a30018a03c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.SyntaxFactTests" name="GetParsedTokens" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsEqualsToken, firstText: &quot;==&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="2bb9e9ec-9413-d98d-692f-cd33d79d78e7">
      <Execution id="5099dd36-8332-4be8-a065-8dea66aad0e5" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;loves&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: StarToken, secondText: &quot;*&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="34f40090-226b-f26e-9e08-927ff3a66910">
      <Execution id="05a981ce-973a-4dc0-a80c-d938559d08a0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="dccfacd3-fae5-8ee4-af80-022882776018">
      <Execution id="41aff99c-b4ee-4bbd-879f-7b4f4a0d010c" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: SlashToken, firstText: &quot;/&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3d1e6edc-f017-af4a-4e11-9d37dd5ff123">
      <Execution id="663b8c4b-c182-4240-bec5-5e15f22daefe" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.ParserTests+EvaluationTests.EvaluateText(text: &quot;(x = 10) * x&quot;, expectedValue: 100)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="99a93807-9ccc-aec3-dc6a-ad36cd077f16">
      <Execution id="ec6b595f-0870-42f0-8000-0fdf0044d23a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.ParserTests+EvaluationTests" name="EvaluateText" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: TrueKeyword, firstText: &quot;True&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="6f9a5faf-ab02-437b-94a6-b768d359327f">
      <Execution id="7b37e5ff-20d2-4b71-91fd-062068399b7e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs(firstKind: EqualsToken, firstText: &quot;=&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e6f500d8-0054-aee8-79fe-ff8f7888a3cb">
      <Execution id="ee97d302-4c7a-47da-ad45-e8821f166a60" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: OrKeyword, secondText: &quot;or&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e35d4334-93a8-5e9d-e757-198bbcaf081d">
      <Execution id="e080869c-71d8-4fa0-891e-453b78008c5e" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: CloseParenthesisToken, secondText: &quot;)&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="fcc11dbf-c889-ddbe-0ce9-0be7e966b8b2">
      <Execution id="e3496069-ddff-478d-9bdb-dc92b556ddd6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: EqualsEqualsToken, secondText: &quot;==&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c3fa40d6-0a2a-f337-b7d8-7c80d2551175">
      <Execution id="fee45d45-c01a-457a-9ba0-5c509390e348" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d815b0dc-6b01-b4dd-c3c3-d180dc31beaa">
      <Execution id="d291c3a2-f1a7-4045-9ac1-1bf89f4389dc" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: PlusToken, secondOperator: SlashToken)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="71c55f5d-8d39-8f4d-abc2-00f023384534">
      <Execution id="80303504-f169-4df6-b3fd-0f0016fef5a3" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: AndKeyword, secondText: &quot;and&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0d62812d-b36e-4014-9b81-58d7952d3fce">
      <Execution id="56f4614b-b217-4540-8963-2f8595da7960" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: SlashToken, secondOperator: AndKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="0b08fc1d-4351-db59-0a4c-7fa6d6c65877">
      <Execution id="46772148-f05f-49b5-86d7-851259107bcf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;ashley&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="879aa5e0-076f-bdb3-fae0-42d115f3abf2">
      <Execution id="86d73d0d-15f8-4260-9b53-f692d97fbb44" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: MinusToken, secondText: &quot;-&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="906c73f0-514f-37ed-ca43-92bde3614284">
      <Execution id="40439d4a-32a1-4834-9dd0-ba0db7428d55" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="35247896-257a-5aa1-165a-d2826627fae2">
      <Execution id="eecae5a3-4aa9-427b-8525-e5fbe5da6902" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: SlashToken, secondText: &quot;/&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="668de3da-e200-0d23-4ae6-9180d29586da">
      <Execution id="10b91bee-7feb-4ff6-bee4-aa34dfd332e0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="c47b9cf6-d906-ee0a-e4b3-8b846acfca41">
      <Execution id="c7488403-a6e5-4b7c-88d4-e1b27b83fcc0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: AndKeyword, firstText: &quot;and&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e486c347-579e-2f51-6b23-51a750fc38fa">
      <Execution id="0e2096bf-6fe6-4f1d-a92c-a5ef5dbe048a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NotKeyword, firstText: &quot;not&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="9358d858-0d07-2f3f-113a-093c5e394e23">
      <Execution id="2e767a8a-5c87-41ad-be6a-84a2f42b9ba6" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: IdentifierToken, secondText: &quot;loves&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="b90e1aa6-1d54-19a3-3d52-29efb7d1bb4c">
      <Execution id="782f7470-ea10-4d8c-8bb1-fecfbadec13a" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: OrKeyword, firstText: &quot;or&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: TrueKeyword, secondText: &quot;True&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="877933a1-7973-5c53-3310-8c1c443b4830">
      <Execution id="ea83d867-7f21-491e-9a95-009dd22c5ecf" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\t&quot;, secondKind: NumberToken, secondText: &quot;123&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="e1caaeaf-2b43-9364-f1b5-b5f3f75d7919">
      <Execution id="0c271608-f919-4ab1-a58f-fc16b3ba4fc7" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\t&quot;, secondKind: OpenParenthesisToken, secondText: &quot;(&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="053cfb21-cca1-ac05-d4fb-4e5435332792">
      <Execution id="aa6758fe-1889-4865-9a47-eeb61d247f38" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IsKeyword, firstText: &quot;is&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: NotKeyword, secondText: &quot;not&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="d643e0ab-3cf2-e914-6054-4658a11ec459">
      <Execution id="b55386c4-6cab-496d-9847-39baea13b2c1" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.ParserTests.BinaryExpression_Precedence(firstOperator: AndKeyword, secondOperator: OrKeyword)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="7fae84f9-cf01-25ec-851d-b4141afd8efd">
      <Execution id="0ababb94-ff24-4f45-ab41-e23c9c387993" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.ParserTests" name="BinaryExpression_Precedence" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;reday&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r&quot;, secondKind: FalseKeyword, secondText: &quot;False&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="4f6ce076-3cc5-b184-476f-d7388202c246">
      <Execution id="db9268b2-34cf-415f-b481-5273681d1ae2" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: NumberToken, firstText: &quot;123&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\r\n&quot;, secondKind: IdentifierToken, secondText: &quot;a&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3dc97217-af6c-f540-7ac0-358aeea3880a">
      <Execution id="af5738c1-472a-40c7-b360-4d83fbf64db0" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot;   &quot;, secondKind: PlusToken, secondText: &quot;+&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="3234bdc2-05e2-289b-97f6-8014bd833090">
      <Execution id="cd61da1d-a651-4660-82e7-f992046f6439" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: IdentifierToken, firstText: &quot;a&quot;, separatorKind: WhitespaceToken, separatorText: &quot;\n&quot;, secondKind: IdentifierToken, secondText: &quot;ashley&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="301c858d-8830-2f07-e607-66a4d83e120d">
      <Execution id="e2c7d3ee-9d6a-4b28-8087-bc205a846041" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
    <UnitTest name="Compiler.Tests.Parts.Syntax.LexerTests.Lexes_TokenPairs_WithSeparators(firstKind: FalseKeyword, firstText: &quot;False&quot;, separatorKind: WhitespaceToken, separatorText: &quot; &quot;, secondKind: IdentifierToken, secondText: &quot;reday&quot;)" storage="c:\users\reday\documents\compiler\tests\bin\debug\net7.0\tests.dll" id="5aa10959-ca84-d909-9d02-dfcbec734b72">
      <Execution id="218c6727-0d5a-457c-9d74-fff5b3a76992" />
      <TestMethod codeBase="C:\Users\reday\Documents\Compiler\tests\bin\Debug\net7.0\Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Compiler.Tests.Parts.Syntax.LexerTests" name="Lexes_TokenPairs_WithSeparators" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="f3d9dc50-2a62-4d82-9747-7c42d8d895a0" executionId="168e878c-dfa1-4b15-ba48-95fe9dae667e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a636c7b-9a0e-f99f-86b1-40253fe8a20e" executionId="d8dc6536-a571-4981-816a-0504e368f4ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88ec2b88-f2ed-1c00-e3eb-b0c071f11979" executionId="b11f29e4-52eb-41ca-9dc1-29217924d78c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="262f77c8-5d41-3525-c84a-ab44befeedf4" executionId="c39f6063-8e68-41e1-a218-bf005ef8655f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e313ad-329f-cf40-c5ae-d37f9c91c3c7" executionId="06f5ee62-9181-4875-b871-9a0b9a484aac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5494b3fe-5f66-a158-28fd-d9f8982fa2e4" executionId="6a503444-cc9d-4caa-96a8-3d8ac00610c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8431fad6-3402-4cce-98fb-9016c711451c" executionId="f8be3004-bd61-4930-bbf4-9ac9aff19b93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a812d2f-7051-a9d5-0c04-3f6d3141b7e7" executionId="6c37a29e-9f7f-4ef9-97c0-90db29673918" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d133efdf-c2f0-276d-c870-784bd756c438" executionId="ef73687d-fa29-4b0b-bd5d-29dbaf86900b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a480d80d-abf1-5208-24d4-fb53b008ab79" executionId="56359220-3481-424c-af10-1d4a54eba49a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9419445-c7bc-bd0e-edde-daf3fb346002" executionId="93153866-0bce-4195-a4c8-b787bcd4e4be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f5b43f2-bd1c-51f7-b937-2b7a6d72646c" executionId="044a9bcd-1c63-4499-83c8-7baa014ac4a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8df2ac41-3169-dc1d-ca3c-a2c3cf53f1c7" executionId="2fcd2f06-bdb1-4410-9d96-c63e3aaa3df3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="481e09cb-ea8e-6299-f675-550baf99fa1f" executionId="45141588-95cd-41db-a821-3edcedb8b00a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb28a732-7c20-85d0-2717-7553dd1b18ee" executionId="fa4a513f-5c9b-47a8-a7ab-fc705e053102" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69e4a161-d4c1-6d8e-ef67-746f44271bbe" executionId="5656cac4-dce6-4ec5-b2c3-bf84260587b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ddc7dd4-7644-0681-53cc-6eaf7a50ab74" executionId="23e875db-87cc-46fa-95e6-4eaad66cea7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="114b4529-4400-f8bf-b571-dd394abdc720" executionId="abc176ae-c21e-4bb0-aee3-5c4421847e1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4b714dc-1764-a355-8d55-f74348bff8a2" executionId="1040588d-734d-4939-b743-66134a1ed0a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07aef847-d0ed-4f9b-dc78-586030530964" executionId="52e36515-bcce-4f8c-8aae-9880effde0c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56d29d17-6198-7751-3344-8e738ff58fc4" executionId="22541276-d8c1-4b82-aff5-ed3e772a8288" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8d4c231-c004-9147-067a-455bf39a88ab" executionId="499f5234-52b2-400e-bd28-6e3bd960ea5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddb5cdbd-de0f-2b49-2754-724ad0d65a4b" executionId="0ceb4003-d53f-4363-946b-c5c2c6a82f21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6262b297-fd7b-04ca-34a0-a72d272fef08" executionId="4771b96f-09a0-4179-95ff-219b9cfefb36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="625a8520-0f7a-f525-58e9-af1f8eb23dbb" executionId="c05f5ea8-166a-426c-b68a-e787fc3f0653" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c4ca1b5-fc67-9560-ab21-189a9af07180" executionId="aa0ac773-7268-44aa-bedd-7629b2dc74f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f279bb56-26a0-1f9a-2654-8ee7faae7551" executionId="b58fe8cc-65cb-4ebd-adda-f1547d4de577" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="44cc864c-c7a1-e2a0-6c60-2d46344ad365" executionId="e61b0e43-89f7-4ec2-a577-f4789f6585a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d09990b-fb3a-137b-6b4f-cd71517ff384" executionId="bae706a9-ceed-49c4-a674-d21dec5961f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d6e6b64-215d-278a-b5d2-ba87784c2865" executionId="9e77c9f2-40fa-4d57-9632-66bb00802f8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ebfb59e-4d50-c23c-3fe4-54001fba7b92" executionId="71f4ea1d-c79a-4f07-a6fa-0dfb6a1e3697" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="627327bf-75f2-71e2-ec61-0b0751191811" executionId="ab320255-4102-4328-a323-27efe44e0edb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9563a5e8-edc3-01d8-67e4-c497c8ee3283" executionId="4afb3d7f-0b4d-46df-adb7-602dbb2bda38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="101e169a-b910-aa6d-481e-d04a99bcf24f" executionId="091a650b-b694-4cb4-9f83-a609110d60e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f9df33a-15d8-9363-fa15-d829c22c7631" executionId="4599475c-6f39-4262-affd-e1bb83b117cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2df2d92-05ed-6b98-3118-e9ad3e95bfc7" executionId="8bf95a02-c753-4f54-a8ce-f20aa2cf0f16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e1da831-283e-c51d-73e4-c8b3b7762473" executionId="b5ed6ae7-2ea4-4d73-83bb-f66c48eaa447" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a93da7a6-b15c-a772-d3e4-f2e00d18236b" executionId="cb5b771c-2816-474f-af2b-ffa42bf4cf3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42791c29-344d-2068-00fa-c7ade30915d9" executionId="ddb0ff1c-2c1e-4748-b7be-ab9f8631c195" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86c330b5-9d10-0731-3f25-7f6cd8f61e9b" executionId="b8a52c20-9542-4820-b761-c1a2cc88c141" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d82a51e6-211f-b58e-b28a-8aa3bbbe7d32" executionId="ce5636da-bd3a-471b-8ae2-4b4dbf038aba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="566657be-9a21-ffeb-e2fc-d50069bdb6e2" executionId="e7f5817a-232a-4cce-96ff-c843a9ebe03b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56826720-405e-3aba-98d4-21fb65e5b5ca" executionId="0bb69088-b189-430d-9020-2a8c695bf22a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab233116-e669-53e8-8fc6-0275258c322b" executionId="f4eab7c3-d4c6-4e98-a2e6-4f82cf022d6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe24ef45-09fc-753a-529a-135dae94ef06" executionId="66dbf4ac-5dcf-46e4-a9ee-ee90832956a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="977f00cf-b737-ba6a-64a9-c7458a124c3f" executionId="8e83e492-75e0-4636-8d4b-dd265edb400b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8ea2707-02d9-4b6a-eeae-4c63c1b98208" executionId="2c8477f5-56f0-45f5-9a8f-b1cde91ab604" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73030872-9fe5-78a3-e123-137d72e47a68" executionId="b0b0743e-df7b-47c7-a1b9-67448ac8fc79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5730365b-4a4f-4c55-6a4b-a8b5381ee021" executionId="6d5d3c9f-89ee-4d94-b161-56f9667fb7c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="641a7b3c-8dbe-59e5-25cf-666fe8d16544" executionId="e9edecbc-f577-489f-9af1-cd55d15a478f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c649c0c6-420d-384a-d82e-29175b911cb1" executionId="59151b93-4456-4b88-a4f4-9f42d866050e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75a4b8ae-8d50-1ee7-aaa8-5bca8a21ed8e" executionId="a5f97539-6863-40bf-a970-3d07153aac1c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cea2b52f-1881-7260-794c-706088d868c5" executionId="c979234c-07ce-48c7-ad9c-ec9c0214a53f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7790d118-6bb8-107c-aaaa-8b02de5e0897" executionId="d9e98b9d-8509-4c7c-80e4-5135705b52d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23deb1fc-2e8e-b1fc-c13a-ce2d7255f9b0" executionId="5d6b4c00-4723-4a63-ac6e-5a91bec3c6c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddf005a1-7a61-5a8b-b241-b6033981e872" executionId="b367a2e5-46d0-4a6d-af64-713bc4b855c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fdd6d21-2bc2-306b-1ea8-83738a286047" executionId="a54f2371-25f3-4ead-897f-476daddb1e69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2462922-1185-3094-4672-836f2a428f42" executionId="50665f1d-84b3-4440-b01f-e08475f5ee59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc59fed2-e4f0-09e5-283c-beb1ad2d89c3" executionId="88786c8e-9284-4490-8255-4df4b799911d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bcea128-aa38-b86a-de84-24399800363d" executionId="1a387e36-64cf-4b95-b8cd-ef4f96e51b2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89ebda0b-9627-b6ce-1fba-d765f98f5e22" executionId="2990e55c-a238-4623-bac5-9b21040f8fe9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c3fc3d5-03f6-d947-cb4f-8ab0b4c8df9a" executionId="54f844e5-bc36-4f02-821c-81372be69cac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bca85e89-b229-2eeb-4f39-28130b9b10f6" executionId="ee46ae38-1766-46bc-8ab2-c44311fff409" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96423b6f-6772-8c83-9a94-77ab2204c5de" executionId="1824a70d-c118-4874-bda8-52651220239a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7c9d2bc-5edd-4cd4-1c50-ecf8e09afb27" executionId="0f6b5e04-837f-45d4-beed-121e0b022776" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5d9ceb9-d44c-f81b-3648-57132569fa6b" executionId="230facec-3b41-4498-9ee6-29aeedd35911" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c809a6cb-086a-3572-a2d4-a7a9a30ffff2" executionId="d6587847-19e2-471f-a0b6-fad2e51fe326" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be3feab5-257d-694e-1353-572af9f1cb0c" executionId="1ca7d21f-c640-43ad-99ca-0868b73e88cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bb271d9-6599-f129-6caa-befb58d5e417" executionId="714877f3-35ba-4734-a000-6be833cc86b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc8159fa-efaf-bbaf-76ba-587cba99aebc" executionId="e9202330-f11a-493a-997b-beacb5e7bb96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c87d3e8f-d9a4-e676-9f17-6d68c48380ca" executionId="b14d708c-1425-43b4-a3be-6b05502e9e5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74210cf2-2bec-8653-8d79-91caa831e31d" executionId="f159c021-4aa9-4d81-a9ee-28485ac85e0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1ff199b-7d6f-93a9-2f75-007f5b886c7f" executionId="bad7383c-7ae4-426a-9f53-be5ec857bcb4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4612ba2-91e2-17c4-d940-d1ebd09dc16f" executionId="d3d4b533-acfa-4f5c-8f20-a71a0cfedcfd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b489d305-0b59-98cd-dfec-481ac3164301" executionId="090b0e66-0652-46f3-8ca6-830c71342451" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd26a307-e0ac-1c6d-82e4-dd491b9195a8" executionId="021148c8-4aa6-4498-811c-c27ff7a14fdc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c3b3aca-130e-ce79-ac21-f8d1e8a689d8" executionId="95015eaf-0278-4aa6-8849-0580bb074644" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13d8651c-47b2-cc66-8112-0d5ce8366308" executionId="29c3ea1e-e281-498e-8482-71b751d856ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff745070-d32b-b5b2-fc63-e863b1ba90ed" executionId="868eca14-8b6b-42a9-a8f9-cab0afd895b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3558819-576c-8c39-7e22-ae9fcdd69aec" executionId="6dfbe033-2228-49d7-8c56-4ed288bc7ad1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dd3e22-2f4e-1a7c-734b-be4e15f090f3" executionId="bb799368-655f-445e-b53f-6c56fb2f7dca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dcd6b635-689f-8e95-18f6-1b75d8e71214" executionId="0f013244-dcd3-4834-9358-2b60a61e48ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="603d33c8-84ee-1096-4481-3e4534b36ac6" executionId="5ec31103-2a28-437f-a09a-a83b3e8682b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce2eef36-7d75-7b9d-cacf-5f7e6d3f1df1" executionId="3ea443a9-62b5-411b-a52d-51eca9b984b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47cee45b-2205-9030-50bc-e2b972f36765" executionId="bbcab57e-913e-4f94-bfee-f9aa72e25d2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0feccda-2425-3568-d557-c9e790e35e6b" executionId="e9699ec2-f66d-4b88-b7d9-352015bb7478" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f3935e0-5e80-7863-6f72-7bb51fafe025" executionId="ad2d7ec3-c144-4190-8417-65474178f888" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a3413bd-4701-e4a3-0b1a-434c3bb62f23" executionId="652d38e8-35bb-4e8a-982e-5d19d31fe3ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4d7ad08-e374-59cf-add0-3b3dfcb42154" executionId="ef2143e8-6169-40ef-86c9-fd9c81454d0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3abc950b-35f6-2fdb-1885-6727b1ef844f" executionId="18a14eec-a410-4ffd-a83b-d6364cee6965" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34fc7beb-c521-a483-312d-58441beb1bf4" executionId="3584de8e-0bfb-445c-9bdb-db88f9e1cee2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94da6f41-4f40-b8f2-d2d3-62479f2af42d" executionId="8296f352-a3ba-4f4c-ab2c-e80ff31e4683" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3486540-0af0-cfc9-8e6d-799b23b0122f" executionId="b6db068c-eaf0-4cc4-9305-bff7bd16e250" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0b6b962-025e-af6d-70f6-0adc0d585d13" executionId="9e80f874-7a9a-4b41-b9b2-9724a5f26fa9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="475ca5da-3572-deda-fe26-b17a160e440e" executionId="c6d3c944-be4c-443b-b896-71dfdf341dbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="778228be-94e4-115e-9f90-b5810ba9f7be" executionId="237fc2e6-7114-436d-8465-fcafd22cf89d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4769181a-5e3c-cedf-d36c-7328cf7af390" executionId="d21b06f1-378c-4125-b304-8df835377384" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a4a4463-b091-d7da-153c-173264ff2240" executionId="5524d542-c324-41cf-b82a-31619fc3825b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87f5185d-4b3e-bf18-7b43-7d1cc0ffba54" executionId="4c14d7d8-e274-4e1a-a853-369d4ef85190" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c45d074-387b-573b-2e0a-51a2f7385612" executionId="8d227e90-7660-47f2-a029-8b924d2fbe93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab4501f8-6b42-73c4-3329-ded45257416f" executionId="72d4a877-eef7-41fe-aa28-df22b796ad59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02d979d9-f5d5-4ebb-6257-416210f1d06a" executionId="81d34ed8-d54d-4125-8031-cc820fc831f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b25ebda1-4b3c-28c9-1391-287108f504d3" executionId="f87a48ac-92dd-488d-a20d-95e36d45e4f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="169bf705-1531-8bca-9199-1d46e1ec91be" executionId="738fac98-59ac-41ca-b321-44772b2833e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="197ebdfc-76e5-dfeb-06e3-1b0a7c3659ad" executionId="f5edd46d-311a-4c0a-b3d4-2e82a0e191aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9358d858-0d07-2f3f-113a-093c5e394e23" executionId="2e767a8a-5c87-41ad-be6a-84a2f42b9ba6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="726ca4fb-3893-04da-0600-871c1729012b" executionId="752d41e1-50b5-47c4-9959-607ddb444153" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a2e63ad-0b13-48be-aeee-82ae3969b847" executionId="86a8bc82-f6ac-482c-a42a-c7abcf69bd61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29c35deb-75a2-534f-343f-33dc1c8f67f3" executionId="b6047576-aa88-4ece-9654-4b56dff9a70d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d887c0e-5a96-2997-eb6e-044c542c621b" executionId="9e425744-092b-4359-89e6-4e55fcf715f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5af78dd4-937b-3fc0-e9b3-723050c16094" executionId="1cdc7ed1-e4ae-4be9-be89-d46ed0d24716" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5df97783-014c-6ecb-c920-cc279e3b7cea" executionId="d4aa9c8a-b871-4371-9ca1-d69792135e29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6f85034-7c6b-d3a9-a00e-49934b44cff4" executionId="b7bc296e-76e1-4608-a121-5516c35f1b42" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6333b374-22b7-36b3-0dfd-8e04ada13077" executionId="ff22dcb4-1372-4028-b3d1-c2a5fe3a21fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8fe67bb-e07f-ae57-7127-7acdd649f324" executionId="98d9a949-d459-4156-bbfc-c7e7795ffc59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75f3044b-b789-1838-3d52-c7c57e56d64b" executionId="ef2cc2dc-f2f4-4f26-af1d-94aff3ecb14c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79039be2-27c0-022a-c307-08b8bbdddbb6" executionId="00745c9b-ae3c-431d-a768-6b30dec5370e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d0b0f61-ebe7-5cf9-b1a9-e3ca8e742b39" executionId="745f10c0-2689-48b0-a955-dbd0eb1f0ccd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4c28988-d268-5c5b-b062-da0832d7c71d" executionId="43c5894a-f0c1-4e30-b4a9-fe704b12924d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a11ac9c0-8c68-345b-004b-14455897dd3b" executionId="78993d55-6ab1-4b9f-b6b3-75e62202263d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6233d8b9-2b76-27bf-f094-7967368b8f2d" executionId="ff4dca96-ea00-44f5-b100-fad797944df0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8fb3ef76-c78e-5994-60a3-484b8e103b71" executionId="3d5e6979-b88c-4462-aaff-8dc43313532a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e74c94c-91f7-ba0b-a90c-45d0e8e84c53" executionId="7ce38daf-8852-4a7e-825f-aa902e5d0340" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="424851ad-c809-0399-24ec-9fa1c9512f77" executionId="96761132-7feb-44e1-8fc2-0d3ddfa94ff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da871efc-364e-61ac-f0a1-3aab93ca62e0" executionId="76cd6e57-0fd1-4b67-9770-e53f3758bb71" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b94f1a0-7eae-1775-a1ae-6821c88655a5" executionId="717ac29a-8572-4b1a-82a2-096a0842a9b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3ef1e61-66fe-7efd-3646-5d7d477cc23a" executionId="18c9354b-bd2f-4c0f-8222-493752d7f197" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6832806a-cbaf-2811-b635-075797f068e7" executionId="ee1c694c-587a-4048-b451-e6814e785cc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="62167bdc-d7b7-8393-6381-609ce2f273c5" executionId="1506e42f-6610-43a6-a993-eb2d0e0567a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08437775-c8ec-b30c-cbcf-8fabbacbc360" executionId="5a925f26-e8b0-406d-aec6-9bf701196eb3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53c0e48f-b680-9e78-bd30-f5a0f8485756" executionId="b68c56f7-ecf1-4971-90fb-c07b531c8f88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71c23423-a394-0657-0020-e7186fb816de" executionId="3a34ae72-894a-4ab9-9219-7348836932d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5577a1fc-99b3-793c-96f8-f70622e39fce" executionId="9eb097bc-3b37-4f3f-9d2a-594d9c232dc1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a79d212-16c2-eefd-a8cd-5f4d4c9edc7b" executionId="c2f94dc9-eceb-4886-9979-5556fd337248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aac1a977-b439-6f21-ea6e-6d2600155d96" executionId="03c29a89-8675-4428-be11-bafd3978e034" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="061e2812-c4c1-0b99-48d8-b0161b9d4f0a" executionId="a2311ef3-679b-4a29-b7ff-ec3b62bbeb9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02daa515-0baa-3d23-4865-c9f46b713f00" executionId="9d2e14d0-2be6-4db8-b03b-fd1498e67d52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08b590dc-717c-c757-b69b-ebcc9e0d3001" executionId="6fbb8dfa-a142-48e9-a45b-b737a94c6f5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93fc0752-902f-5bcb-e0fa-6552707ecb89" executionId="c7f62d7a-6ada-4500-8cfa-302b86e073e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93b8eed8-29c2-1c92-494a-ce2d96c118a5" executionId="8d446419-4b45-4978-9dfa-18a7db4ecbaa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4b0977e-9ef8-fe01-8470-cc65adfa6479" executionId="f71490b5-3f27-46a7-a4c4-ed8892edb4f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4ab7874-07aa-12e3-0e1f-94d137641bd8" executionId="41502724-abe5-4ed1-95dc-642d2b7cbb55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87f39797-68dc-dbab-5c1e-3ada9f9086b3" executionId="a217fc40-66d7-4f5d-a2e7-fd1d73990f9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e8de1eb-1662-6184-f0bc-9c16a38c2d75" executionId="23a66165-7160-4125-b649-15558886d5a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5e14e2f-3aaf-3da1-227f-3529cd4c7ef1" executionId="a9b2acc8-fe11-4c6c-a226-dfff9f3112f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="602c134c-5ea5-0e84-368a-fc20e9d21bd1" executionId="72f8e67d-ed11-4bde-b2fc-ebcf10689a23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06f6a57a-9244-7cf8-9188-784e694af20f" executionId="d250a6cf-1338-4cf6-b74d-d63f776b400f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbbb5b12-4ed3-ae86-d182-b6988ce3b545" executionId="9ca26364-6c5b-4255-a4a1-46e582e6d3d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="341c6df6-31bb-cf23-c657-8a478320087e" executionId="5dc45993-c856-4ff4-bd6e-8492c13bc7f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8dd36c6-6b29-c1ea-736f-fc398db6aca0" executionId="c613d2d8-324d-46ac-b2be-40d717f5497d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6129cd43-f48b-d030-16f7-338898240e78" executionId="25a24f8c-2b42-4bb9-b534-a5e6462436ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86730318-5043-b157-22c1-f1a0d72833ec" executionId="bfca530a-895f-419c-8f5c-59d057163e4a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc2c025d-7ef7-f2f4-eacc-c40844896fc5" executionId="ac4de603-5ac3-4bc9-84d8-98a62b383454" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8249eb7c-b8d5-e989-66ea-d4cd9188c4c7" executionId="11b5769f-afcd-4396-8836-94cb238e9455" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc3ba808-cc9c-3027-c16a-9cd32c8dde28" executionId="7daf6ee4-9eb0-46bb-acac-bfce61811145" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17613e44-024e-e7b3-42f3-9d0366f34f49" executionId="f41490b2-55e7-487f-af9b-93e8e39bb604" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5efb945-4cbc-fc8b-c033-2133940017ab" executionId="5d6ba43e-86ac-41cb-9cde-be69ddc72642" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="668d4a85-5931-6d95-ecaf-98d580c86473" executionId="5fb7f8a5-8127-4276-9077-d225409cb29d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5165c077-3975-ce69-53f9-299aac70d090" executionId="328a6d1c-3813-4a5d-a288-42e724394749" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2e2b613-9e61-1dfd-2dfa-ee963b6908bc" executionId="82329c50-061a-4e73-8464-536f78ef2279" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ce1ea39-5eeb-f3a2-6e84-cb6522947fb5" executionId="43ef2720-4e06-443f-8431-df60281fa5ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="092b54aa-5a8b-523e-4c62-6753045fcc57" executionId="b47cb17a-43aa-438d-970c-a41a2b1db75f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d086f8a-d319-8719-3091-bebdc9937485" executionId="3190846e-f02e-4a54-a243-22205994b2d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85f93516-3e4f-26f0-d82b-c7951d8e363b" executionId="6c8fb37c-52a4-4a48-b746-f0562588a69b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="206d99a8-15ed-4aa6-480c-aa2d34516e87" executionId="612a83f4-1ea3-48a0-ad1a-da8115917edd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4607fc25-5f3e-02ab-2368-fe4effa0021c" executionId="e6cf54ac-5663-419c-ac8d-1b3e2f0eb7b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10d908b4-9bb8-ad9e-8b05-f34d17043a16" executionId="026bfb81-74fd-4439-9b44-dec17cccec0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d3c66f8-547f-5cc9-11eb-8ad9089acb74" executionId="b8982c6d-8b3d-4360-9f68-636f43208e93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91d4c3fc-9d5d-e52a-0805-b3dfd0aef057" executionId="d1811388-57c7-4261-99a8-e65d0d1982cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9a2657e-4643-a783-3ba9-56116fd67eb7" executionId="a773332f-51bf-411e-b159-36507c666609" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cb7f061-0d12-3d89-0d49-8156712b5230" executionId="c69edf40-cfff-49f5-bb64-2e4b18c659f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c976687f-2997-76e6-8bfe-ecba1890fc88" executionId="ebc2c2e7-e4f3-4682-9369-1012ded5b2b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f1eceb5-b579-426f-37c4-b8e03cc54c8c" executionId="5823da90-8fca-4918-9b3d-1661ead3a024" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84ddbf26-1b53-934a-88ab-06ef3d3994f5" executionId="10099af2-c9d0-488e-8362-8e79fef6e4dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd575521-b575-59cd-62f3-6b0ca4653cef" executionId="5c0d7049-7c76-4864-bddf-274a353d64bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3895574-3df4-7edc-1d73-355359de381f" executionId="4e94ded5-eef0-4ae2-ae01-508263e3b8ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9fae981-ec1e-2bcf-ff96-35d378008be4" executionId="b8c9979c-47f2-44bf-a62f-c83037ba243d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f679b46-e8aa-1a62-032b-1e8afc34f3f3" executionId="8dad3bda-41fe-4295-a376-1ff74f232e16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5b778be-6e83-f281-6cd5-ab477ee137d4" executionId="16a81b0d-1c95-4ba4-acf7-e734ab5fc7f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e3fad4d-039a-1dd9-3b43-d463580797c4" executionId="f3f48c22-ce44-4aa4-9ebb-2e15fc715e56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a274f952-322c-df98-4865-9404d7d16948" executionId="eb956a8f-53d4-4eb1-b347-c7a9153d3047" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="915b5763-ff6e-5eea-f3ee-32d5aaddbfca" executionId="bc513824-973a-4438-adbb-0fce3bb23117" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b877794c-3770-b355-c32f-dce9c57fddd3" executionId="ac924d39-4de8-4854-ace5-a4645a8ec06a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56a6b98d-130b-75fa-a155-2a7efaba2b9a" executionId="6ac7d70f-cb83-4843-b7b1-48628a3e44cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdef38ce-592a-5759-69d8-c660f97f4980" executionId="f00da08b-3136-4239-bc35-d83832162019" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="163d1b5f-20c7-4bac-0d06-8efaf06e137e" executionId="fcca43a8-e0bd-44b3-8bec-cb10403f093e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41263061-629f-5122-b60d-99058ccfaff5" executionId="91b85773-d91e-4752-b8a8-960c62e5bb4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1b1655f-3653-9fc6-4fe1-c9fa27e45637" executionId="859fe6a5-cc66-4f0f-bdcd-238816f715cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="687e5322-01f1-9d5d-f26f-28aec86ac293" executionId="70fca1b2-985b-48b4-ab71-13e34b6bb30a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f34e8549-0c42-c0ce-c742-9cdb34e9330f" executionId="45b89ad8-13e9-4ee5-a132-4d4aec3e35b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="305ab289-63c9-dc7a-94ee-e12e94beefc7" executionId="e37eccf0-3132-45ae-a1e7-b2c301451893" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0f560ef-6fee-6530-f893-9a03bb1b295c" executionId="6f84a8c2-d723-4d6f-9a2c-2cf17f1d82b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84ef0cbc-5ccd-bdcf-51be-bf8e0949419b" executionId="1c3388f5-1e50-4fa0-8fea-50c82d0d7647" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca73f45c-2676-b873-1d67-02d75f9f9f9f" executionId="8ce03861-dd19-4f96-8c4a-6c70bb7cb584" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9dcbe424-2b05-0810-210e-b35bf8018560" executionId="a03af614-25f8-4cb8-8226-d92cbee67d99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3234bdc2-05e2-289b-97f6-8014bd833090" executionId="cd61da1d-a651-4660-82e7-f992046f6439" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b1cd69bd-831a-1a3f-0980-06fec185e5e1" executionId="a5ae48fe-1ad4-4fa6-be73-044e077bf23f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e55291f-b54a-15bb-9d0e-2b78c679e2a1" executionId="ce902f76-7552-4e53-a4e1-6ea2e6386b15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ca096ea-3b45-67a2-0cb9-d39c1c31e8db" executionId="a2734d3b-1d9a-4fdf-8a06-5c624f7a9bf9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9deb4dc9-04d2-aa36-e34a-e2b267734126" executionId="9cc465fe-0e0b-4558-b237-f53ef031f695" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fdacdee-a8e5-4ae5-b7b1-0dac130a9628" executionId="cd3ff555-bc67-4422-afce-25c7c0d9ee93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac25f40d-39b0-a819-0d3c-3c1118a21938" executionId="3b9a4ee8-afa2-4ed2-bc13-0bcedc220824" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3cd12a9-19e3-aa4d-48c8-bff04da64316" executionId="65aa8fe4-073f-44f5-ba2b-b733cec057a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83c99561-3919-8987-c084-63ffa77ddba6" executionId="e9680b32-46bc-46ff-b4db-46ecdf2766ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a3f14fa-861a-97e1-92a5-516888056496" executionId="62dab833-34fe-4f05-a407-d1b95f1ead70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f67854d-8914-4da1-fd11-d2897634ef0d" executionId="19159ccb-35da-441a-bd04-2fbe637251bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="790420ce-dec3-eb6e-8248-7f17368d93bc" executionId="7209dcfb-0696-42e5-98d7-5ea5ac24e98c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed347eee-50cf-246f-7b24-33c602d5ae12" executionId="fa04e6a5-17ae-4df7-a2a7-b8b411619c06" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="101906b0-6af5-135e-61e4-0c0935fe0265" executionId="24b367e4-4f77-43b4-abb3-435e9907d030" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2bca085-7c67-7a1a-4bdf-2f4dc33da277" executionId="a041d8d8-fd75-4815-b6b2-7e664a4c280b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6512430-411e-65c0-b613-a1a83692b99c" executionId="030941c4-8880-4493-8d34-32a99313ca8c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99a93807-9ccc-aec3-dc6a-ad36cd077f16" executionId="ec6b595f-0870-42f0-8000-0fdf0044d23a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51d59be4-7d59-dc12-37f4-0aae3349a615" executionId="ddcd3cbd-e582-48a9-a6bd-878ec8bb3372" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14bac60f-04ef-5b16-0736-1c995275d1c2" executionId="7591ec9a-c487-477e-a555-3cfb965061d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e66a33ba-f11b-65a0-880d-89261eebf08b" executionId="027cd8d6-c838-4782-aa07-f6f9a68a8c91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a70b3d60-f4af-e58a-9314-8f0b47cd8cbc" executionId="0ac1afb4-8896-45ad-9625-4875372204d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d538811e-7b8f-10fc-243e-1ab214d5bf95" executionId="14b6beb1-239c-4732-a1f7-31bc5e74e132" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="582fd368-2777-2b54-c1ec-a082802a6686" executionId="aeff57e6-192f-4b82-a154-2212dc4cb0e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8fcae20-fa53-2a74-662a-8f6aec8a4e12" executionId="55a15823-f33a-4b19-825f-4e9086a62077" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f77cb7d-81fe-c9c1-a6dd-feeea64d7b94" executionId="88b2a8d6-5546-4f29-8cdb-3fad4938fa2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6ac5a1d-7351-5915-72c3-f27b40ed69b3" executionId="32fa6e24-7eee-4fd9-9bb0-23adf7d7ecf3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6875a23a-9cac-89fe-db7e-e30b56441756" executionId="04decfa2-fbd5-4246-9468-976cdca78824" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af6465da-40cf-364b-3bda-a17184c621fe" executionId="7949e48e-4d12-4539-bfbc-8096faa9081e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ffcb725d-0463-cbeb-e70c-8b29fe642664" executionId="264dd7d9-b2d3-44f9-9bfd-18ec6a448811" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a6ca602-1c90-deaa-3432-848fdeb65bb4" executionId="161c4051-eff0-43c8-b624-18b563f0163c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fbebd18-5659-e81b-997b-22463cfd278f" executionId="5842a870-8b9d-45c3-8ff8-6ed16e280cd7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32d68111-5fc2-d40d-1dcc-aeac84a1b029" executionId="6e529173-9c70-4b71-b504-024cf0265af1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de168e5d-654f-536a-50d8-310009d9a949" executionId="4bb926b2-1a4a-48b8-8629-ba91289f0085" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ba528e1-21ff-98e2-b2ce-f2aa9f3e4554" executionId="4a5d7c59-6966-4e97-8b9d-c51be1fa8fee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4db8c771-8666-030d-43cd-077afcc871e8" executionId="d912df7a-97b4-4dc2-a372-cdabb9effb6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22407006-8b61-9da1-2321-fe2679b6238f" executionId="3c6b36f4-5390-4fa3-9b98-91dd0d9f5834" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ee6ec60-7b9b-4393-a25f-cb03c018c52d" executionId="21ee39e3-8f62-4986-9c21-a405c7acc7d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e48b2af-1dce-232e-e1fe-5c4721430113" executionId="78aaf205-b41e-4c60-8537-eb3fe7efdc83" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd648a34-57fd-f805-51cf-8347c539e2be" executionId="25835111-17a2-44b5-9972-db037999b263" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27f8ae5d-88ab-1e33-0095-6c7936818c2d" executionId="07531379-8d8f-4ed5-afbe-9fe4e07165bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23d4be0b-8758-9fa2-973d-43bd9c9b81f1" executionId="fdb99b96-018e-4547-b46e-76c44e1ecbb0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f7b3ee6-4ecd-1b4c-0541-8fb97e1df69e" executionId="97c559b0-e152-4c0f-a417-941cb751254a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06c7b88a-f2ff-a2a4-4bf9-e03a3aec969e" executionId="ac25cddd-8de5-456b-b8e9-ace4bcd9130a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ead2b41d-cb5e-6698-404a-f4013e5f8a6e" executionId="bb924eb9-eaf8-4029-b339-59692dd8c6d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a90b4ef-fa83-2c4b-2f59-d5d74fc67a9b" executionId="43bab953-f626-4da4-a6e3-46bae859b617" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9390dbe4-f245-909b-539c-51ec2778d67d" executionId="edea6f70-9645-4306-b044-6b939303a8a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="777fcf8e-1d66-fb45-ddf5-695b552b306f" executionId="2f620318-c935-4864-8dc9-7ef61d06b3ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b26828a1-9f3b-9467-0912-2bc4297e7cc8" executionId="290982e3-41be-4fae-b38f-80658067e2fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0bee0aa-6a1c-f1e3-9a10-b90b2995d4d3" executionId="a44dd9b4-7928-44fa-9bd2-4828b65d59d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2150454d-d84e-7ec3-e5ba-143fd6bcdeeb" executionId="052a84ae-65bf-4949-8a90-e6a08b5b1163" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b50cff92-a8ba-8ef2-db15-04f14f76857a" executionId="5adb5881-7e79-473a-b6e1-57fedc6c2c9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b68a73a-2978-36f7-3551-24c6ba58d561" executionId="ac5391d7-8c5a-46ca-8c96-0570276a9e01" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9c52dcd-a3c8-9f5f-68d1-ff1ab85741b7" executionId="7c57666a-7f5f-4413-bdf3-f0c801a933ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16d3b7e8-d9a4-415c-9c79-fb494ced8e8e" executionId="43188dc9-b9f3-427e-9968-5ff85c9c3bbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef777a3-8eb2-d44e-c06d-6656c44532c3" executionId="d6325983-a7a6-4aae-b131-650dae5f7453" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5f309eb-034b-6a37-aadd-a92858c9ef26" executionId="ce664204-28dd-4a52-9ab6-5d803f547ca9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a6ee734-8030-4355-c909-3b14d4eaaa0d" executionId="2c606166-ccda-4331-a57a-e2cf0e8ba7a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0d1b0779-71c8-303b-6f41-377cde531eb2" executionId="509867f7-fa26-4a34-91f9-ae1c30ac9e55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51833e43-be4c-fbf7-4e24-a0606ab2da05" executionId="b8042789-26cf-43eb-8deb-556a578526ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94fffee1-97b0-86e7-30b6-edf1d25ab40e" executionId="5004170c-bd9e-462e-9b8d-645e7d2e5248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7048cc11-4f28-654c-e5b9-ed4a9343880e" executionId="1463960a-695a-41d1-b504-c60da3bc15df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ed41bb3-0b3c-3ecf-6d35-19d04ab90a4f" executionId="cd4e36e6-1bf3-4eea-8992-11aafab51e4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb2a4720-1008-c1ef-cc72-d43fb5a00805" executionId="1273d465-5168-47f1-89cf-26c1fd2ebeb0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef192430-313d-2db2-1482-b39c741ad812" executionId="866a7550-2fe1-4274-be13-f617c32302e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d643e0ab-3cf2-e914-6054-4658a11ec459" executionId="b55386c4-6cab-496d-9847-39baea13b2c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35538943-d80a-bd7c-6e38-f8afe172a1ae" executionId="3378d846-b2c2-4db8-bf10-f7a63b20b961" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d69cc4b-bdcc-bd2a-1cfc-d03d16f548bb" executionId="23751e76-7ec7-4550-8df3-864a4c7ed8de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="394db978-6072-84a4-ec1e-fb776cbf1410" executionId="46ede7a0-73cf-419d-acbe-a92f1fe8eb8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9886ffd9-cc34-4f96-6272-cc7c353f348f" executionId="cde57e03-7663-4032-9fc7-c68bfb8abfe8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f76b4a7a-89d2-afc5-1032-a199a8eb90bf" executionId="6740c5fb-f62e-4ebb-9858-83904f87cbc6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3fa40d6-0a2a-f337-b7d8-7c80d2551175" executionId="fee45d45-c01a-457a-9ba0-5c509390e348" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2050e47-0b1b-92f2-ff4f-f8d0e320795e" executionId="1a624055-6a6c-4d84-b598-fc750e9bba58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a20a62c2-26c8-5fc6-87a0-2633f9ac14b0" executionId="bcdc03e0-fc1e-4b09-808b-a44daf5b5ca4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1910b6-7e6d-afa8-d25b-4a6b65ea8029" executionId="b80b4fd6-e30b-435b-9348-4c7aa21fa01e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01a37e2e-edfc-b8ae-f8b8-af8165060569" executionId="89e463bc-7edd-409b-b05b-4a044efa43f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48c3a4f4-590e-92e4-0df2-236652912d51" executionId="6ccf4f5d-65fa-4904-9810-a21d440f81a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47752ca7-5b10-0993-2293-0dba21e5d245" executionId="440908d8-5ed6-4d8a-85f8-4e668d2e474e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="12d98f25-c244-1fab-2f65-18107c158b74" executionId="ffd5bffd-0e1f-4c3d-bf06-47d4c6835202" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13b9ad0c-e0e7-6e4c-7fae-4cce0283d90d" executionId="022b3668-990e-44ef-9223-d805ffc073b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="daa61973-3271-ce89-c31a-bf954d310bc6" executionId="78e556fb-5972-4699-998c-c4d81ad56595" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d5b4189-4c7b-d26c-abd9-132311143c89" executionId="7eb04e7b-57b5-4b18-b55f-78aa142f3277" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad09f1ef-ec16-63ee-7611-5f39825a4319" executionId="80c5c884-a539-4833-800b-c9612c6a6678" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="473cc30c-6a9c-6671-a1ee-e3d2218f5aeb" executionId="3a8f5a94-43d8-489e-992b-f03097e1c321" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ea05522-f318-217b-a7b6-8a7480b836a8" executionId="835c9157-e02b-4f51-8835-aef4ccea3027" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35ddbf76-523b-d161-31dd-d296d85bc2dd" executionId="af6d2d3d-af3c-4322-9dc8-6d577e598652" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5300a261-8f98-ab75-b49d-1ba81493d8bc" executionId="92960d2a-323b-4ec4-8fb1-cf46d42471e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c610144-974e-c8f1-28dc-46031984cd4f" executionId="52c8cb96-555e-4e06-aea3-bce6792d5869" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dff5b088-61b4-472d-cca7-6329cd40a0f2" executionId="126d2a0c-73d8-4c06-98ca-d5f64baa9f52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a282d225-4b2b-8f00-d530-5e69474457bb" executionId="967bdc54-a5f6-4072-adb1-d7029f2a5e44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3dc236e8-2ff8-fc22-aba2-afb0a14d0609" executionId="8a7c8932-9741-490c-bcca-b02b3013df96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="704e3035-4eb8-5208-1539-178ed2721509" executionId="7dc5e5ea-e13d-4644-b0f8-21b660aa796c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fae84f9-cf01-25ec-851d-b4141afd8efd" executionId="0ababb94-ff24-4f45-ab41-e23c9c387993" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d59c78ac-b503-9855-e35f-d56aaeac37b4" executionId="0faaabc3-9fc0-4103-a426-e5a54f8da60c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a040e65f-ff03-c706-2948-61966d6569b6" executionId="eb3fadce-2764-4aeb-894e-3e9c7dd03ff6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce87fe44-1f7d-e6e9-5f55-2c1a5abcc07d" executionId="06085427-1f68-4b84-b0eb-e742b4a33315" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e5e164e-b8fd-414b-cee5-2341c455e80a" executionId="17ccb551-3a6f-426b-872d-dd2fef914393" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b094741-adbb-ad4a-1150-94a18f422c24" executionId="6cadbcaa-b573-4178-80ab-1f43e8709f8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4a282b8-f891-a269-d10e-f137d2737a43" executionId="7697fe24-bda8-4d54-99b6-5871a3ebc819" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f35ba20c-1190-3864-f3e1-a628714dd49a" executionId="f7b9a9eb-a709-4fd5-b5e8-8985d4c4bf66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80bdb5b5-48b1-16db-6ee0-a05c24cb3d79" executionId="ab7773f7-a46f-4001-93e7-c45a6c3167fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1355e3f1-95b6-cc3a-458f-289ea5fab707" executionId="a8badf14-1263-4535-a951-4d9680e96c5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c4ffcdc-3614-deee-1457-e8f45d7742ab" executionId="e4a5a332-3a4a-4ef6-bb4d-25057268dddd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="108df3e3-b792-4d18-72bd-8867183f06cc" executionId="6e0b7838-b6fd-42cc-92b3-52021e8248fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d61a9fa-8b85-2002-6ca1-d969fe122866" executionId="859bad60-b7b6-4cdd-a8c5-70f16824cc01" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9fdb1f01-9b0d-0e31-f85e-1e1b5dc54584" executionId="5b2ecef2-83d3-4408-8e96-d3ec0e67263a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b08698ed-7242-73f4-83c4-338a805baa66" executionId="3602aba6-1835-4ff6-abd4-e4fbfec45ab2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8909d248-241d-63a5-4088-0b7eaf69d0a5" executionId="960747e7-ea15-49e0-a2fe-983d5fef650a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfb42feb-e685-4a2f-56a0-d161530bff88" executionId="a8a8c172-df62-4a08-a176-0b2d89a33e9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d5212bb-785d-5eb5-d44b-4e83eafd21e2" executionId="b22ffaed-bc08-4c25-a11a-af700fe7c749" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3780b5c5-7bd5-f946-bbf8-0d709675f526" executionId="d9ec5de3-56ed-4a0d-9d69-346f7b2e3ba6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="530483f0-be6f-802d-2a43-9219d56c3630" executionId="bc6b4912-98e7-4557-a837-5c6b45e58f15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac742156-1ca2-f768-8f01-02cab9be2bea" executionId="c80c56f8-944f-406a-b963-61c6ec46e5cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6c274df-26fe-a97e-9693-23cfc4dc2423" executionId="096a7aac-6e31-4854-a8a7-6a778a0963c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe546d2c-4689-085c-ec57-e87a9c2d9b84" executionId="0b9c9139-fa48-4226-b3ab-47814dfb1e3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd56c734-11d1-2315-1b8e-93f8819101cf" executionId="f4e80f18-84b6-4732-9f8d-f36ada4c1f87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="169b33c4-7e6f-658b-a711-addb55b8dda9" executionId="dece43c5-1d17-4cf9-b5b0-ad9539b71669" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a2d93c2-d779-4b70-3d91-257a0bbbf2c0" executionId="50bd49c6-ea2d-430b-80a6-d0465fee9ecc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="434cf9e3-f67b-d3f1-9963-f200506a12fb" executionId="ae9a391f-a8fd-440a-8035-c31b34844b67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30b239dc-1dab-666b-2a9d-a48bed38f9ba" executionId="c37b1302-6afd-4f50-9ced-496ea164b025" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c99e539c-f68f-5e6d-1ae2-8eef75476423" executionId="ea510a65-c2d8-49e0-8fb5-41b089d98dc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70074241-0b21-85c3-f018-50178364a367" executionId="aba73a98-a89d-4c25-bb16-4b719e67f230" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24bf67f7-6715-db0d-b503-b3da6f2827f8" executionId="8d855ed3-d565-446d-9227-7c2bbbf660d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7796d565-a64d-6f75-c72f-07dcee6e99af" executionId="d86e9bbf-f9d9-4d8e-bc1d-4f825c53063f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0707c82-671b-041c-140d-4913d07ff376" executionId="a3a91f23-a0a7-4113-8022-39822a0a3e99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="176d8861-ed7d-7406-fd4f-6bfbe3e1e624" executionId="04b2c71d-43ab-462c-90ab-87024441fa65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd9fdd76-97f7-6637-4902-211c64eee408" executionId="a4f1f7b3-8ad4-4a61-9c51-70146432be8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2672b68-9898-06e8-22fb-63297fa83f8b" executionId="cdb93462-d8c4-4400-8546-ebb31eed2481" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8324dac0-770a-3b35-c45d-edc9ca07c783" executionId="acaa22a6-7b37-4b13-a56d-de92d49193e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53061ab1-3e87-afb0-c279-52a7068c96cd" executionId="3c96bdb1-4a86-4434-915c-fd6c0874ddd1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41347753-742e-949a-a019-3d7559f5a685" executionId="7140116f-eedb-4264-9344-ea5cca765c5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5b9a13d-a8a6-c76e-90d5-8a8ce8764e47" executionId="e28d3bb1-8d5f-468f-a5db-f606164376aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edaa5339-64d6-c02f-dc09-e6e628958ac4" executionId="1ebf7bcb-f413-4cf2-a53b-def398faa642" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1f6d016-597b-a42c-0739-c0a32d743783" executionId="c68ad833-928e-4502-b100-f2d5bfffb82b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5097969a-25bf-bac2-af5d-dba7ab907147" executionId="f4960298-77f7-4d1e-85e2-33be3db4fd9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4aa721c-b012-b7dc-f47d-c418c832514f" executionId="13215d16-fcf5-4c5a-9f38-58363843cb40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fad2b24b-6680-5de1-b3d3-a9105a0006f8" executionId="24921302-a645-4590-be08-048fbd91146b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84202444-fb40-9dfd-6799-534a246e10d3" executionId="55ab10b6-89c2-4ea0-a371-a1a30018a03c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e2b62f8-d7a2-e8d9-9808-87ad6dfd68a7" executionId="28120d4c-4377-4af8-8ff7-48cc9b66f43b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4100a79-f523-9dfe-0d6e-0b077341e8b6" executionId="10c77afc-cddb-4df5-9893-8b9a8608e02d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e9db6ed-dfb1-ba50-c0cf-a95a82622c3a" executionId="b7a3e6c2-3744-4bff-85d5-7b81e076251f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="998f9400-d2ac-7fb5-a4f3-54b6cc212210" executionId="eb99ff8b-b046-44e5-ae17-80929c403d6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="476a6a0a-c9fc-fd0b-2fef-dd9120fd9902" executionId="7a18a7ca-5d1f-4e25-9644-795d87f46122" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f0ce942-65a2-8ad4-2715-a7d5c81026ab" executionId="5de4c7fd-cc3a-4ef5-baa2-13b3b3b232ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c30fb19-bbcb-e8a5-3a92-fd0f63a632c2" executionId="73030796-dc9e-4fcb-b5cf-51585e78761f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1fbd687-cc65-5ab2-40f6-83a626f88c8b" executionId="649710fe-acc9-4f6f-bf65-3b5b1a200f61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="374b856b-c756-e341-14f4-bedc0ef17087" executionId="2f242b87-e3d1-4c65-baaf-74f8d1f9dc53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba29293a-14de-1f66-33fc-b64ad2621f42" executionId="3d79848a-16ce-42d0-af33-79030c8bb95c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2dc00c52-2be3-57f9-b44e-ca51ffe61a97" executionId="b46b73b3-e289-43a5-9ed2-7499e56d30f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c439e41-2b48-43f8-fe78-bd2588d70302" executionId="12f1c48a-7eb2-466e-bca1-b69be1af6c7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3ec5a87-d8e6-2fd5-2075-7fb805be3b5b" executionId="916d522d-e3d7-458e-9e80-f79d6a01478d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3513ed47-05c3-618e-d934-3f640b6376b6" executionId="3a108a17-6442-48c9-90e1-7d7fa9223416" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ea8b797-836c-c3a1-075a-1ce27d599bab" executionId="71e6c2eb-c8f3-41bd-bde4-86b179ca4bff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d565c5cb-ffc5-6fdc-1708-b4909d76ada7" executionId="dadd53f1-4e8a-4667-9b5f-063c4530b234" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3d7d6f0-4510-1bcc-2f95-d81eb136f568" executionId="4acbb76b-277c-4813-ba39-3dbc9e737f0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="866d9682-34b9-b6cb-db8b-509d64497f78" executionId="8b07c79e-b83e-4947-83dd-3b1106fff31c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8343b001-08aa-5bad-9d9f-e9ae5d8f1bdc" executionId="0ef2bd6e-66d9-4c7b-9f74-2bf42dd5c95d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad90694b-35de-007b-a23d-4cc067a59958" executionId="987bdf6a-4658-41f3-b7d6-6ca6f7b358c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bb27d552-19d5-f12b-6e25-20c68351c524" executionId="693e038b-91ae-4036-9266-b382f129fab0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9819cdf-834c-8d40-3de4-e0d647ebc1cd" executionId="f0674439-f926-4edf-9b30-0647ef35f4b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2280c6c6-e7e6-1e0a-6a6f-b8a9bab06fca" executionId="969613e5-c1d5-4d90-82d5-81be39b315b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b8b981a-5a47-b293-2358-89ae499a4463" executionId="c0a31b5f-4620-418c-9c0b-3d6922a8e3a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b659306-954d-4d9b-2cf9-32e444663d95" executionId="fe1dfb51-7c8d-4a21-9b75-541c26fd6f78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff4a23-73d9-30f0-2811-19a5dcc65ac1" executionId="3d1fc16c-83dd-4d4d-978e-76aea1d28437" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f408609-7eec-5b04-dd9f-bf6a06759eb1" executionId="38cde186-fa2b-4478-a6d6-17d5970fcb81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f799580-a8db-5713-b5bf-fdd5d866141a" executionId="b78c2004-6984-469d-8644-007aeb5989f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01a11a8b-a37b-6f57-9869-3c82a79c16cb" executionId="1518d9c5-1526-42e0-b7a2-5ab426fff364" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="020deb21-f286-a61f-8c3e-56af19d1953e" executionId="7ec40a25-8bc8-4bf3-8935-756db8e9b8a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0ffcaef-8d57-1300-6329-df7a82b327be" executionId="f82e8192-6e3a-402d-a235-50da2516111e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31e235ba-1d72-8453-ab85-3f772d274952" executionId="1163c610-4b09-4bd0-abbb-fafdf0bee673" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9ecec52-a192-4926-2fb2-f975c18d28ec" executionId="3bc9af1f-6e56-4fda-89ae-c6b2d22ec0a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bdd3f519-43db-cb16-d5a9-130d23b6776f" executionId="53916265-1b1b-480c-b869-29769c9c3b57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4210c0a8-b436-302c-a0c7-8354612c94da" executionId="dabf28a3-e585-4dd2-b9ed-1e3d8d71af66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="873c80d2-6e59-883d-3bc6-f24e502d6f12" executionId="2e169501-d26a-4384-8e34-ba79d42b33c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b51e26df-499f-fd50-88ea-4ded76bfc0c8" executionId="268e7405-9523-4269-a937-06eab37caac0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56891394-0f5c-02f0-89f2-0c7a41490bfc" executionId="efe3bba9-f0fe-4be8-b386-b1dfcba98d29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0037e65-395e-2a2a-8b0e-5cd43ae62081" executionId="6c6fd892-d28e-47a9-a426-5b6574ace989" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0721c4d5-17b9-7b7c-1851-6219c237587e" executionId="105e30eb-f680-44ca-a376-1e11411b995e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9526fa6e-7224-8e24-9bce-9109effc39af" executionId="0432d5cb-ff2e-4dd9-b50c-167c88260c68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49cad0b8-2faf-dce0-0b8d-58fe8d0d5df5" executionId="fa7e2cdf-8efa-4cb6-a821-e7e0894489eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f19d4eb4-b1af-9ed7-7d01-d277bf111395" executionId="3edbd6cf-13cb-4bff-ad43-b669b66375ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edf42284-124c-18f4-1841-d19cade0a913" executionId="9c370e90-6f52-4b55-94ea-a35e044c229a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77970192-e8f5-64a7-7061-0176921f9510" executionId="9d04485f-83c9-43a9-90ff-cc77b9508a24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="668de3da-e200-0d23-4ae6-9180d29586da" executionId="10b91bee-7feb-4ff6-bee4-aa34dfd332e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d670c79-b1f2-a7b1-512c-d1fc547b9fde" executionId="27fc60b5-d0e0-4ff3-a913-050ed62121ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b930009-1d34-28dc-3f66-7de437f049df" executionId="39d21b82-fe14-488b-a53c-7a86fed6e226" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce4e9a28-0816-669b-223e-bdb8fba8925d" executionId="93c1cf93-7f1c-410f-b43c-89f8428a38aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e580a6d-3ee1-64ca-a74b-fdc08768b833" executionId="c858f0a3-5cbe-4093-9cbd-f6e8113512a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="889e1d72-16f3-f90a-e6ea-bca5507a0855" executionId="abae4e6a-d028-41ef-a0d1-1955a1b8aa4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00b08d0a-6119-a572-cb81-5b70b9b550c7" executionId="47b359fe-5e46-42d2-a395-70a369b042ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70720e19-d021-9b52-28c7-c8eb037230f3" executionId="b4536447-b679-4cb8-aad7-2d491e9b857e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a51b68b4-ecb1-2121-cfe3-0d421e95b9f1" executionId="b542477f-b190-4841-979e-9fece958b31a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0651e0d-af41-740e-a58c-36cb5e186905" executionId="5cba5d8f-5361-4068-8e0f-4fe2821b4f4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cea441bb-262c-4495-fc1e-1d7552242a97" executionId="3811da08-0b20-41a5-b4e0-4956870d1b18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad93ff4c-d2bd-a777-86a9-95b7c9e04128" executionId="48f86aa1-6eb4-4ece-8ce8-914af60b7a4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b26ebda-1c3c-7d3d-4b85-dce945ea2fa8" executionId="b4b15be1-1bcb-4253-b644-1c7f9a30790b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61211be4-f5c9-7f09-5865-5de9d00952a7" executionId="6df392ef-73cf-4aa4-887c-afe30e038484" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d9694db-5bf6-a47b-3ab0-9dee227f4d9e" executionId="8fd6ddd4-612a-4ab2-a73c-02aacb01abce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d1e6edc-f017-af4a-4e11-9d37dd5ff123" executionId="663b8c4b-c182-4240-bec5-5e15f22daefe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e7fc613-a25e-d882-c55f-de67e8443212" executionId="e9ab3278-64f7-4bb4-9481-66543393bf2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f770d189-0326-2a4e-4cfa-cacf88844102" executionId="2bd7cdae-fd6d-4469-bca6-72676b8fd2f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e922a3e-2752-2f2a-324f-e6f7ce286000" executionId="d18e9fb9-69e9-42dd-8a44-fb63847d9aed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e5b6e0b-814b-2994-5090-0cdcb803d32c" executionId="477c77cf-ba7d-44ed-ab5d-2e8c8dd7fba4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63eb18e5-3115-c666-2a29-6ad068d51ab6" executionId="67da93fe-e343-4d0f-8ea8-64c0b5e33254" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33d34085-64ea-18cc-b9d5-391d98918d2e" executionId="97bab17a-fd17-49a7-9825-16a4bdc9be49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cabbb603-69af-7aba-0397-5a67fa86d925" executionId="c1c24dcf-60fa-479d-9b42-a3e671e16d19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8254eb37-487c-0d9d-b0fa-35699aa76d59" executionId="2ef8b109-43bc-4ee9-88a5-2cdd95c93341" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1294288-5c6b-1ff0-7c9e-e4879efc9496" executionId="0a025b88-66b3-4a02-b13f-16507d96ee8f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d69c70fb-25a3-1919-4195-e4575f2e97cb" executionId="0f25a093-9920-4a47-85d8-2e4a3c92f25f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e059a0a-a014-9956-e5a3-ce82d093ec3e" executionId="751a3081-644d-4690-a0c9-84c06a263d2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01735b00-4d1d-dfdc-bf6a-9867265adc23" executionId="ca7f740c-6b0d-4be1-855e-b034f2939a75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="278d2fdc-8160-3dfd-8a05-1d698324cf18" executionId="2759ff32-0e63-4937-b76a-e908fee2d389" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="548767c6-54e8-611c-1ac8-184e1a1da656" executionId="6385f101-d368-4895-a90a-c4ba802dc7a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9837ab7-2ce3-c7f8-834a-30ace14ae793" executionId="ba919d93-5e46-49aa-877c-a898ef5aac18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7d80f94-ada8-43a2-f71c-b8ff30a52a0c" executionId="74892ac5-96ce-451d-b05f-1a30716b0753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88fbc2f7-230c-c6c9-2e2d-4a583fce894d" executionId="18470b49-c376-45ed-9281-a53d77e2d6c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f26e756d-8d88-041a-c13d-649383380ab8" executionId="27f629b4-185e-43e3-b6fd-d06f0f23bb3e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3444d37a-8068-9203-1735-87ba44ab0bbb" executionId="92e3514c-dc08-4f0a-8e9f-d4c969c8be80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f33c019-05e9-0aeb-9667-84ecc99ee1ca" executionId="0fbcfb70-d3e6-4aec-8ab5-7d1c5d198206" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0bab2b7-b712-8bd0-2f9a-190c72b0d608" executionId="49f08632-aedd-41e6-920e-d4573e2d37d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0c3f2cb-8458-9f38-8e5f-611c53b57510" executionId="11f938e7-3cf1-4faf-a854-6a1ed3c529c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5c177ad-a6aa-3919-9f1d-558bd1c1c10d" executionId="099cb0ab-87ce-4228-8f9e-1da93e673d86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eed4483b-d886-1a88-3f5e-1794edfb6b2e" executionId="01cab1e8-59bc-4882-9ad1-2e25ba7c10a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5423a2bf-9a2c-a8b7-9566-d8fce8666586" executionId="798d19eb-220c-4f6b-8945-048b5016dcae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a90a1e30-e055-bd82-018b-3888f3b6a616" executionId="2cbf92bc-bdac-48a3-9718-fc369e846ac1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a58712b-ebe3-3373-955d-152d342b0a0e" executionId="d4fe5c50-5814-4df5-8b61-f6ddc8d3351f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd87ad23-e322-0503-008d-7737eef0a110" executionId="0311775b-33fb-4bb8-ba17-810b03daf43d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40edfb4c-86ef-7423-6570-4f3e11164571" executionId="23af55f5-6cb2-4af2-aeca-7062b9bd274e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1e36b55-0dd1-5f06-4f2a-b0728ddd2200" executionId="529eccfc-c8b4-49ec-aea3-608d26771540" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="698dc321-cb7e-67eb-b37c-f721ac4df98a" executionId="b3016554-3b05-4c35-a39b-e032ef107aa6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="301c858d-8830-2f07-e607-66a4d83e120d" executionId="e2c7d3ee-9d6a-4b28-8087-bc205a846041" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f82b2a36-dc7b-4e29-64bf-f23e2d274597" executionId="5c7534b5-c1b4-446d-aba2-954907bf786a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ca94ee6-073d-5728-12c9-6cfec33708cc" executionId="95f96a76-a381-4f6b-8868-7d5472c149c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f5a3707-79cb-f959-873c-edf3c878e958" executionId="9c92aa73-7831-42f0-a384-8cb15fe9636e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="676dc216-c3c3-2d9b-3369-d44a1498b609" executionId="dd141589-639b-4b85-9bcb-9ac474e750de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e601f3c3-acb2-4248-fa55-e9d847a7ac92" executionId="20e1798f-a891-4bc8-8d88-62f16e2d22b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a23078f-111a-f274-38c7-77692604de84" executionId="5b053ad7-cf60-4690-8f17-276f776334c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a9ef331-0687-c587-d3f5-de9248ea5da2" executionId="3e1fd26c-b4ae-4aa3-a80e-f5721ba660b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5750011-f041-ab29-822e-8e5bf311aa10" executionId="0656d25b-7ff4-43c8-b1d9-6abb4a1d11ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49616c88-67ae-b480-de4d-fe1510c78427" executionId="f7dc69cc-0466-4f25-8daa-4cf05f7ad0ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2009fcf-021a-1553-64ec-60c3a57d8882" executionId="7d31ef36-f33f-4634-a6a8-16464d318fdb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8143c1b-1962-f0a3-ddc8-706060923d82" executionId="5a0b71db-4dd5-41f7-a374-84b2c4b56ec2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7e8f769-02b7-efb0-391e-75cd1ec18ae3" executionId="5c8952b1-2022-4dab-983c-f8e36c11c6c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a738358-0d98-1c31-fe50-9911bd511c36" executionId="aa01c19d-2711-46f9-8777-f099e8496ad3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1af9d5aa-4f4d-101d-37f5-9bff6b847f59" executionId="42bd6473-2500-46e5-b0d5-51856c4b8c5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8bc515b4-89c6-0a96-3010-d092e0485562" executionId="899228ec-275b-4ffc-8eb0-85edc7ffd6a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8e8c50c-2308-244e-d60e-e854c5ca350b" executionId="74689a93-1b69-4aa3-b59f-e6e2917dcbc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5fefa066-99ec-3b42-f36a-2a1132d2e42e" executionId="e53bc0e9-5aa9-4ff7-ac43-579c73209d4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66779f0b-541c-007c-a724-97b97741f566" executionId="711b4c10-6719-4661-990d-aeb69562725f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08264f66-e072-76a5-e30f-fd7fb3d52543" executionId="fbca4c3c-c853-4239-84e2-8d8d0c48ac00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6008cbb1-c96b-2538-4e26-48b07bcfc706" executionId="4f18dbb9-483f-4da2-81e5-24b344ce1628" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68b1a906-43a7-2c16-7423-7271a8d4e7c8" executionId="054f5d87-f757-439d-a9ea-3252c2719790" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c03f330f-8bf0-d307-0400-2089618b760c" executionId="39178687-e5eb-4642-b0a5-981f8a540aaa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ffaeeab-4c86-8ff5-b053-bd38d6c7aefb" executionId="8f5c49b2-f7c3-4c99-91e8-35986c7b833e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8404f4b0-511c-9a29-5bc8-5c00e7e12882" executionId="38591c0e-9d31-4bc4-b865-428749a2f339" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af962a83-6338-5e2d-e184-989b6ce27121" executionId="2682c34c-acda-49c7-93af-ac7009006dd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d02b42fc-f4b8-601b-72bf-8186af3a394a" executionId="90b76097-7dad-4fb4-8949-734d16f99c8c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd7d445b-d179-3e23-276f-9e420f3d7554" executionId="90cd422d-29ee-416a-a967-8fa74a198c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5d7c5c7-61e3-d1e5-5ef6-559bdf03dc52" executionId="ca013277-7aec-4013-b5ca-e626f880ec39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04db3c1a-9e2e-4b82-d72e-0ecde4ff1aa9" executionId="67fed126-dd6a-4685-8c3a-c0a3bd560802" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04ed02cc-1006-65b6-5ae6-8d1f09e61fe4" executionId="36ce6a24-421f-4c63-9caa-8544987c7618" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="895bfc18-7a3a-999c-f718-97b48a26d087" executionId="be78d746-b55a-436e-8958-a7c991c0f5a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91dec442-1e98-f1c4-bfdb-35f69b70f9bb" executionId="12cdaa96-e201-4b44-8c8b-8a4338b86a2f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2dadfce3-2433-7830-4f3b-cb77dd1382b2" executionId="18934173-5ec5-47bf-9932-5840361ecd72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4c7c0c4-bd41-5d78-6489-31ba242e6c5c" executionId="33a97b13-d1a9-4345-998e-e6ca7e05a5cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07b91b2b-32c4-5d90-13d9-49dcc248effd" executionId="ccd9bd75-5239-4435-abd8-1d4ac2fac6ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c404929-aac4-6531-a84e-4c7341b41a86" executionId="c2af8797-65aa-49f5-b93e-5e525d479650" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="292c36b2-3355-2fb5-8487-b491324b2f6a" executionId="0887eee8-7801-4b8e-adf1-0611409e69f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8cfbeabe-5a29-519f-d50f-1fa7986e2efc" executionId="7ac0de81-e950-4853-a9bc-2004f3faf372" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1aac08a-f269-0bbf-e274-e31baed8ff5b" executionId="5267ea4b-f1c4-47d7-9bf9-3a2fbdc66e7d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86b8a17b-ad58-f896-f715-d1f51bca7765" executionId="bfe61f8b-f785-43d1-a9bc-eb1e8acf0ed1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f415a706-6309-b096-b079-64237d4cced9" executionId="7a0cbfff-6026-49b3-932b-c0cd40925420" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7ba2ee8-957c-9133-ec07-a324b409ee19" executionId="b8da0897-69a1-4c18-9b07-698f337e52c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b7cda58-bfba-0a8c-939e-e7068d41b601" executionId="41105584-dc77-4886-9e04-d5a86ce75e85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc5267ea-c6dd-7107-7014-36fe7c569060" executionId="c5248d70-35c3-4f04-9f67-0a9a0b155175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="322e705e-97b2-f3b9-b16c-8202b93f7ede" executionId="da7dd312-bfc4-4377-8910-bd950eb3a49e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5601ea6-b7e4-fcb1-ba95-8505570050d7" executionId="89fa3d3d-9762-4b5e-a5d5-4512bc1d06cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91598381-0aa2-05fd-d092-d01eefedc8f3" executionId="e14b809d-a518-4f43-87bf-39edf71dc8ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="793406c9-b5ea-4e3f-7f4b-02dc29a281b8" executionId="0695055c-e0f0-4630-9659-a3b8a8080179" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc84a832-64b4-c9c3-a7c9-fc6bb57bd8f1" executionId="3e9f634d-d0f3-458c-acab-afad5502a9bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f5a4cf2-e169-a407-f39b-ffd2368e86b7" executionId="d7d35643-4e8f-49f2-9cde-b0bbfb8808f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="faabcec2-bf48-2a21-7f5a-6810518ac9d0" executionId="ca3df0e8-c5bb-4c37-ade7-2c36e9fc0952" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1b68a48-1ec2-b9a7-7400-72a1c2ff56d9" executionId="3cc98646-5307-4b64-82b5-f3148c0e78f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c67ff08-f95f-c2c1-c6b2-9a48b898f459" executionId="39726975-91b9-4829-8fc8-1e6fe9351829" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="282134f2-fd8a-5245-2f12-9d92414616b6" executionId="be84efbd-2091-476c-bf74-002e635e8b2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba2d266d-e3c4-ed52-c910-51d17420a2ec" executionId="6ef3d75c-2778-4b87-a4e4-579fa4bca753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f0c2afb-36c6-51c8-aa4c-f5b72f00edd5" executionId="017c1559-4609-48b2-a430-64bf2032e473" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f3f5f6c-d857-3ae0-9bcf-447f8e4e1486" executionId="e64d2cd2-1b7b-425a-9033-13ce98713d37" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b6b3361-7b41-b780-77d0-9262f55bfc91" executionId="64ab6931-bef5-4c94-a6dc-c400648a29a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0335d6f0-a5c5-93e8-73de-8ea15d594c98" executionId="b1b81795-9a59-401c-977f-45baba92b6f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71f1c7b5-4442-472a-ed86-d31b32a1610e" executionId="c4685fb2-873a-4eaf-af7a-72476b6348ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e719c5b0-b18f-2ed4-ef3b-0d9c7c036d87" executionId="5bc7cc38-55b1-4268-b49c-1c3cea584e55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f907696-e62e-7d5e-faa3-a1026cdaa905" executionId="616e8fba-789a-4983-bff7-7dbe314a64cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="baeb2572-ea31-9ab9-2b30-36ca6fd6e405" executionId="6492fe99-31d8-4275-88a0-ecda27f20735" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea74627d-7c0b-604e-141b-b95ab24e5e13" executionId="c91c086a-cb18-43d2-80ca-37f94b0acb82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0946629c-4810-69c7-0110-8202591122a4" executionId="c74a7a64-4de1-455f-8447-dad554c86ded" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69d334cd-e5e5-bd6d-eee8-627c2cade6fd" executionId="87360d76-c783-46c6-a71d-3a80a025d4d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="38aeeebf-2015-d81e-0616-89cf0f9cde39" executionId="86a7fd92-835f-479e-97de-fda78ddf4c78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="721e756c-b7b3-4e3b-237e-440d75ee9eb8" executionId="2672c5f2-8bc5-4731-8977-a60607ee3b13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8dc3149-4659-ccfd-ae3d-582c929a49a9" executionId="ffd8e560-8f19-45fd-abbe-c3031f1a7bc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d76a921-3fcf-29dc-4dd3-c780d5d0b8df" executionId="38dc5abd-1fa6-4a0c-bea1-d35e11c0bb91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd31cbbb-5445-df5a-3096-6086391f6519" executionId="91a02d6b-70d0-409a-b980-1d955e2c3a25" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5fc67340-5f87-a88d-6d59-26b2199a4104" executionId="1f9b0cdd-f72a-4e5f-9695-9325b0390999" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a4fa741-2b74-d6a1-fa95-6f3569dfeab8" executionId="2ca1def2-18f9-4bc7-baf4-a403b99e1f07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddf30769-3901-7c63-0655-c6557a394e21" executionId="131fbcd9-ceb2-44c1-8594-bcd11d5687dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="863d7ff3-3861-1083-9610-47e08df26e7c" executionId="357779ea-c132-4055-be91-762cc0e89f3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cba16b8-941c-3619-9a6b-e1a0280bc62a" executionId="b5c24bcf-9252-441c-ba37-a6d5080c638d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4721f483-4ccd-b9af-34c2-5560a2095b58" executionId="c00c0d65-6ee9-4bcc-9399-3f82d5ed86bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebba3194-8aa9-efdd-5fbb-73128887c60d" executionId="35b0a12f-6d4d-4781-8f05-f97405deef38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="543d7e3c-10cf-b135-dc78-d6ca78ee3c5c" executionId="d82b9bc4-d780-40d7-a600-d43f70134661" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e33ccd29-ab0d-8e2e-71ea-738d0787a423" executionId="da248125-108b-4b1f-9ffb-a145bb9fa50d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bad1686-214d-5c13-5cd9-4bf78a147bd3" executionId="df270390-a1b6-42e7-a947-81ad1261f81e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bb28772e-b488-e3c0-bcf4-0a67c14f3163" executionId="1ee4256b-8f6f-4882-90a1-260d4897143a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df26d3b9-f003-5f23-426e-c06ccd4a83bd" executionId="440d766e-9011-401c-bf9f-117e7c2d6a14" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="296b6783-b6a1-1f23-9ff9-498cb3e234a7" executionId="cfa2df08-db3a-4b0d-a4d0-4cd68222f471" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddf6f135-86d0-9637-6276-da22d7aa96d6" executionId="149149a4-2b94-4f79-a13a-356409d2244f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3bd7f8d-0f1f-6936-9169-5efeb021948f" executionId="dc8dc46b-e55f-4cfb-9225-2eecc137f437" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="373d0b5a-6be4-ceb5-f920-6e8b98355e38" executionId="60c95e1c-2fd0-4046-ba10-9de079debce0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c919bbd-7ddc-e420-7b5c-9c1d43e66900" executionId="e380f60d-6fce-48bc-8dcb-d854c2d092aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fab569a-2e8d-5c5a-db86-ae85721d79e7" executionId="b8257256-e0d5-4077-b70a-6070a70eeeaf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7bbb0f02-160e-1591-e618-d763db5ab4af" executionId="3c7c9517-3b2d-4984-8238-abd8608d22b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24b61435-bce1-7991-7d37-b00bc47339d4" executionId="eca81b96-8e9c-4b6b-a91b-6b42b42fa2bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f937a965-a506-0fd0-6005-a18c2e13083a" executionId="66355291-880e-4af6-865a-156af02323bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e170dc6-a8dd-5e54-857a-dce5e3b444b1" executionId="7c8b3751-e6c9-468f-accd-368ed469857d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bee401e-d51e-a977-67eb-72ad4761a646" executionId="7d96d165-4e0b-4dbb-acda-8d0e6e1b7116" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1457a30a-82e9-b48c-378a-3a0036838e02" executionId="e5877421-3f53-4273-ad21-47ada61d418f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="233436fb-7e81-49ab-ce4e-c4aa1312968c" executionId="674ea246-3ed3-4f15-827f-c375e9525887" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53d9f532-8011-9f0d-f90c-d0ae9205300e" executionId="c287bf1d-2479-4213-a5bf-098fe46e2395" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40a21a59-709d-c67b-98ef-403d40a831fd" executionId="c709ff95-84d8-4b09-b5ce-96b62a719698" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb8b2a55-e397-d4f9-1645-9fb4780fc14b" executionId="c6094b4d-bb8d-4410-b4ca-db6eb108b33a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="474816c7-e6ca-82e0-f8e8-ab2978be6e1b" executionId="c9460a25-4400-4d3c-97e5-ee6478e5e0c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9817940b-51ef-a6e3-e88d-66e1a32cdf86" executionId="0f32e7d6-1c9c-4c74-9370-18747ccaee78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10bd0d99-dd11-97a5-08bf-8ee974d7db00" executionId="49101e7b-66bc-4fe7-8119-9370334b5010" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34e241f5-85a0-cc69-909f-6757093ed9f0" executionId="53056227-0089-423b-87f2-641cfff5e130" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc772692-58ad-043e-bc85-d589926b199e" executionId="9a61f34d-c74e-42bb-b7fb-241428908904" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1de80ec0-3369-3b04-c4aa-4be357da8a65" executionId="6d015dee-e53c-42b2-9a4c-ce43897d1e95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8f4697b-44f7-ec79-2ce0-69ad63c37cf3" executionId="64c640f3-add6-4a23-af70-339842c18ebf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36ba16f7-73e8-5f83-fd44-7d3b363a82ee" executionId="fabed7d3-8bba-4293-89b0-1771cfd76f92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5a3fb17-8f6a-c139-8856-14eeb854f48b" executionId="17edc5b1-d062-4754-9115-fe2e1e3aa55a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2a9db68-2628-daf3-1d5b-49839ec4a983" executionId="6ef51413-d2fb-4308-b59b-b39da09d6b52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3cbcfa27-4d7e-744e-d193-de1339286265" executionId="eb790965-2821-45ba-ae64-2dcbdf2ab6f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ddfe2a0-bec5-c49a-8740-8a53e6b49351" executionId="7faff708-f592-4e09-9c11-48a4f9502202" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="abb98cdc-db56-2527-f25f-fc0776e9ac6e" executionId="c85fb488-1c4f-4088-8910-f1f98886e6cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25e6bc71-97ec-816c-ca78-3c6cccda0ba0" executionId="5ff31343-bed3-4301-b7a6-1666956bd18c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="667b67b4-123f-5541-0ee4-5e637e6aefbb" executionId="1057f7bb-738d-4313-b727-e3ec7d10c46c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c16ffc46-c2db-fce9-310c-9b3ea87b1b66" executionId="980c344f-337a-4009-a3af-1f43be148c69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="591508d6-83aa-305d-79fd-6edf55999706" executionId="6d4200f0-5ae8-43e5-adb0-4b28e936d7e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b17962e0-59d8-2aef-f927-43e4cfc84331" executionId="e0afd75b-16a8-46e1-aa78-7b5058fba6fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9459469a-c5ba-5862-a4df-cd7979acabd1" executionId="54831116-05bc-4577-8a80-7ada1a25f91b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e488992c-efc4-b05e-f736-39385d1ca220" executionId="b5e75f13-96c9-4449-9000-16b74204d85e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1815e82a-9441-6fcc-5630-07e10b12a97e" executionId="292589bb-2e72-47c6-98e8-429ff485a797" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6773f377-fc7d-9568-a15d-35527c842db8" executionId="b044320b-2d60-4690-9279-05274d88bdb3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c3a1517-60e4-c0b4-7622-e1707a7ae41c" executionId="eeeeefc6-9a02-4878-bbd2-00f5d423e323" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0bb9b590-c574-13c4-3f4f-0597b98bf335" executionId="1ea3fe87-b880-47e5-8d0f-3cfa1469b2af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28faa725-c103-bba5-7e01-205a73572d01" executionId="4a860806-7f78-409d-ad80-9fc0e8230175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fff00b8-33ad-55ce-3df9-4490c6103e94" executionId="749392de-ce0f-4a0e-b40d-c14dabcd4b02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d92df725-e1d8-f617-db26-09e684180403" executionId="d1aafdd4-0ff1-4007-ab0e-2e8fa7f5f0db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="352c5160-69d4-4e67-8ae9-382be3f2aaa3" executionId="316aff6e-3e67-4b98-b071-0a8a8fd90b6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9caa0bf5-4f9a-4b98-df88-a2b19464a5d0" executionId="40285740-5ee3-42f1-8cfa-0f72f32276a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="746ad2ef-3beb-be6b-fc99-43e979c1f0ba" executionId="34f978b2-ba07-41a7-b0dc-77881f6c1b31" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57312071-b0b0-21fd-62c3-97ce67bd534f" executionId="d66a0c26-8140-4463-91b5-f22f849c3a35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f7dcea0-3d69-1407-8f03-bfcbcf02f27a" executionId="a96eb6f8-3e8f-4463-87ae-5f4d827b66e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5d2fe5c-40b9-a00e-2f30-2c2999c0e904" executionId="3904a0ca-e832-452b-b4cb-1f12d760ef95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cae1a2e5-adce-8de1-73c9-222c9c4136a0" executionId="2fc5a4eb-8bcf-4763-b84d-55c9ae76000e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a40a7cde-7f1f-b79e-8f2a-4dcabd0f541a" executionId="54fbd1b8-4992-47a6-95d3-af371e83a023" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e9c8d8b-2e1d-048c-f99b-129e36038b28" executionId="3ca91c73-474e-4722-b257-5c5639217dc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e74bdbe4-eda0-701c-3df6-918b86926662" executionId="f3b6902c-b305-41e0-b680-5dd7575d64ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b37b3153-b8d2-34c2-a49d-56bd5625b823" executionId="8a928bba-8ace-48d7-85a7-3773b89b7d6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9809c4f-04e1-b87f-678b-e1a8d8674c22" executionId="cdd9ba24-af44-4e5c-8d89-da0de5c9e789" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aad798fe-de41-655a-d019-5ce8f37af00e" executionId="8ed6e331-a481-4afe-a2b3-e4fc4dd1428d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fad32ae5-c881-6601-cc30-397bdd2f1f1a" executionId="d1aabc39-161a-4358-9c98-41d68353e384" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e22ab60-1c50-b171-afba-faea93019cbc" executionId="6ad3f5b4-98dd-4774-8185-70913dd62496" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c443ddf5-8533-eb9c-e03f-5d4d1d244968" executionId="185ecd27-4cb4-4a23-ae27-d844425c9d5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="528e94ad-3e4f-0f67-f3e8-a659bd53354f" executionId="01a6aed8-c739-42bf-83a0-b0b98548ebee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03c0af5c-acf4-386f-b4d1-1ae9634e0542" executionId="533a5992-9140-4ab8-b47f-874689081ff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69fe0a40-b16e-0094-b606-4aad62a26199" executionId="3788c235-c194-417e-b25c-0111e37e0385" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d1cf383-c594-594a-44de-f3ee10f73f54" executionId="b61655b7-dcca-4dfe-ad15-735ef2dce895" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dab5afe7-0f29-805a-bde9-8a531234a53d" executionId="5b2127a0-39a0-4a21-82e5-a63b45b61262" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f003c1e-da2e-7149-8d51-8572348c0bb1" executionId="344d3224-1940-44c4-bdc6-353246287322" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f095be9-2bbb-25d9-d0a0-3dd027d7db71" executionId="3c3bd80c-8a0f-4216-b96d-1469337c203e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1ee421a-2902-b97e-d16f-d4bf268450b9" executionId="42de6caa-3fb9-4645-bfc9-0086e3a74312" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8fae7a39-2e70-aa95-e9fb-88bf16ba3e4a" executionId="1e85e695-63b4-423c-8163-ecec2c488495" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a66a788-ed3f-20ef-5577-5eaa2059f650" executionId="7e29c723-d068-4f6e-b1e9-b68fdaabc6c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1822004c-e5c1-959f-2ce1-52abfd1cb520" executionId="29f5743d-a91c-4010-bda0-b01fb0936615" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa42e1b3-e34e-f0a3-8c1d-73b1ad018a1b" executionId="918c785d-4ee2-4545-9b68-808d3bf8bbfc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b508b1a0-9474-1cec-cbb0-45b6446607ef" executionId="8e2e84a0-294e-4a31-a3f8-879c33775ad9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2beb7582-ce22-581c-071a-330eb2eb1828" executionId="c473a340-b9c2-4fa1-a4cd-96b8816ace52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb5fba2f-5c15-2eed-9c85-527fa52fd656" executionId="5cf57b18-19a0-47c8-916c-c93c5b747140" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ac4c1ec-c27e-dc02-cf1b-986640fffe9f" executionId="ea33e63a-1f38-40d2-854a-98e91e3a5d78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="689eda27-0ed3-fe0a-6a23-a0e5fad87e53" executionId="92cc07dc-19f5-40be-9dff-b79155d088bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5ec7c5c-e986-fabe-5cac-1841ec4cfde4" executionId="dc3a3a01-343c-4b1b-88ef-faefcaec2f91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3bae51cd-6435-fd29-8f90-90cb46243bc9" executionId="04d56bb8-17a8-4dee-a461-25bd17c9fda3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60cf3ef5-b3b5-1f4c-8f05-68a66052a9b0" executionId="5d628ce1-66d4-4492-a3ad-6150752fbefe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e6f8464-2c90-142c-f21e-436039005857" executionId="b10e6507-183e-460f-bf95-0f770a05a726" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02ded587-b99a-23c1-ce7a-ea90d5d3f41c" executionId="44356ea1-d629-4a1a-bb25-d4174b2a7857" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e74908f-3b1c-3ac8-d20c-4a54246d9abb" executionId="9ca8929f-b787-40ff-9dde-1b78b337dd2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea7a2060-8204-9a65-570e-1d6d84a96f7c" executionId="731c3635-8d04-492e-a7cc-c487d29cd08b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05f6be74-66fd-f7c7-0f6f-990e80720375" executionId="9a24b19e-89e5-4b47-b5dd-a1de4562320a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1297c923-fd79-8a3e-e52f-db05c0de4692" executionId="3e587f6b-c7bc-403b-a51e-60ba13e6ca2f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4ba70b1-c039-13a1-45ff-428ac0ea6738" executionId="7f86d7a4-6791-4689-8429-06fc7b6e2a2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a94a7259-a1ee-913c-96ee-a4e5a8c9db49" executionId="e493a03f-fd1f-4b19-a371-eb1254f2c5bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e95e742-f250-774a-61c0-f1b47e7bc67a" executionId="b7f10f03-1397-4615-97f4-bc70531812de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b429fc2-9357-bd5e-3e0f-b54645775faf" executionId="9e6cf205-1d78-4bf2-b200-1779059a69ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="574857b2-e588-56ad-f6bb-bf0becd1ff43" executionId="06537bff-6483-4115-807b-59a6f99cb8b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="848fd43c-2b30-afdf-3b69-9874a4a0a45e" executionId="be285329-6209-4109-ba60-51fcd94a72fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e649dc9-1c36-2be6-6bb9-8a357e1f9fb9" executionId="8410551f-85c6-4b22-a5e6-d9f316e930c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="754fd436-2a38-0955-7fdb-7f9c38febecf" executionId="443a4b8c-86d3-4c26-b48e-3e8e80a742b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0645a6fe-056e-ce2e-21de-b74a96a64eca" executionId="0724beca-2427-483d-91bf-973fdb3d5bec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1bcfc96-379c-5b0f-0dbb-1a725d508769" executionId="4da2e6e1-0d58-4eef-9b65-4f5e67abf17a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a26b9b8-9a96-20cc-41be-f0609d0badcd" executionId="d5f9e8ad-e19e-494c-a8bf-4b95ac7dcbe3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ce8da62-b5f8-672d-599f-ea5f575ba062" executionId="15dcc1b4-e186-4247-83e1-787f308fc1ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84668809-bb42-0307-aa2a-ac84540dc4f7" executionId="37983ce5-42ed-417d-8419-c828f776f831" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0f8b334-70ff-780d-c11b-f815ccb412b0" executionId="0b2eb28c-65b6-4309-950d-4273286b2232" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5fb3d89d-9906-d3d9-fdbf-926779b9d610" executionId="caf48613-eebe-4a3a-b370-291384fae96d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cef16c6-f632-1ecb-8cdb-dc5e2aab57b8" executionId="288e724d-ece9-4f04-bc34-4edb4a3a3bd8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8be1547b-6e6a-2e20-9fde-e40550f10438" executionId="9a6763ab-21b9-4ead-bfc3-93459fc844a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7e48c3d-8012-0f75-a07d-6ec26f0241d8" executionId="991dbd24-1509-499a-ac3b-98eec1f99a96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e4e704e-3ae2-090d-777f-66db55265327" executionId="bdfe20a4-d3d8-432b-9036-5644ff1a9964" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b0975c9-76d6-552a-80be-b3df846d3c50" executionId="7d309a05-d51f-4647-8aac-d35e5aa51839" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa127ae4-9d19-2afe-25d6-0cc7f6c47649" executionId="59cb5e55-8ca5-49d8-ae03-30729c8eb101" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35f9377a-7ed1-5fdf-492c-e8a7715ea5e2" executionId="2db016c9-f56d-4143-9306-be8927a4ab34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3733cdd9-2ebd-bb7e-b610-8329e3c584fd" executionId="78aa6d2f-f0a6-4aa8-9135-0eb782cdbd99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99db7bdb-cf0c-bbc8-c7a9-538e3ff95f5c" executionId="d62380eb-c611-47ee-9044-b9e9973dedae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85a4c108-3ca2-d3c2-e8c5-420582eda7fe" executionId="657d0a6d-d81a-4878-aad7-c937d41d752a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7619ad62-05fc-e7d4-d58b-fce7dcc67370" executionId="23a4a4e0-d44d-47ae-9967-da247c4c3b67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5441fae6-0fe4-6e6e-7da1-029bd30f7d6e" executionId="33921cc5-2f19-4ccd-82de-acaedf741b0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07c8cefd-7f2a-e11d-7c2a-ddc46651a14a" executionId="d17436f0-460e-4948-b70f-6bd0927d24ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6433901f-bace-5a58-627e-89465e706e05" executionId="ca9f72cb-c3c5-4328-bd87-d05c544f5ef8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ec30bb3-0d63-c142-0d38-740d2a8e6fb9" executionId="49542510-9329-43ab-ae6a-030166ffae5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51911c0c-a783-83d5-c572-8143c6a92f26" executionId="f4c8e8b0-3b91-4228-87cf-f076426a831a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80630e8e-ae32-f223-5925-7a8d486913e1" executionId="ae154dbd-1803-49e2-b038-e0ec11264cc5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ff0a76d-7152-6c42-6721-c48e73a2124d" executionId="5a07ebb5-6f49-4aa2-9c5b-23c0ca10d780" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79b93339-c796-01c6-7d95-1801f339a3b0" executionId="81d9ef3d-0130-43e7-b5ac-67459a20c936" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73e21423-d408-9d0a-110e-7b8036bba3d1" executionId="26746863-3e42-4a12-b929-5329a7c2b9e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1dc6c472-ffaf-4b2e-7e59-ebc84e2a1386" executionId="ca8592d3-c665-4e4f-9c86-995975a7ae61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="171de131-b995-6937-5530-d6e667938fff" executionId="67bd95d3-ecd7-480a-a85d-0dbac5516585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c79ab1e-009c-f703-ada0-a2acfc364e52" executionId="7e5d3355-d55f-48df-82ff-1c2a9e983854" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d61c7ec3-391a-850c-ad64-b8106de1db4a" executionId="63ee9e32-14eb-43dd-a8f2-d678050b5915" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a5d0aac-7a95-3dc4-98d5-1cb11b17ba92" executionId="e9bb6c98-b181-40c0-81bb-bd83670987a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c4d160d-6034-b7d4-4318-32b366f2ef7b" executionId="17796245-05a7-4f18-9822-c0d2583686f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79248556-6a4e-8c8c-d60c-14dd0d87fddb" executionId="bf045597-2861-48d7-8eb7-e62c8d4c81ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3cdd10f2-2d1f-2cd4-6e38-b5ddb09d2e34" executionId="5eaaf9d7-2365-40f3-bb41-5575646135ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8658a7b9-f20f-093b-eaf6-9fda0fb99328" executionId="1de78f27-2cdb-4223-b4f5-2c3f20ed5cee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e829ef9-8c52-683b-7d63-935f0d1babd1" executionId="ec5e64e6-7c79-4a45-8c87-3d01176d8901" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="817f24f2-e53b-af3f-7bc8-cb945d7db174" executionId="0c4f58a0-f0a5-46dd-ae73-c3050d912b0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ec8f8db-8e3f-a8db-e522-5ed2c96f596b" executionId="16b14a98-7715-4fc9-96e3-2978a32939bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8aaf302-679c-dc80-2209-46c620d484ce" executionId="b33e793b-42b6-467f-ba41-d3901b480db9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="201b7ecb-36d9-3b2e-4072-94d9c4983761" executionId="c98cbedd-c721-434a-bc78-036cbf39f0b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47eae0b1-70ed-9db4-85f5-b905615d2e60" executionId="a7bfa3ed-3a34-40a9-9fe4-29615302e2aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb8a591b-1771-b29c-87a0-4d3c174da3a7" executionId="9486d1e0-589f-4847-b625-b5bb84e32375" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83fcadff-2ea7-3701-ff9b-ccd467d2c8a6" executionId="cf6026c3-f896-4cf8-8434-e8ff27cc0bbd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c889f155-0be9-b79a-e6bb-317b9808aeaa" executionId="00a35511-90fc-4320-9e53-62c203fae812" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6ee2931-5868-abcc-03c0-f5e0a37a6274" executionId="6aaea1f5-697a-49b8-8a51-3d04042bb20a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="535573fd-35f9-2ddb-076c-1b89437a63c0" executionId="b6c0c6c2-6474-4857-a1ec-c8db5e5b5116" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd916b1c-f22a-ef36-2921-a46d6adf0c32" executionId="49741781-a993-48c3-aa2f-9298d7fd409a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040e36f9-ec88-9ff3-6ddd-845330af1957" executionId="bf871f70-2520-4a7a-b481-b502e2de2cd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd4dd3b1-709f-e8ee-5ab7-ca290ebb23a1" executionId="6d92aacc-b855-46a7-b631-cef4590f9acf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9772630a-6883-a071-3cee-f0109d62b43a" executionId="9070e079-b5e3-42b5-9275-38ac4610b585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f24b99b-9104-eb95-6631-f14a5ba413c1" executionId="7d889aa4-852d-4c20-8d20-a43264404364" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1114b2aa-c924-b2b8-10d3-bd2923467151" executionId="f8ff6f00-e426-4a86-8aab-22063569499e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11abf243-21b1-3a98-35d2-39fecec129a6" executionId="d2ceadb7-afee-46f1-bcd3-a8fd0054cc49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4b7dc0a-6b35-207f-83d1-f1196e79565f" executionId="e370e1dd-7c88-4bc0-a8aa-e991f22ffb29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbc988e9-2b51-7338-3c9c-0e28e5e705ee" executionId="e6a3e9f2-8e29-4edf-8c91-1e9e92d99b4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bdb47406-5a57-45a6-7efc-8a99c65ae766" executionId="6aeab25c-20ff-47be-99f7-15a96770bd35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="218cd252-afce-fbb4-935b-1cb56ba91aab" executionId="76c7128b-9b06-445c-b10a-cbb22c765427" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="917081c8-4c35-67a8-ab12-13c2aac956ae" executionId="f2a4a4bc-a79e-4bf1-b843-31a1cc822fce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67cd61d0-e417-67fb-fa8c-bf1616a4d473" executionId="1561b887-71ba-427e-a493-006efbafe961" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f3dca42-92ab-7313-d3e8-bbb4662429bb" executionId="f4739119-2cb9-4dda-a9d0-4c029a421580" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82a43004-da40-7a61-603c-5f4b3f672114" executionId="e05085ba-7683-406c-8154-55d6373b2e90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="273b8cff-a6b9-02a8-3b91-8dccd58d5a50" executionId="e76a9a11-0bb1-4017-993a-7f9312023965" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d5dc888-effc-180f-9ad5-da4fb4052456" executionId="637a6675-f1cf-4ae4-9349-6ddc93eeaeac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="44409d9d-754f-e51e-96e3-d6912b5298b7" executionId="2b45707f-6ce2-43ed-8547-70af94dd3610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cead969c-8a71-2ca6-3e73-e37adc96884d" executionId="f0439746-a3df-4fce-b7d1-592028f6a4c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23653d3a-3f40-7f66-0cb0-f41e810c471b" executionId="e369607d-3b3e-41f5-8cdd-25b164ef3004" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02cb5229-9e22-d16f-c533-58496aed8a74" executionId="6990a173-605a-4f3f-96e1-96d2c32fc6c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9473930-6aea-13e9-e12e-8ea5ef88ca22" executionId="d104a89c-ddf4-4690-bda0-d75128afddeb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="153972a2-e76f-e124-12e1-307fd06427ad" executionId="88fc6c9d-e29b-4672-879b-fce9005767ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de1ba7af-c501-e3b1-1a99-04d4905d97fe" executionId="f2621edc-12fe-463d-8318-558f1418c148" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e2be895-ff3a-095d-75e3-37299d0f4962" executionId="403b3163-6537-41e5-80af-cb45c9799e36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0d62812d-b36e-4014-9b81-58d7952d3fce" executionId="56f4614b-b217-4540-8963-2f8595da7960" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83cd0db3-f064-df18-2507-ba9cc6514cb9" executionId="9b9c3e70-ab90-41f6-b40b-4a459c82e100" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70b3f917-2ca9-4b43-d115-87783b17996c" executionId="62dee29a-63e1-4c76-aabd-b674a2af8494" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4ac3a26-46de-3715-c36e-8f4d6f5f9f9f" executionId="a72f8357-885c-42da-b5ff-e28f37193612" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b08fc1d-4351-db59-0a4c-7fa6d6c65877" executionId="46772148-f05f-49b5-86d7-851259107bcf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f62cbaa-1030-d810-0d21-dccde0155dd0" executionId="15c56f24-2fad-448d-ba32-1b514fa248bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3b9f7b1-d4dc-b20f-b949-a8b3f2124ad4" executionId="d415a067-3668-4ba8-ac54-9bc8ecc0e4eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ea179ef-47b1-d8bf-4866-06a5a406556c" executionId="8a0c05ba-52da-4d16-bc62-08f939ca5003" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72bdacf6-c04e-7538-e17a-4b76acf56493" executionId="ddbd6395-7e9d-4384-a8f6-e94a4d535c90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3003a3d8-f738-6d2d-1fa5-74d54eebf6ef" executionId="9adde724-a8e0-49f6-9d26-44dded45df0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5473567-e360-7801-813e-7ede3b0a1b06" executionId="6ca7f60e-be1e-46df-be3f-b195565e1a15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d898f853-754a-6c5d-3b2b-ed8a21dfc83c" executionId="64ea5c76-6669-405c-82c5-02d6b5b48c66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75edd253-fff7-4d50-2625-9591fbb5f98c" executionId="003e0496-a755-452c-8f86-7ffad0e4d6d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21e524a3-5eca-426a-7cff-3e67f8b100a2" executionId="83df16db-01e9-497b-8669-3ea52383ed6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19fc5ee2-b61e-61c6-4b92-05a1d8c7d6b7" executionId="73002d1a-d7fc-4f9f-ab80-967a10bfe10c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0debdda-33e1-906b-c3d4-2f5aecdca33a" executionId="9c3ae2b1-e8e3-40f4-812b-0b3452d1fd47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c1c5a96-54f9-9ab1-ef4a-f63b872285e7" executionId="314144b0-fa3c-46b8-bfec-b1aec00b5b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac21adf7-d381-75ff-6d23-d8c8c2ff32c8" executionId="76df1404-009a-4d4e-9a9f-6c473716cdd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1763ae5-c014-70fd-5320-0c3337c77fb8" executionId="f3360b6a-7fa1-4ac6-ae4e-f4f631961306" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b371385f-39fd-9b10-7316-0744d06769f2" executionId="5642f5c7-ac50-4899-aecc-ccd5b0d414e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1db33b90-734f-42e2-9724-f0f3cb945588" executionId="49103278-1e2c-41a7-9cc6-dd43a2917058" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25505a59-41e2-0f10-6da3-df4e452b03f7" executionId="03c9c6aa-244a-45e7-8a50-ce3b105d12a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cc56c7f-5a74-6403-8a4f-f4625ce9e4a8" executionId="297258d3-060d-41a7-8a39-d5e9a4bf1209" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4fac98a-db54-ac55-7eb5-d215da6a6441" executionId="8d9dd524-447c-4935-9ea1-b5b545a617e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c3d2893-1e26-b923-a71e-15d5cfce2db1" executionId="9a9624f5-d008-437d-a94a-88e06200d543" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc2491d2-0ff7-8523-9e45-766376febe55" executionId="998f8b12-762d-43e1-b33f-698eec25888f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebe96a17-6d98-4a1f-d0f8-24395f4e2aaf" executionId="27470341-58fc-44c8-8938-c7e5aa9e5b39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37c3a8b6-4a1b-e566-bb10-637699372e26" executionId="2e4ad912-fd2a-4ec1-adf2-d965e70f5842" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5a3577e-6c32-fe1a-59fd-dc485aafd646" executionId="8843404f-9f30-4aad-9fd4-ff72dbacd731" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1150ee68-35a9-06a9-5dd1-55810ab9c938" executionId="43669982-bfcb-4b79-9530-b274985ec9a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c15194e-2fc3-9185-ec78-0ace59e1b31c" executionId="f8984489-244c-40b6-b275-3e64adec702b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8e72d79-df72-8f45-fbac-d766b78a5489" executionId="781ee8ce-c1bf-49e3-a1a7-42f82bffc379" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00e8da9b-6db3-d92b-712f-e2599cadfdfc" executionId="b8530db6-ec2b-4c15-844c-1f9d4f10ffee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d934580-be60-7ccb-43c6-4fafc6cfc4f2" executionId="edf92b5a-6417-427e-9525-10962312eb0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be00e43c-ef1f-1f96-532f-766a588e2786" executionId="0e7cd923-6744-4f04-8847-0f1db1eb63e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="328f757e-a26a-de36-0fd2-3e30404e0bd1" executionId="f8c7f739-98b9-4f70-95a6-c298d65aad6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2bd8e7e-4413-7825-8d41-0b9dd902ad16" executionId="b2a98820-b05b-4686-ad70-e22e2c8e1a80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0083e126-a390-8aae-f3a9-95083d510c56" executionId="5687185e-77f9-46f0-b22c-713cd7708344" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c7054d5-77cb-a80e-e545-0857b644d6f8" executionId="945a884d-0bbd-4e1c-af74-16f024862a8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebc0798e-5cb8-1e23-00f9-f1ad89b0bc2d" executionId="39512533-9214-4b28-add9-b0141609b73f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d7a9c92-b9a8-e170-75f2-1d908b9ca2e4" executionId="55970560-aae9-4055-804f-f57df1075320" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54928b44-e84a-80f8-9464-3bb1fdfee9ca" executionId="fb88b717-21bf-484e-b2a9-8cf341f26591" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="190d37c0-d42e-4c9c-5970-8e9693d96fc9" executionId="1ef77aca-0f39-4998-8091-6694ffbf2170" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b70b4b80-f195-6f10-35c8-6d08b0681013" executionId="8919b7d5-f873-4ed3-a062-426ddb11bf98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e4ed39f-1f88-517f-cc09-07e89875ed71" executionId="d12c1fc3-c96b-46cd-8662-69ffe99f163c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76fb9d43-c6d2-4878-b6e9-a60a8ef861c2" executionId="42c241a3-b2bc-4c55-a299-5df84df1564e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e75cd54-2f41-2679-6b62-b0e0b2a16537" executionId="917dc06c-41db-484b-ab4f-83125fea258f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8911a2a6-4809-3263-694b-ac842068a67b" executionId="9c8c485a-4c32-4ec3-b8f4-47f961ff0934" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32ff2ea8-dc00-1a11-7672-4d21618b9ca8" executionId="5c006856-716c-4544-92fb-dcf7ce4c0cfc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dfab34f-3331-68e6-1c39-591a4e844b20" executionId="e2aa4fe3-d4d6-4f69-80ba-9393c030ebcb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45d1bf02-a450-de78-bc6d-dafce6227715" executionId="c238bed9-d06f-4c08-9792-d5b0d8ab3579" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d748a0d-dd37-0c20-ef03-fb1e8e68d04a" executionId="2a7780fd-fa56-487d-8563-2033a47b4aaa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f1d5359-fd53-238a-fdf7-ab33697228a0" executionId="54c0383a-68d3-46af-b037-ba4a6edb0e6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d720576-81e6-e6e7-6c2a-ebd8a161040e" executionId="ac6c27c1-0e9b-4842-bebc-d01e050dfef6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="504ac613-a495-1e89-b4cf-0b7e39869100" executionId="0e8a642f-a847-4c63-88cb-e36aaf709423" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f08de649-f8ef-0f46-d483-58264824271b" executionId="be2cbfda-fbe0-40aa-b626-8d2a0e931e85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9be95313-2c57-07ce-3e37-fca7cfb67227" executionId="fa0b865b-ede0-4475-805a-d9c0a8dbe8dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9606b27f-0190-804f-7408-ba0276149c3c" executionId="c5a9e448-1ade-4352-99b4-7c20877eda11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6752d8e-b45e-b9cf-1288-7760a85830c9" executionId="af621eaa-33a8-42c6-a170-88ad043052f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28221ec9-9edb-9fd5-0959-ebc0979ef9fe" executionId="7fd063c0-be3e-4414-9a54-d8e781ce88a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30ea76b1-88a7-538f-8e88-265822ea1844" executionId="c80f1497-154d-4415-a878-9e63b8186cf6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85decf2a-2fd2-31a0-84d7-d6039af47087" executionId="8d467c22-6b98-436d-9249-bad19acb0011" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07b53ba5-18d6-2a9b-bdeb-517a3b9924cc" executionId="44c69913-e316-4fcd-894c-952f36e5132c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b39669b8-6133-4c3f-10c7-b033ce629552" executionId="0ea7dfeb-7563-4d2d-80a4-5683b18c7b9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4cfc4d99-8f73-00b6-ba7a-87038bff3d98" executionId="805421fc-282c-45f7-a817-420c0d29d1af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db9b66c8-5d08-2351-fe38-435aad3dd716" executionId="0adfe2d8-05db-43f5-a824-531b657c7fe0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbed7b4b-94d1-6b2c-4df8-22f8d9d07ebb" executionId="54ae8b42-d5e4-4f11-b0f9-692f2c83306d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0342b1bc-0a3b-a04a-7d64-cdddc338d18c" executionId="c8bc0dac-95ed-44b1-9c5a-2c965ae48c57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccaba2fe-7e3c-fbce-dc4b-8ac3c38ee367" executionId="6a92d12e-bae7-4667-a08e-5b1e68e56aa0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2c244e5-40b5-1ffc-6dba-8f301b743803" executionId="99d595d2-b6f4-4b8c-aedd-91a6ff1414c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="012dffc6-77a5-6b3a-83ef-514994b77051" executionId="d24f5275-3615-4d11-9b1f-06164b644eec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ecb089a-3721-0d17-5f51-bbe11a92d3c2" executionId="b0a267b8-411e-40d6-80e4-63aff6f08b2e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4950ead-5b27-d095-1112-7aec64e3ee23" executionId="26ba094e-3f58-4833-9cdf-8a7a6b61e908" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0684640e-2b77-41fd-6d5b-29e563b0ec10" executionId="795f2ae9-1bd6-46e3-a52d-d44c334c30f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c554ba80-6e9b-4756-ee7b-f875dbcef4e4" executionId="618dd392-0477-499d-b7c5-088c1da90c76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ef487d9-978a-f68d-6bb4-b170f4e99a17" executionId="10f4c77d-5de4-4dc9-b720-6ca480b2f29c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ecdd2bf-5ead-19da-3c3a-43bc86066452" executionId="5485c233-92b8-47fd-8f10-5825c613e114" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b80a87c2-c3f7-edaa-13b0-f2afc20b7c07" executionId="d19dc9b3-f1f2-47b5-9797-0c04bd0aacc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85adb41a-0f43-ced9-5218-5fc86386ea5f" executionId="3c9851a1-f9c5-48ce-ad3d-cfd0107059fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ae97799-ef2f-5ddd-359b-2880df2ee91f" executionId="1f88d556-ee06-4cc6-bcba-c5b21d1fd7cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0351ef9-2e5b-dba8-1ab1-9aadef153bd2" executionId="26630537-8db1-49e1-a812-862a04654414" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf47b1bc-f644-af08-a340-d762a489a360" executionId="d7a5fb13-1052-4e8a-8739-796d46346b07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e9e1f35-2378-79ac-f0bd-b697137e3241" executionId="26d53659-2996-406e-b37e-64a7132ec705" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd1f5237-f9cb-c893-b47e-ce791a7532ec" executionId="9121afaf-2a82-4e3d-9f99-f1488a928ae8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="764842c3-78a1-27f1-8347-b98d7ce4683c" executionId="890b9fa7-6ec2-41dd-80a6-ea63d6472966" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a8e94ab-43f0-8419-9587-651604193209" executionId="e18bd266-39d4-455f-998a-41b5f87f2148" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5306c4f-12b5-4b21-95b8-49af91f0265b" executionId="25f1f2b5-620b-45fe-ae38-7b39461c4813" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6c10693-0871-15a4-0fe5-deb3593b620b" executionId="999be773-09f8-4d12-95c8-9e8c008c2f87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65c9f74f-3de5-4400-889f-2413e04f7b3b" executionId="d16b690d-ab9e-4235-add5-25a264cb718c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea9e57de-c10e-1258-dfbf-54fc34b4d6ce" executionId="32639bb6-2c21-4150-929a-0acc78538cc3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae53641a-4d55-4ed6-a531-052bbb67db4e" executionId="39f28194-27fc-431e-b55d-7812dd044364" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="613c6fdc-8133-5ab3-460f-e30a8d004262" executionId="a8af12fa-6a91-4c29-bc37-fc74f67cca8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28572c96-2710-4749-90d7-4db2204ed959" executionId="3af4cda4-da85-4eeb-8986-71636c3ef354" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20ad30e1-c057-7894-7d76-0da1b4c713f4" executionId="32fd71a7-c6c8-417c-812e-2ba2f85e5e66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64e4b180-cf4b-3791-f430-5ee8e568558a" executionId="16cb3273-e107-40ee-924a-f7382c6729bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89f3fb75-60e2-9524-111d-0966b9fdb5d6" executionId="a531b4e3-0cb9-4a64-8d9e-8bc2da192adc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6703265-a595-e434-ca4f-59b8845689ee" executionId="ba1ea35f-167c-442a-87f5-4a7e0ce84cd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e4b3ccc-8b91-0568-3e1d-72c8922e70d0" executionId="23a617f7-def0-4e98-86f0-e9b1a2de2c5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2e42543-5594-89dd-b6a4-6fe238a337e5" executionId="ca5ce426-ea5b-439b-906a-0c7ffd44875d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0b04c73-ef8f-6dad-daa2-9d570fec0850" executionId="3efa08ca-fa93-4ee6-a60b-9e053d80cd33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2db76a9-7eed-8b38-833c-486aef3f0bf7" executionId="c5051df0-6b3b-47e2-aa05-16f8958946bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c3bbfe8-0e53-8b11-6a97-7de9ac2e83cd" executionId="e3d6167b-87e5-46ca-b891-50e7fc416867" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b6928fb-c574-8e1f-c05f-0fdeedaaa2c9" executionId="d9d351e5-e3a6-4034-81d0-61f3107d389b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22ccc183-f475-b21f-e4d1-adb25df63f0d" executionId="a184fad2-a9ab-4d75-bda4-05dfbeb5af54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cccb977c-4018-6daf-19e5-3269b56bda53" executionId="5bff48c3-2caf-4bd8-81be-f0c7614d724f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3fd3e56-f00c-60c3-5791-562446927538" executionId="bf3e88d4-8d04-4cbb-bcde-93874d5f07dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19ec4286-ebe8-a1b7-ed38-a6efbc62c6e7" executionId="450194da-922f-456e-973b-b26dbd76f02a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f7f01d5-dcb3-559e-2f3b-bab584a8ca26" executionId="c51d2cc7-d1a4-4ac4-b560-445a01b1b6d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b898a2e0-96be-7f91-4113-4ef4f93f2e11" executionId="5fc5de3f-5c13-49ae-abd8-08fd334f98cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74d213da-7b53-ebbf-f2ed-62714b713fde" executionId="613a63dc-dc13-485d-aedd-5676ef08713f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4629ff8d-7168-9f21-10df-e12d7346c7b7" executionId="9a9dbfd0-0227-4f57-8200-51dd642faf60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16619557-e2e5-c279-cede-669420230d7a" executionId="64c28fc0-e381-45d6-a310-68bd156cc9fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="769dc668-6d35-9bcb-d2c3-d4ab100d25c3" executionId="87c46b7d-50cf-458f-8fc1-763fc3c75371" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1027dd2-1292-74e6-8440-3654a6bbf454" executionId="bc4f2ce6-d3b7-4dcb-bd17-d9fac7d1fa86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd68ea8a-9004-065b-344b-20e4010ebaa5" executionId="11455f07-87f2-40a6-8b24-9643be2d3865" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0d4ea25-116d-7084-e18e-d337510bfb2d" executionId="c0c2db46-5ad1-413c-a5ec-306e81d9ac6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b8be8e5-1c5d-54f9-ecd2-11a9ebc1603c" executionId="a385c08c-a2be-4963-871a-25ed1d3e82ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f8f99db-cdc5-762a-7f68-b1b810f872a8" executionId="31addc63-313d-448e-80e6-0d06bec4f298" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4aa688d-0813-ddb6-b212-e75c73bddd08" executionId="6bd55bbd-5db3-4c13-84ff-9bcee0bce72d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edf39d1c-2b56-351e-dceb-e574d568c819" executionId="b668a6fb-ba30-4a5b-be26-1df593e28b8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3fade6d-b041-31a8-aa46-eb996e77fc05" executionId="d89c8201-502d-4b3b-9f40-9a81920a1413" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dcf19e1-3470-926f-5ace-a8141d03d7fa" executionId="1704d72b-e104-4850-aa88-e04f14d1c1a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0818a1dc-a99b-f4d7-b0b0-570ef57baa07" executionId="2f7fb2da-0673-47a5-8782-c610a8b1af11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4cafdf66-5fa4-4ee6-5234-8b39983288b5" executionId="06895172-b9e5-41ef-8d74-3d730287141f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f8e1488-9058-b01a-c190-d152af34f73e" executionId="4ceeda65-d9d3-48ed-b1c6-1f108e757c9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78c11c6c-25ad-d110-699e-2a19e2fb2ef3" executionId="67122c72-d760-446d-b27a-83a4dff8a2e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28ecedf6-e67a-57b4-4fcd-5a83da7efba1" executionId="1b937cca-5117-4331-8f10-3328a5c9c3bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2dc333f2-fb8f-3896-e8d9-4221f4730023" executionId="4f3d1173-5080-4d3d-8c1e-358aa7b418ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a51cf95-a5b1-06eb-a384-68b9138bde4b" executionId="dc134e05-87d6-4f65-bce9-d1d28eb3a503" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4be3847-cc72-0484-24c4-c7433b7f4016" executionId="900576cd-f9dc-482a-957d-e4ff64b49356" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0bada7a4-0656-6d48-645f-ae848d1d23d5" executionId="d6ebb027-639a-41de-b182-7c8a6e8302bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4bd7d042-38f9-c8f9-c6ae-14a1fe60d16d" executionId="9fd1df30-ac26-44e5-89f2-8d1520f36d9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d16b544b-d6e6-92f1-d0e2-03d883ee34e6" executionId="0f84d2e6-e173-4c11-99c4-3d35ac870868" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09d9d5d8-3ebb-8bd7-b6dc-31a656d1ef80" executionId="9d77a86b-113d-4f34-bc86-cba483acf508" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6c56780-5fe2-00a6-d4a7-39024888f502" executionId="addefe65-02d2-4d92-9963-54c6715ad530" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d6ba95f-64ca-2b91-3c2a-41bef6c2b114" executionId="0a805b54-a24e-4451-b63e-9a94e39ad074" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f7b100c-6d7b-b65b-f4b8-15a206fc5caa" executionId="93283241-ce8e-475e-8c9c-cb5f0aa5996d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="97af4051-eaed-a27f-8787-ad01bf056dcd" executionId="26024957-cc3d-408b-8459-6105ff0ba910" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="752fd025-80f5-0dc2-bb9e-fd26e1e2b85d" executionId="86c854ce-cd8f-4a11-b5fc-0c320ddb408a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e94f5737-cf04-b148-8192-38daf599baa6" executionId="ee473498-ed16-484d-a7d6-9eb254944cb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f1dc184-32f1-9847-f9da-84ac0a05d222" executionId="47eb9566-a005-49d8-ace9-b9b93a2fcd39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82b8b82e-d510-e24f-344a-de88362d2e89" executionId="99edf53f-ff73-4765-8e5a-f006f0501f54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c093b0d-eea8-6996-3c81-c348a868dca9" executionId="446349c5-b4fe-46ab-8459-67aa025fe933" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37416c20-f604-8893-9847-10f29cecc930" executionId="f752e8c0-fb50-415a-b5d9-85ab54456574" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96bc8447-64d2-32a7-244d-de0c8b356d3e" executionId="b3eec0d2-eae6-44fb-9260-3ca4d393874a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fbeaddd1-3d3f-9a85-1f05-71eaa5c45f55" executionId="9e330c14-7647-430b-bf49-6fa0f719b69c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04ac183f-dfb2-4243-3403-f58ffb889b77" executionId="ff1a93c1-01bb-4b90-a505-11f6258ffde9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5001e616-8b55-331a-1f95-ef75f9cf7688" executionId="2af47e08-ac09-48a9-8982-0b06791696dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="791d91ea-f7da-72b2-2c33-75d7a471b0ff" executionId="23a1eec9-41b9-44a8-bdb2-3c9b01b11dad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1988b293-cc85-fd92-ab09-d155f2ec1ddc" executionId="f92af3be-2c96-4ae2-8e90-490267cdea5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53683f5b-88cd-fed5-e45a-12a6a65115ab" executionId="92f436b6-a3cd-4571-81a1-b7f18f95a7fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="423a9cf1-507f-88c0-320c-1466d658562a" executionId="dd7e13ac-c9e7-4214-86d2-b3a20c2e9716" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="275dd1d5-1dd3-fe33-a1f9-dc3786b661f4" executionId="0047cd94-587d-46fe-b3e7-f4490d669923" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57aa77ee-b946-2c03-830f-9e9cefd6b4bf" executionId="90b0845b-bd6e-4c0d-9422-f07ad73ffe74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3898ee1-6a92-977c-23db-23685cd83166" executionId="da4f99b7-9a52-4e8f-85c1-7332f9d1c9ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77301279-a302-d15b-c4f2-b0c398e8d511" executionId="13a073bb-42b9-4bc0-9e58-7182a34a4aa8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7d4a999-8c0e-190b-0934-b0fad894f7ec" executionId="e44818c8-daee-4371-bc8e-f9e318747fee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3c3bf21-3da7-e041-c98f-922dec8e31ec" executionId="ab03930d-505f-461d-9fa4-2262c52851c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b510403-7e11-b3b5-160e-c952de1f9d10" executionId="c3b13b67-b3a5-4ddf-a95a-7dcdd5689ff8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b6f2abb-9a38-5112-18e7-87917ba90bb0" executionId="bf109af2-c09d-426b-8ffe-948141efee9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac430569-7b30-affd-0f1e-04ed1017b891" executionId="ea188d99-a7a2-4996-b32b-b4cfd57e5d62" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b218c33b-227b-537b-624a-0cc0e643ee4b" executionId="80ce3489-c84f-4e79-b8f8-6f8d839e1181" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07b4b32a-3797-0eb8-4d0d-8c30d2a55c58" executionId="6869a894-c92e-430c-b9dd-9ca6e36fc9e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f39d3e44-b8e0-c912-738b-a251c6c53806" executionId="9bf0a1c9-59f3-47e6-aad5-4daf9667fa77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="553f2e4a-cc91-cce4-0d74-6705cd96bbf9" executionId="e31acad8-8e34-4922-ae3a-c0f02afcf7d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74a8f961-9d51-0311-0d14-1dd0cb7b9aa4" executionId="7b3f1362-bc30-4f4d-8b52-b8ba6105b0ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5490218e-be16-8473-364f-0674b286fbc4" executionId="cdb080e3-accf-429a-9f20-9208bea6b3eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28cfd509-62d4-8953-9f7e-2199d0979cfe" executionId="53036180-9f32-4b3f-b33b-77123164e159" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36ae5b4a-87b6-a099-e670-7a6d91c4d83d" executionId="03a5db11-13ad-4bda-b8bf-312a1b47722a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="012acce3-be70-9c52-0079-282537368c45" executionId="a71ba074-11e3-4173-acd9-fe199444f176" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d2d3033-a848-df08-a8af-68975afd756b" executionId="365a571b-9e1a-4a07-a385-d9d0c5528c9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da68f6d9-f043-fa82-30f4-89885b5beee8" executionId="adf5c685-ae48-4820-900c-1c148f96db1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7494c470-a3e0-23ff-98c9-2ca5a986358e" executionId="8fd9ddd8-39a5-4a87-9f33-c4b7b839c450" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="704bb9b2-e8cc-0539-bc1a-31e8b6f137bd" executionId="03cbbd12-9210-4f71-88c0-b59bd83f9e76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75a43d67-1b2a-5662-88d7-0d35895bf6ce" executionId="d997708a-0d23-406f-ad69-bd111b347b11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="299cf12b-f7aa-2866-5f08-3d085d207bbd" executionId="1b0eddec-a6c0-44b5-aedc-5af3ecb5f8f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f47dba5b-d63f-dd03-e974-04fe8e3b3212" executionId="b76855ef-52b1-4a43-a7fd-96843474b207" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02f9c500-2eea-5dd9-f130-06d8f2a813d1" executionId="05d716b2-130b-4dd5-a004-714dd6bf6bf7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0584e66b-0399-2b53-1a64-82a7074a1818" executionId="aaaa3e39-9abc-490e-92c4-368a393fc229" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd07e200-61fa-0d64-2512-92e9985b3612" executionId="a2725cc2-140b-4cd8-8cff-d1b570bd369c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="861271a2-8900-2ceb-93bf-ab7f7d4a4466" executionId="b07ae476-ee03-49dd-a9f4-460acc540f76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="098a82a9-6d3b-6182-bafa-c40fc4d60429" executionId="826649ad-c83e-451a-9758-2761ca78ae56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85064fbc-f963-b912-332f-7413014b4349" executionId="b8e0e1d3-e642-4ff1-a744-fedbefc23786" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17acc240-0903-b201-693c-5fa35fb85788" executionId="b1b094dc-8798-482b-933d-701a6998ce86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b296b0c-6adf-cb01-723a-664b88352d30" executionId="b6f11095-30c6-4f85-9cbc-dd75e45c9771" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="156352ea-c069-4b02-af9c-7724dbc0d349" executionId="30b5e24b-15b6-4378-9151-1a3b940aa98d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac38bef3-6340-4454-f640-619b9ea69904" executionId="3c9a91b4-e02e-4b65-851d-0dc07d9aeaf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69cb8a45-2bc4-d23d-48dd-74b4f89aea6e" executionId="3df49285-e6b0-4501-a89b-4c662e06a54c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e5ef830-54d4-6e15-04b0-33e1337e051d" executionId="e66b7259-bf56-4644-b2d6-612e397f1122" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc304ebf-6e0c-d128-64bb-d7d12ee8e65c" executionId="7a038ba1-4cb9-4497-bb48-1e4716797d18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0408073a-0179-580f-2fe9-dbe9f3cea242" executionId="108a75c7-bae9-4182-b6a5-ec3e9f134053" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="98780885-4400-c861-fda8-dc0f54413cde" executionId="eaa7b27e-0f01-4819-a780-9ab715192d80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37572768-763c-2507-76e0-88ae10ffc169" executionId="1ebaa288-1723-4599-b62e-f30c3bb52f8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e9f7c45-e9b6-0779-a26b-f747ed21350a" executionId="2eb0d569-76f3-427b-b595-153cf9e59254" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9d79cd6-5aa4-e12f-1a12-31dfb82bd060" executionId="30cf4e9b-b77c-4940-9de1-cc8120e7096f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="416f70d6-19f6-3066-c054-a25409ca2939" executionId="f95c2964-a55c-4486-a451-f4aa080ec67d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="862f7806-9df9-f6fd-0e4a-b455ba538745" executionId="ad31fd3d-fabc-40ed-ab72-588cc53f7867" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3a849db-e1df-055c-abe8-556ee4708f2c" executionId="e9812a8b-b188-4c13-ba42-d3cf83eec22a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51d00848-040b-ff9b-aad8-72c8cbebe00c" executionId="3c867f88-3d45-474c-a0ce-17339a3d0ec1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a7e0400-23cc-3deb-0ea1-c518d7284095" executionId="75f3bf54-f55d-4739-99b8-ce25b7a1aafa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e812edc5-2934-cc45-255d-9846116b0121" executionId="34026177-bcac-4138-bbed-9ef6b844f9d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="626c9d36-46b5-078e-4f38-81a01f436752" executionId="c430bed8-26dc-4e7d-bc90-9fc6af226a0b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="455ee5b2-6a14-8e52-a211-79222312a84c" executionId="73e28e4d-75e5-4342-a3d0-ea1878bd4b41" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="237aac17-b6ed-978a-3962-43a5fd10e445" executionId="607b6b07-769c-4406-9f97-98b0dbe2a5ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="550320e5-5c66-0986-209d-1c90aa745c65" executionId="c8d908b5-f9cc-42d7-9abc-2c36a4526259" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9b031a-42eb-1694-07a2-29494e14750d" executionId="c7df7113-4dcf-4fdc-992e-02801aeee9cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3230971-3432-235d-e0e5-ed722438a33b" executionId="52d0dc57-db61-4537-b111-b3a3c6c84456" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="513a3b57-b5ad-87c9-97c8-53046841fe44" executionId="d26866c9-b0e0-4ab1-aed2-2a1e39304486" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6f7375e-1401-ba15-ecaf-69a460be3728" executionId="3804d220-7e8b-4047-90ed-8a8811eedc68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5a3f5df-915f-7e07-ec15-fdb83fb6bb01" executionId="b9d9b002-9f5d-4166-b7d7-c46206b70c65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b27a2e3-0254-2219-104b-92b08d525d93" executionId="0088563c-7e3e-47b1-bb69-e80db07f4800" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed7cff34-308b-2188-765f-9b38a8c15589" executionId="c37a89fe-359d-415c-89cf-144fe88bf50f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1dc879b0-75f8-e62f-bebb-d2dc890b5385" executionId="2c453ba8-5aa2-4812-9201-466cbd898dfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d86bfd56-da35-62f3-ffb2-408b52750349" executionId="628ebd9a-1b4c-452f-bbcc-d2d49594f080" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc131270-69fe-a159-b9d4-933fa46ccf10" executionId="38c96877-4681-491e-9d3d-22eed77110ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7f2a78b-93d1-c6a1-3938-79fb42a22a80" executionId="10f1d8aa-c325-4a58-b209-3aa299c9eb95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61b290f5-c7a7-0cd5-be1a-4d226956de5b" executionId="6d1bb29e-1562-4485-89c4-d73f9d4cedbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8488c70d-3af5-be62-17a5-f3a7f7d6bf1a" executionId="11fc4b9b-e8d8-4ada-a10b-d6d3fc8e055b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b62effc0-dd9e-8915-b05a-9f77f0fec9af" executionId="f6eb0d40-395a-498b-b38f-0c7bc74a2733" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3564b2c-77e7-c63c-9682-71a0f9869458" executionId="b1b2a4be-a717-4ab2-8465-47e5dcf08eb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15578177-dd32-65d2-c281-c8c05880e3a9" executionId="9106f80c-973a-4f6d-8664-79291da343f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9fc2bad-4475-9233-6854-2f48e605d6ef" executionId="a1aa058b-44f3-4456-a02d-3d05b86ee943" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90e83e0a-8b16-1e48-624e-11285ee93e11" executionId="ebd9d461-7df7-496f-a7e0-c227485ad1ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c8f545d-e41e-810c-60c8-cdb9dc6007ee" executionId="9c063310-da31-46bf-81bb-81611b781dc6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49ce95ae-6947-45e6-c831-190f8cec3ef1" executionId="e4fb740e-5867-4bcd-9b2b-d91b3238eccb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61058b56-cff4-4119-d079-807a621c3436" executionId="80df3ddd-8249-4bc2-a4a9-6fb2b6be35cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49a8efbc-6f2f-7a28-a0c0-0c67e74dd12b" executionId="4ef5f74f-2e7a-4f66-9c7d-2ec85fe17a06" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6379521b-db8d-bb6a-d193-4a67f679741c" executionId="7fa64feb-1439-4915-aed4-a08d089c6017" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="59cc48e7-5713-77a4-f4f1-473400779c1a" executionId="1d7410b8-4a1b-427d-b484-683261542a05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f8e3947-0655-8d8b-9307-99ef9480c20a" executionId="fbe1858e-4002-4ebd-a6b9-fb55b8801c97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3470b683-785a-0e31-c0ed-b4792149b323" executionId="856556e6-6889-4db2-aa1b-99e6c2cf2568" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="245f2443-c738-c132-a903-72f4de2cef73" executionId="0a3b7164-c50d-45fb-8aa4-b8c7a6202784" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="014defa0-47f4-78e1-f10f-60b65ddd5d4e" executionId="f5b83435-ed98-4496-b0af-f20568fb6cc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="454f6007-76d6-a992-17fd-468ebfc1c663" executionId="2b61f166-8c58-4523-b8b9-a8dbe6473a09" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c0e477a-e084-ffee-e366-443f3330dc5c" executionId="08fefb1a-501c-4be9-be21-2bfa6f77a4b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddb47557-d6a3-0769-80db-6838bfa9b518" executionId="2a5a9966-ee89-41b1-bb6e-09112f677f47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bfd12c9-ebda-74c7-b8e7-80c542893292" executionId="dd5b3b5d-9239-4d58-8894-ff3d8cd49e6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e056c5b-06aa-d4d7-d2fc-0f30995e22de" executionId="44a6bce9-a01a-41d1-ab93-225db86e059e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72f8ebfe-0f3a-6579-1794-af70a0da7d4c" executionId="7cfebcb4-8dba-4314-af9b-4dc5cf03148c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="665aace9-c74f-af3b-205a-dcb76d0d3118" executionId="ee02dd02-0981-4976-bd45-8fe4d3558c16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="367b93b4-4c67-c69d-066f-e2f5740932be" executionId="136b2a93-3256-4cc9-a30e-18e640381dd7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04a6e469-7af4-6b78-840d-717c082138da" executionId="7cc00402-7c0a-4ab1-b85d-a534245e3107" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ec7cb64-cb36-cd48-7010-19b4158a1c1f" executionId="7085ecb6-3429-4332-ab3d-a2b43a90adf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ff976bd-8607-28c7-b9ec-9f76bde4e93b" executionId="05e0a75e-c5eb-426f-95a5-e73b6ca8ff3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e96ae09-a29e-a808-36c0-8477f2bd660d" executionId="814ab1e9-0b1d-4507-8ba7-2d66a4e9dc6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1db0614c-1a60-4394-e324-2d5851408d25" executionId="1e9d74fd-37ca-41cf-891c-038e1deff0cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf85620b-2c13-b33a-56cb-58c7377065af" executionId="6f71fc49-6727-4466-b481-f7a7a7552013" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6428bc6-1927-0bbe-1970-1a21bab1e4de" executionId="b85fcc29-596b-4136-83dc-58967480e01e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1dd75b6f-76e6-951c-2872-d569faffe5a3" executionId="cf8a0a14-37d2-47e6-8906-e01523f1cde5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff2cb129-d760-959d-9970-5ac810598e11" executionId="b4b2184f-381d-45c4-a614-f49a5421f939" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dccfacd3-fae5-8ee4-af80-022882776018" executionId="41aff99c-b4ee-4bbd-879f-7b4f4a0d010c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f888c12b-57ae-15fd-6fbb-5eb8cae0e6db" executionId="539b7c6f-fd2e-4d53-a9da-58b8c036504e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b155706d-f5af-3974-c48a-c3e57f914be3" executionId="257eff3e-286d-412c-b408-f7db08afd8e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf117e30-27ed-20f3-2003-73f66565238b" executionId="edf76309-c30b-4690-8ef7-9f7ad55125ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1eb43d1-2e26-88ec-94af-b10f2d89fab6" executionId="e8f47800-2623-4b2c-b805-f41702278b90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a895bd09-e362-8a88-4b9c-81782e66f735" executionId="dc1ec2c5-47f6-4fa5-b1c4-44a060173e1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35e51989-4a9b-41b5-612a-2c20c7b72507" executionId="cd057bd9-87ee-4763-b636-f28efb898877" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b485f0b-2dbe-31e0-bd95-65cf001c6938" executionId="889a174d-7ad2-4f20-8ef1-ec2ec4fd9073" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b90e1aa6-1d54-19a3-3d52-29efb7d1bb4c" executionId="782f7470-ea10-4d8c-8bb1-fecfbadec13a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2d951cf-e480-469b-b7db-38089ce98223" executionId="c125f97c-866c-46d2-8aa6-ab100b5a7b10" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb23603a-5108-c6b8-afb2-7e8255c016f0" executionId="35407bf6-738e-4d13-baab-cda7ab40c91c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6910dc81-7cf1-ae11-02e1-37f11097f48e" executionId="189a39b3-113a-467f-b952-4daa3528cf85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0b78af5-d45e-b3cd-9f0a-a6caf685b42e" executionId="90d3eff9-29d4-4197-b46c-0b7547bb1cd7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34453c3b-b472-12c1-e402-d01bae3a6a6c" executionId="8a0bcda9-fd21-4c67-98b7-3f5cadb4f559" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9539023c-02bd-bccc-a476-32ba7d1bc93e" executionId="d956aedc-a5a7-4d87-8811-9ff83e50d7f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="59be6f1c-5330-253d-47ff-cefb2866c6cf" executionId="f322175a-11cc-4a1c-8f5b-ce42816de348" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4d6878d-9b31-864f-eda4-d16aaf3b8ccb" executionId="d66c85b9-4d56-4e77-8ce2-3dbb9e3de02e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6289a1f-1ddd-f2c4-2615-1271e8766494" executionId="6edcd507-08b4-496d-9f0f-6a8a86444efe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="249440b4-0a71-1e76-25eb-958ffb710349" executionId="117d3c1c-6076-447e-8bb5-6f601353def2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36698baa-a51d-af03-02d4-cac0f86e8420" executionId="7147d272-6162-4d6b-89ac-76fb73e00c0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49a4c055-5280-55bf-c752-20dd20b13c98" executionId="9a9eecfe-b858-40d3-b9ea-90b54b6343eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab422cf1-4d42-932b-550d-f671aca698fc" executionId="30dab097-b828-4ae3-90b8-3159fa6ac847" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="95cacc02-0531-98ee-b460-a5c47c913440" executionId="ec0a2a03-291c-4d2a-9546-aff20932f7a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="354b0482-c0b1-fef9-9174-55b403cd9a02" executionId="403b1847-8899-42c4-98ad-9ead979b313c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a2d33c4-7a7d-9adb-116b-080b10fa253e" executionId="ba313daa-be06-4b13-bef7-771bc7c895cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7690d101-d32f-55e3-4d58-d79a088c5404" executionId="b261ae78-ced4-4796-a42e-a5da1b4db07e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79e5f3ca-a451-ddfa-d150-44b754273811" executionId="70212474-87ba-4e3a-845f-6071d5fbeb14" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="982e2f7d-0b81-b484-4778-e33ac3cc1588" executionId="bf3e9a13-81c2-43a8-8d18-062b83580d38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="103fd020-3f19-b932-50dc-e2a1602bb401" executionId="4c8ab956-04cc-4e2f-b78d-da59ea8439f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="417aa184-9281-e207-ffd7-efd7f1b0e0f8" executionId="74a9f3aa-c777-4234-a505-257d922e9b12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3687180-e6d8-837f-4ca5-b1145ac982d7" executionId="fbdfc61f-819b-4cdd-8e50-458b690343c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6591d89f-2a0a-3965-b5ec-423713b2c205" executionId="baf20633-2db8-41be-815b-0bf7e1aef92f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb3c49ae-150d-bb52-7485-ce206265fe6c" executionId="ac5d68d2-7132-4826-9c66-156eec2c0b5d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="baa099a7-ddde-6ab6-3697-bea6e047176e" executionId="17bd7f2f-4358-4143-9f76-bf59e5dc7622" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="400fae07-37d3-167f-ba30-c1f92fd8965e" executionId="23bde27f-b138-45fb-a1f3-32b5b76fa554" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8bf9438d-3854-1da9-89a9-c835a2aed750" executionId="4a3e44c1-8bce-4a6e-a8c1-24d18735f063" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5076cf3-0f6d-de80-49e7-7bcc69dbbe4f" executionId="4881a90e-6c8e-40db-ad37-b6805317895d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63c020dd-254c-61b1-3d79-dd52784a1ef0" executionId="e1d033cb-da47-4405-8586-fdace1a81967" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e35d4334-93a8-5e9d-e757-198bbcaf081d" executionId="e080869c-71d8-4fa0-891e-453b78008c5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4560a98e-b5cd-13d6-d888-0299b48a11dd" executionId="7495a883-74c4-4071-a3fa-8e6ec6d61827" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf3ed160-397e-e526-f7fa-dc726d96cc25" executionId="b9b28b69-e61e-4d0c-b612-7a10e96462ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13737a59-ca1c-a4d8-a36b-20a4dcd26802" executionId="dcd16024-4200-4d54-8d66-fb7c76ebe02e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9d6960b-1453-223f-c7fb-ddee751024ca" executionId="aaa7fcad-1ff9-4dd1-a5da-38d85ecceed4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39abb43b-7f9f-b04e-d127-799b4d9f2be1" executionId="b477f375-9618-4315-af92-7061bf5d972e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35acdb8b-c38d-4a8e-9f18-01db09682693" executionId="4398fabc-3458-4f02-8fd5-ea3d0c2db195" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e57dafa-8ff6-1c0c-4b2c-2616814adddc" executionId="53729194-f12a-4501-bb3e-ea9535ee2af7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7340824-4a76-2eb4-a932-16bf262381c9" executionId="9150fe21-8fdf-4959-a05d-ff09b49b00d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b705caa-324e-d2e9-a521-6b2a451a71d4" executionId="99a916e0-0cc7-49e5-a2d2-8c9da51a5490" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6acc3dda-726e-2430-8372-d9cc9237078e" executionId="5453f4b2-c9f3-4282-a743-de25f081d8e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67971d7f-8966-085a-7fcf-4c4b94c23809" executionId="01f88704-d26c-426e-8734-846cea9fc3a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47f63a76-b560-c5a5-a496-1639cc309ae8" executionId="1a03537f-5afb-425d-8430-72aec8c6f1d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9db89611-6405-4450-f54d-9cf23aae973d" executionId="88c5999b-7111-4227-891a-7e2e13ae2b55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99cd600e-a1a6-1eca-c7e7-3249de14498f" executionId="9e6106d2-d42f-4db8-88be-5c827973d3b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8a4c009-6744-85aa-0bef-4f1cd7a9a8d7" executionId="fa496413-20ae-4281-a2ff-0b006883a501" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9644e009-01aa-4834-cefa-4c76f3d62362" executionId="fb97d5a2-f7be-435f-9bc1-398c8839af8c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00f4036c-2907-7953-0328-b3296a3034f9" executionId="ef790f44-50cd-4436-9e0b-aefd73f59eec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dff03e5-2f6c-5e9c-72a5-e3730dcefe57" executionId="26a01cb9-9859-41ce-afec-6e2fa7f1a305" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1aa98c9e-341a-200b-6e27-5917d08404b1" executionId="00f46d8b-cbad-4ea1-bdd3-fb168eea444e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1466e056-48ee-497e-1c0b-265acdef1176" executionId="d3dd5590-96b0-48c2-848c-d5545b82d08f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a94eaad-76fe-1c10-f0ed-171663de50e5" executionId="b275d95d-3725-47c5-8d60-d851adaa708a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9e67261-6cca-689c-f1d1-0a706e0d7abc" executionId="11bb385c-ccbe-4cf2-875d-8e2250ba3acf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5137272-c1b7-1328-54b8-e6d44d49931c" executionId="c03c40b3-e916-498d-adfa-401add286365" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10e37091-7c6c-888d-6758-8f069053bcc7" executionId="0d922958-91bf-41e8-8c64-b8a632d16231" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1cd7138e-0ca2-078c-7bd3-9f8f307fc273" executionId="5ea1b623-a6c1-4436-990c-2e766a42c903" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28e8acbc-84c9-b9f3-0fa0-63cc89ff73d7" executionId="424b1e8f-f605-4029-995a-057a59036704" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae6ab7a8-2646-6333-099f-50c5bf591034" executionId="99a997a3-271e-4724-8c91-5fb5f06409c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="739de6a5-3791-efc7-a91e-af875d9f2ddd" executionId="64255c2d-dc60-43b9-a299-6a1ce5120f3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd8bb4f7-b50e-0a8d-9152-fc0dbcdaa1fe" executionId="fde1ec34-7d30-4231-a1b8-8fdebd561043" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d736ea85-bf26-a143-afcb-f35e82ff9cd4" executionId="c83d62be-a1d8-4499-8011-4d847da15076" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2604e2e-2363-2622-c8b8-4169a69bf9d3" executionId="f5aea6f1-9600-476f-beb4-1b5edf15780e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e486c347-579e-2f51-6b23-51a750fc38fa" executionId="0e2096bf-6fe6-4f1d-a92c-a5ef5dbe048a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1b1dab3-c067-dc44-d015-1e9946c97a82" executionId="b35e22e0-654a-4c72-b6ed-e31b9ac18fea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a015f9b3-8328-352a-d22f-991e77b13b1c" executionId="503b43ae-3007-46b0-8c1c-b3b930c15a17" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de05bbd3-df06-56bf-2144-2691706bfee3" executionId="a4a660a6-9c8d-41bd-8c1b-ef2c78e23415" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00f2eb3e-8be9-97b1-56e8-b7e0733b4633" executionId="6ed179e5-908b-4dc1-a55f-8092d826dcb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af3f4007-d296-1177-5269-f1f6ab79f3d4" executionId="20760d44-c128-4a57-bbf3-f5db175213ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bec1547e-9b11-309e-108a-ef1cb719655f" executionId="59b04887-bcda-49ce-a2e9-a0f1faa40a81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d1ef23c-d9a8-c125-71b2-9b0f48ad1725" executionId="f474dd96-1c44-4cb3-8b94-7b3624cae1eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e5f1912-5862-356c-7a12-7b5889b82828" executionId="19b759ec-2951-4fdd-9b36-c82e889f8680" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69c7177b-9463-e131-33c0-74327be87bf6" executionId="84ae8aa5-e7db-48a4-a172-d9459fb26d7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab3ed821-239d-43b3-cd8b-8ffad9506219" executionId="b95232db-e65f-4b51-a06f-49f808e6576d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2bef78f-4ef1-abc3-ea1b-d4318033fb05" executionId="0cd396b4-209a-46b7-a88f-f03df75d9a49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="409246ac-c89b-79e7-164a-3be40fad3bbc" executionId="33755ca0-28c0-4f5b-8e0f-0d00bd342b38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af854179-e937-d0bb-518d-15cef4c2c227" executionId="7c4238e4-b0ca-4350-8644-dc20110e5cf5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4ea26ca-f5d1-e377-073b-395a97ee7db1" executionId="4dce40d2-1793-4878-812d-8e1cba3aa84d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0127a3f1-4b9f-2272-ab52-3848acbb584f" executionId="36d258ee-2118-4da1-a183-016e2854ec4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6ba3436-f05f-d637-82ef-962c974df69e" executionId="8c81623e-a17c-4ebf-8f5a-287b14a3ac70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d11b35ee-f503-18d7-3c2b-0be57da3e1d9" executionId="f0799e59-98c0-4142-bc76-40f4537175ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34491c98-812b-f1ad-1fb1-912463a251fe" executionId="4b5d1630-8304-4f79-9e9b-6bcabad946e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff61f6c5-edb2-5414-8279-15dc59d17452" executionId="94e3a9d2-5185-4c04-9097-91b3edd5b7d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71f49a81-03d0-a610-b473-4ca78f8047e5" executionId="7a90767e-3029-40d9-acde-ab153d99a60c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58eff7f5-7e47-8617-2a7c-4036d4a28a9c" executionId="9af567d2-d580-4e75-a003-3515ebdd936a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8677aeb1-5913-c332-d852-05b01b0c46a5" executionId="08790e58-f022-490b-a9c1-42b0389db9bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55c81bee-3be9-9d88-671b-354fa510d63b" executionId="aa0d3293-134c-4727-851b-1ca790e11f24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="214e9979-0e11-c33f-f5dc-07e6dd3bfea8" executionId="67b34076-24dd-415c-bff9-a241de24229d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="379ab016-5707-4c59-ec49-57f0b60c3051" executionId="65decb2e-d0e4-4286-9f39-c06b08383fa0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d455cef2-6145-61b5-ce22-bfe9b401d266" executionId="fcbae167-bfa0-4e3f-929b-ac0dcd7039c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d815b0dc-6b01-b4dd-c3c3-d180dc31beaa" executionId="d291c3a2-f1a7-4045-9ac1-1bf89f4389dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f5de07d-2f74-9b66-5f8f-668dafc78abf" executionId="361236ac-76c5-43c1-8988-830082ed3d56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="367a8e40-6494-cd42-e98f-8a54f0affbc9" executionId="04382e74-c00e-4cc0-aab5-7f297d5b799b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4f40087-83b2-42e2-8a34-30a5e04132d0" executionId="a3e2d023-b12c-4611-b654-6672bea0f69c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8791e29e-fa4d-12ed-5dd7-2ca199626822" executionId="e2e6bb6e-b2d3-454e-b92b-df2e7d5866c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e1e2aa2-ebc7-58dd-fe2b-a4550f40d5cc" executionId="f3c40738-ab8c-454e-a732-8f2c34c83eda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4f2384d-7d1c-6f25-2a97-d4c510f8534c" executionId="d33386f4-00f6-4f34-9c52-4a9d5cfa5ca5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="12220949-71e8-a712-ba67-259b76a39314" executionId="7a0bd1f6-19ff-45da-999f-1dd2b683c61c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d703c53d-b220-02e6-8e34-dc4daf37eaa5" executionId="11858df5-4fbb-49b7-90a0-df24f74d9c30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fddd01ad-3b92-2894-53b8-c40ebef85e6c" executionId="f72c8e98-7117-45de-839d-bb7a0d2abf69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4cc500c8-3ae0-041d-77e4-8fb667af6264" executionId="66019e01-4381-4e41-9836-fe0a03431afd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="62a030f4-1698-3fd7-ad95-a5649fa8ae16" executionId="a350d347-d3ae-4b05-9687-09a6742a5327" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1654ff0-c1b7-d09a-ec85-eb38e4bd101b" executionId="7524e10f-ea2f-44d4-83fe-3fd5a6fc3747" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0f7565f-0b1d-362f-8182-5543a95ee675" executionId="e1195ce1-683c-4989-a190-c79e505610a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e48b5b61-6f81-3d93-e52f-36c739af3f73" executionId="eb5ac064-1a25-4893-812f-23ed29b92c79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45f1eccf-4511-2821-5c57-d9806eadd586" executionId="8e24433d-e083-4472-8b13-74c3a3cbcbed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7825c15-6955-9c10-2802-be9060546fa9" executionId="8cc76fb0-80d0-49a6-aa39-00ad901531b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="616f78a7-594a-af80-5ffc-de76f568ebcd" executionId="73d5d975-81eb-4b89-9092-a82d9294c766" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a109bb21-22d3-9c2b-c9e9-acfdb20e43b9" executionId="f21411da-8c28-4efe-9013-365989abd534" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="020a0aee-b19d-75b1-e718-e8d539dd81a3" executionId="f40498f5-98cf-4c53-a0fc-4b41d9497626" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c3effb1-73b3-68bf-e87a-411923261072" executionId="a40daa6e-925a-4800-9f1f-916102beef7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09b27210-9b36-0eda-3afd-880d3cb68602" executionId="614f9c08-1514-4bf0-b56b-28db43acadfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3097b537-eff8-5242-b364-c45faafb1314" executionId="eede9116-ca17-40cd-b6ef-e43519c8d78d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df1b42b4-19a4-da66-3739-ce01213baec0" executionId="e5bb5b7d-2a1c-4d09-9adb-ca98feae94f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0eaa47b3-dd9d-3e00-669f-e8cbadf2fa36" executionId="7c7e4453-ed11-4cbe-a1d1-f2de96261692" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d09a4c72-054b-a8f1-4db7-1a8b3bdecc33" executionId="2385fedb-a8f3-41a2-98b2-8df99344c3a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06e9a9da-3bcd-2c8b-acfb-ef18ca77a802" executionId="5e1f80f4-64e4-4ba3-a167-925a2e3924c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5cc7c775-e5e9-3294-d4ab-df25400ac24b" executionId="2376ef50-ffe7-4748-b669-9d2d2a1f7070" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec9d91f2-e860-03df-f360-fd467302876b" executionId="4ab89610-b94a-4bde-b747-f271f5f32d6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24e9ef4c-a97d-76ea-8db0-1481e127f493" executionId="32854f84-15c9-429d-975e-9d1d2fae6144" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b7dd7f2-1952-77c3-f373-97c7b0a59069" executionId="7894bb59-ea72-49b3-937d-026f19e67861" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f6ce076-3cc5-b184-476f-d7388202c246" executionId="db9268b2-34cf-415f-b481-5273681d1ae2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a7ec4ec-ba32-0bb8-29d5-4b0e6406f994" executionId="f0ccceb8-b551-4475-ac87-ec8c423f561c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9695862-6d4b-57cc-1f6b-01b19c31df97" executionId="9a6e3441-1535-473f-87b9-fd34993b6b21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f693ce20-5b70-1c96-fb84-b894d6920ebd" executionId="58a49d0b-acd8-4953-8545-287f3e60d30f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bdd3ecba-87bd-95a9-1c6d-650cd9ed1ef0" executionId="7f1c91ac-6b55-4e4e-854d-e69cf3f058c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13c6c706-3c8d-63ae-fadb-12d20f5c0ab7" executionId="c6af82b4-4766-42a7-a82b-edf75629a353" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1094150b-e81c-1700-8f0d-247edaa0e74d" executionId="95b6fa63-5c3a-4cf7-864d-85718d330bed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3557232a-f63a-617f-ca31-42e504ed4a77" executionId="0bb8385e-6b09-4691-b57b-eb828b8a811d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e5906b2-d2bc-e1d8-cd2b-12f22212f185" executionId="2db548a4-c470-47fc-8804-4150a3d939e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36941d16-f5db-3461-4010-38c9d181c102" executionId="16d29fa7-8e99-47c7-a14c-998c903a8b42" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="426d26a7-61d7-c92a-8f45-2114ac069325" executionId="2bfc4afc-feac-492b-8646-360bd802b32d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e0dea92-77e3-53be-777a-0171c358a448" executionId="9d0539f1-0f28-4cc9-88d0-3ca0765c18ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fc95601-174b-591e-9230-a83d7d1f322a" executionId="b873d2fb-e022-4440-8a26-f5e80c7e55f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a60e5d8-3722-6d1e-2172-a2d772183bbd" executionId="1a07b5cc-640a-4a32-8dc6-f75cd5917237" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa98d31f-c7bc-d1e5-5b95-d1c7066967c5" executionId="669362cb-1bf3-48e4-a6de-dd6383a3fda1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0666f839-a4cf-7fda-34ce-0767cd6677e6" executionId="3fb9b17e-da82-441c-8a3d-6fcc9ede04fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68ab69e5-31a1-d038-e858-27ba18a29700" executionId="c3b3e0d9-0e4d-4807-977a-615c9ff08e03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="608e3f1c-f64a-0864-6159-a878358b4542" executionId="06cffc5c-a4f1-43a6-a744-829beb8699fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="97188b89-2695-38fc-a66e-b65dd3d51aa5" executionId="9034269c-5abd-4375-9d17-65ce9a90dec5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58bb4a4b-d318-9bf2-6a9d-19eef808f5cd" executionId="e8f9ccc2-52ec-492a-ba48-60d522cfc368" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65625912-7110-58fe-d39b-97644474d36a" executionId="5b491d29-31f4-45ef-b5bf-19d0c6eba543" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ace36df-7b19-7dc7-66b1-0b23ad68e7ee" executionId="a74dcb13-fd57-4270-ae18-6db385ebfdb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edd6fcf5-7034-f862-8f6f-052f101a8282" executionId="9232e097-f4ba-48ee-a6c0-b4dcae9d3d93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="178fbd62-52fd-54ab-2c05-b44f8fe31448" executionId="5e0e58c9-a3bc-4fe2-812f-29269f64495a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ffbe5a70-5aeb-128e-8f54-97e9d02ba9c1" executionId="4b0c65af-e425-40e1-942f-b3f4628242ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e53f2de7-8b6d-d1dd-ad5a-f4b6cea6df0e" executionId="2660ca0c-9338-488d-8edb-628b21548874" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dec9f03-e31d-38bb-647a-72258968556a" executionId="905980bb-400e-42a4-bf8f-1db31d317515" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39f83c82-ff4d-ac91-804d-1e6b8e3ee9f4" executionId="fcfe30aa-473e-488e-a5f8-b321542fc29d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a91f24bd-eba9-7759-381c-13904cbe1c6e" executionId="91bfa6b4-f8cb-470c-a997-bf327ae86c3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0de504e2-c1bb-b2d3-40b8-05f755f08415" executionId="a5556e6e-e88f-4da2-a2b3-7a976857b23a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8133ba28-0888-df23-ee42-db7d702a2d5e" executionId="2e5f4920-fce8-4aeb-a282-e8517b262eaf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33bdbc1a-784c-f695-e9ea-d9e709942ac9" executionId="e4229f80-0bc4-45a0-8698-91ea3f48caca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba461e44-0c0d-5645-c754-a0378a14299d" executionId="577fed21-d692-4580-a4e9-2146c21005c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13f9a5d8-2bb2-113c-cc4f-1c7d076ba956" executionId="526075fd-64e2-437e-a3cd-2b7850cb3bb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92ee789f-d7fe-2328-8fe1-9a2017a63a10" executionId="37664507-e4bf-4954-9c3c-fb6904f829b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75e3412a-7df5-0c0e-912e-56f982589520" executionId="c389f35c-70fb-4226-9f95-11e9f487314d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f23448ad-2c2f-03e0-8d55-724d70412633" executionId="c5e4b76d-7402-49b5-b081-840b69705bce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eced55ec-0ba4-d364-48ac-e76623af532b" executionId="9fa05217-6739-49e0-8a46-3441d664d9ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ad5768c-9ff7-5b1f-71c3-55ac5f70113e" executionId="0df2b0a5-3165-44f6-8cac-b6e9565f4245" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5055d80a-b074-4776-a476-517b795199ad" executionId="88c9ec6d-17bc-49f1-b170-d75b73122b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d03796-c0db-b253-1d1c-3810c9ff1316" executionId="5070ae86-6733-413f-8417-c9e244254fb7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="954398a7-0fed-cd17-1f23-3b2250c67c39" executionId="d6e7ed0d-77bc-4bc5-9198-7751ec1c7362" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6ac5ef3-a60c-a7ae-36ca-96f590be0bdc" executionId="434af5f7-c8c9-486d-b056-89500ca8bdb6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="291a42ac-0ced-1b10-a153-45ac82247332" executionId="f1c8c6bd-4708-44a0-a3d6-dce82b2c1c34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50b3c91b-49dd-1f07-51f5-bed2bec06291" executionId="f8c4c70e-28fc-4de0-9ee5-701f82d6fdfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d5ad6b-71c0-d650-0df4-cf5fb14ab24c" executionId="ade2cf01-b010-48ee-b4b2-424454f852c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d42ef24e-fd73-71ba-ca10-b5233a720bdf" executionId="aa7fe799-ed99-423f-b4d0-f51e91a54e8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="039e0dad-470d-f08a-22f3-644b6025d750" executionId="8ca6b751-a670-4446-8680-cfaccaa5313e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c7fdc022-d907-b182-45e4-85d2293dd4e3" executionId="147b13c7-7121-439c-a34d-e4481601c63d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86d78e8e-c5b7-39e8-c10f-9c137f87cdab" executionId="df0d6a89-7f79-44d3-9449-ed6f98364855" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="700cea66-18dd-f8a2-3199-e6e934e7bdeb" executionId="b85fcc51-de54-461e-906d-f68bacb21a7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85ce88b4-c68a-f38e-eaa9-e9ff0edc49dd" executionId="85355ef2-6fc5-4bef-b93f-5ae3f396d163" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71fb6d07-8805-2958-15a0-1820a3c546b2" executionId="f70715ec-4243-4d5c-913c-a025c281e24a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93c5967b-8aa2-6de6-db09-3ce49be474c1" executionId="d4fda756-fe98-4c04-a77d-9c8ca1d34a6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b310265c-d10e-5f47-0138-e012f182f10a" executionId="4f3fabe5-4d76-4bf7-89df-ab25bf99b2ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18d64658-9b0f-06be-42a4-550298d60807" executionId="dc690140-0945-4fee-ab93-3191e7cd8306" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66906472-cbd5-914f-3fff-0017b2ae75b7" executionId="c7bbdcdb-7aa7-4105-98c9-da874374b626" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05ad52bc-4a27-d0ba-b4d8-fe12eb695765" executionId="897ddf77-dfa4-4f2c-b69e-1ada372118ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5547e2f8-556e-ee7c-945f-1802eeb1e6a0" executionId="25810cfb-932a-4650-a14f-3c813a6001db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="129b88a2-7977-d6f4-b778-9fca7a490bfc" executionId="8e83895e-2b6f-47a2-89b0-9d123edd88c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a18e30a-f4ae-a7d2-e7de-c1d7ea3dc62b" executionId="44523cd8-177b-4e93-baca-3d954f80bcb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="571bf72e-0b9d-9508-739b-4a52e08c199b" executionId="60ae46d4-0573-4206-b924-40c2bc1ab610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6fda6444-e2e6-2243-10da-3a33e2007b83" executionId="ae38f18a-c8dc-4e86-9ac2-a05c22933829" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50e5ed68-a702-3cd7-f018-e01837779d48" executionId="fe07a6e9-f55c-4c87-a867-beb5f6896e56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af425286-20bf-1aba-6a73-c01778af4221" executionId="e7eab168-ef45-4273-afcf-591a876e428e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd0837cb-8ce8-0352-e69a-23ebdba401d2" executionId="67541dfd-591f-4889-95cf-0aea4389f691" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cebb0766-5c7e-a9fd-83bb-06d25a0b73a8" executionId="36237dcf-77b5-4ac5-aca0-c61f79309fd9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6793cdb2-1fa9-c573-12c7-687f212d19a6" executionId="859423f9-d5d8-48c3-9c5c-e7b4eccdf9bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab61f069-d7af-6363-23d3-7889d08bba0d" executionId="aa10a46f-4d3d-44e4-a42b-cbbb028cdc25" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8763bc6-c204-b842-6764-91aef6141ad0" executionId="2576f8c4-a657-4cf6-b257-2b8a587a0000" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="517277ef-731b-75ec-5fe7-5a452c0c7b9b" executionId="bf56338f-ccc0-4a82-8ece-92b911f0d77d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee038337-7e83-3829-4541-262112e525dd" executionId="2051d83e-d5f8-4488-92f0-fc2cc1916c60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be84df17-db24-0bb2-915a-c8a1fa417ec3" executionId="6590dc7e-cab2-4987-80d1-8379210f2618" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3940d3a1-0c7f-ac8d-fc35-355df2a6a8e2" executionId="0c6dea5c-acb5-4244-872a-78b52b844b11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74d5adf3-f8f9-137d-c242-8334cfb33e97" executionId="2fe29938-1e75-4a25-b4ed-8b80ac1bd16f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11a0aa3e-dfbe-2d6d-3c87-42de2ce233a7" executionId="5b266e03-826c-4aa2-b407-6d94a0b25c5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="058aa5a6-89f0-4e9c-135f-4d9fc11ed546" executionId="77952b29-22e2-48ae-b45c-d42f112248c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ebbe48b-8d7b-aa11-383f-f8e9a7643e7c" executionId="4b92b2a2-ada4-43fc-a975-77253379d913" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20290e42-b99c-08b2-c4e6-46cf308dd005" executionId="cc02ddb2-d809-4731-a80c-fad65630dd80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b68d4b60-9985-3219-1ae7-92eb78e2f244" executionId="97e69cce-67b3-4d5f-bde2-de34742086fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58290772-4edb-9bae-a3f4-2ad48f29d0a8" executionId="a377451a-f7c5-4168-9d9b-6c3f24fb7108" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc1a9500-e810-a78c-88c2-7189a5b5ba53" executionId="00de71fb-ddeb-4523-b8c4-973f42b83aa3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e512e02-bba4-2cf2-4536-0045d5816e30" executionId="a67993f0-dd94-4a2a-8deb-84fafd2a3409" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e0ccea7-93ae-68bb-50f1-9608ca78398d" executionId="54f3b1b2-4837-4f24-8b49-0318039655a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="746b3c8a-d934-231b-7ffc-8f1ad35724fb" executionId="da125257-6767-45d3-84cf-a2db772205fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b591c96-3b55-7e23-4843-7204d293bb8e" executionId="7e7f370e-f101-4443-9439-ba030c286ebb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a32eae14-a07f-84bd-5e54-461369523bc1" executionId="4ba80fac-eb71-456b-b4ad-54d00d8657ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="26e89c02-6144-d316-7a7b-30fd7c304ef5" executionId="6587715a-da59-4684-a81f-b4df97074f41" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9fd49f9-7453-b747-5aef-6ff46c317e32" executionId="484e10df-f64a-4c89-8ee0-2a4aa3def3eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47107f4f-71ba-1b0b-c429-d93a17b98798" executionId="b027951e-deb7-4642-9b2c-fc2470c64a87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cf34c74-5e0e-37be-48ed-05e001616231" executionId="4bab75ad-b413-40e5-8af7-211647dfa109" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48404b21-efa4-8869-cfad-85feef889555" executionId="a0e3d6ec-5515-48df-a867-51377b5f9725" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93fa8f6a-4cfa-0b97-8ecb-7cd8e09fe238" executionId="802cb0a0-f90d-49a7-bdac-fef0e6a8785b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd9e7a7c-60b2-e811-9b4d-553ee54a5f4a" executionId="16365fc7-776b-4937-88f3-468f6d9289df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a77ac8a-258d-afe9-e1a8-68e185302b51" executionId="55bb8b9e-ae0b-4d73-9a38-c5ebdd5d20aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0922fb92-b11c-d22f-3471-b89a046a1537" executionId="32995318-7e13-4d4e-9b57-48d38636ac61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2af27e7e-ee3a-3357-a3b7-c75818007f9e" executionId="e4a3dc7f-2782-43c4-a3fc-6a93fc3d4c57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5039a68b-c6be-d319-6ca6-ad5b83059696" executionId="352d96af-651f-47e5-b43b-25b5b27e55de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a39d1ebf-f122-92aa-193f-145fd0bad93e" executionId="a95dc371-4004-4653-a496-95ebf89edddf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4153f852-805b-eb52-4493-8b0b310f83e6" executionId="ffbbecbd-3983-4267-beeb-d884092ede8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a68fa1f-1494-ce05-e599-9ab68236b79a" executionId="d0e9f526-13ad-416f-8777-ebf57908d75b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b87edc6-5800-273c-b384-567e59d70f26" executionId="d26457a7-9fe6-4253-8ed7-eb1adeb3e205" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c12c2782-fd33-198b-cb9e-8e3540bfe875" executionId="5cd55126-1df9-44b0-99d7-894a95f42805" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8f4a621-1f8a-a05b-bb03-1010c4114673" executionId="48b496b3-37cd-4a8b-9179-b6d7afec7cc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca121c4d-bde8-1c87-8163-9d61a33d29fe" executionId="3f2d1d71-cf69-486f-8800-4d71026ad6c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f113ced-fbc9-ab46-7749-a167fed2ab42" executionId="a6560ac9-4000-436b-8da2-8362edc83a53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28828dbc-e777-b02c-1ce4-a1c03ee84582" executionId="0fb34a67-8ebc-48ea-899a-1ff16a22cc74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe74ba3e-2f13-a24c-70b5-eb31994ff7bf" executionId="78e82ad0-f4ba-4963-935d-0eb6890cb93f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbeea391-3856-1f31-5580-3b5d5086be60" executionId="07fd7942-c621-4ea6-a69e-789486b92667" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aeadc46d-47ff-644c-8d18-c48a5e8b6ea0" executionId="6f17f187-313c-4b83-b47a-bca7bae9c6de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7e34338-1f42-723e-c674-8be1d5b5abd3" executionId="74aa51e1-1cab-460b-b215-7cdc1c8f36e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e12d030-3412-21b4-ded9-c23c1e95e016" executionId="a8770c09-0cc0-4a3b-8e27-4053f7705f46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e88e2b48-cf17-7f2b-796d-fc356ce0df9f" executionId="45ea5575-7825-4d79-b41f-54497d9eee61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01d1f829-c199-bb4b-f31a-178340baf2a9" executionId="d8655585-5f8f-44db-8a70-e15ea0ba0ae4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e97be489-2496-70b3-daaa-4e7e68a9bdc3" executionId="8498c760-d7f0-4686-9935-ea70f4dfe705" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a28ed6a-e888-34a4-4646-83721ab8aa3b" executionId="e549a306-f004-41c3-9ca8-2edc1f5c314f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf9d4b4d-2497-fad4-d5a3-5862e6e5392c" executionId="6c318b4a-3ad3-479b-bbc3-232bc91b5682" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="898a8d52-7827-606c-bd04-304b333c6834" executionId="fdc76cba-b391-4e16-91ae-4f7e667d2fa0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1d9f8e9-41ed-543f-9740-495641f3531d" executionId="4af94246-87c7-4cf5-b3f2-6a01ab4cb379" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae4512e0-2d4e-6f21-4b8b-631a1dcad613" executionId="9d4d84cc-49da-41a5-b0b2-1b1b52cac0c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a75f0aff-a91d-e29c-20b9-e290c9b91a31" executionId="b9b22b50-c3d9-4966-b365-07ac72d1df52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ecf0277-7de8-07d0-a6e3-d25e0f81ac18" executionId="70e4cc7b-2cbe-4216-a74d-0c0d788d5cac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9768cb00-f905-4f60-2811-3eca5adb0327" executionId="afb22c35-1b99-4ac6-b838-d94bf2ed2953" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8727ed87-1c84-93ff-cdf1-6c012d3ba718" executionId="dca7cb0e-e6cc-4bcf-b205-ff66e8e984b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cc3a911-96e9-3990-fbd2-58931e2ca5f7" executionId="276c67e1-87c0-45a4-b2be-739f37ceb7e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb074d40-8b56-c027-b574-e1aa5a040151" executionId="d11f5a87-b701-4d1f-918d-e704315ece50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785be0f1-1806-adee-5dde-a294563b559c" executionId="345cb50e-316c-4cf0-a4a8-cec026b1b5b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9395a4fb-3993-cf09-aabf-5d94a84836d3" executionId="2b9be3aa-068d-4fd3-8609-ca896f15a8e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="353a45bc-71e1-2e10-9592-3078160abed1" executionId="c3519281-bec4-43c8-b1c9-5ad126ad5dfd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a0ab956-59b2-4afb-69dd-e64ce5c4a2a3" executionId="1122f295-3886-47bf-94d5-b6f328dc1248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ac4b2dc-1929-c368-4227-4cb7f68560a1" executionId="9c036c55-8ac8-4bf1-b626-852d83d7739d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d631666-ee6d-bd43-fa1c-1c42d9569e68" executionId="1654eca9-38bc-44e4-9f05-18d7baaba264" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfe36250-fc5b-e0bb-2e30-635019cb1bff" executionId="5565b0f5-21bd-4f3a-96a4-12b0da504bf7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c439a8da-2dc1-d5bf-7698-eadfb0749901" executionId="4d703e60-013e-4d02-873b-e67857be08f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76b63ea7-27c2-73b5-ab88-95b912450203" executionId="7f01c3f7-f96a-4aa9-ac0d-b4cc86cb6f63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3477a61d-b717-dd5a-29dd-176556faac72" executionId="20b2de04-946e-424c-98c5-bcfc05678dd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f9ac562-96f2-b208-2d9b-1fd59e3943e4" executionId="69d79382-c774-4196-b7c3-ee0c711a91a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5a8a390-a377-d9c2-20f7-7892861923e3" executionId="3644bf25-34a7-4316-91ea-e5d4140122d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b2ac5e1-d300-8bbf-fa90-4a0b691938fa" executionId="6507f7c9-4f92-46d1-ae30-0b94a8261193" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eff25ff0-56fc-4ee1-87f1-135137e8adb2" executionId="021f4a0d-8cb9-438c-be7b-f1ef203c189d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdd9df8a-6510-a8d3-0240-a42d6bc9c595" executionId="9c4e0434-e64b-48f4-bee2-44a537ce25b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f334652f-6872-d535-5d8e-973f68dc84b5" executionId="f007f727-4549-4822-9fd0-a6c46f6bfe14" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbc91c25-bd4a-a5ef-92b3-d49611d21938" executionId="adefebcc-e4dd-44b8-be8d-717439a506e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f87397af-4c7b-a3ad-67fb-5dab9a5624aa" executionId="91d8245f-06b8-42d2-8290-586fd5cb4979" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e8aaf6a-6702-b466-7926-345741e5078e" executionId="a1ecfdfb-c7a7-4cad-94e1-21dbd3872fac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04a0b750-5fd0-655d-24e3-ceaf8247fed0" executionId="5b5a19e7-044d-4fe0-9aef-4a55678bdbc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca44d52f-b56b-5705-6bd4-5df3f329866c" executionId="6ae2d847-8831-4d15-8da5-aa0f45056e3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d1888d5-1d67-7dd4-fb50-eaa4f0b471bf" executionId="be97237a-099c-43cb-8d94-a94aaf6784c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e8095da-774e-f38c-8f51-11ac5c142268" executionId="68209ed5-12d7-4e72-aa31-9a69791a427e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d8670dc-23be-1d52-84ac-70b24c4a5473" executionId="66a8b769-39b3-4a3d-941d-19724a0cc914" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fcad8c7-b322-4b80-08bb-3b73b5aba7ae" executionId="25aeb6d1-7794-47a6-8f18-7af49d87e92a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58c0c3a4-100f-9be0-cbe6-ac05579be817" executionId="31406b97-3109-4b62-9f2d-2d0e8d042947" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed89ba17-bb8b-bff2-9e02-842d4519bcad" executionId="912b5c90-e6f2-4733-a026-f14e3fe51cae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee071d7-7fe8-f1e5-2324-362f0cd9dabe" executionId="98e02658-c2d2-4824-8140-79ea2d44788a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="722b8766-7286-b23a-ec20-4ddbb66355ef" executionId="cec4e6c6-3fa0-47ef-b74b-4f20473671d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2b5c28e-4b0f-eeab-0936-1bc69d41f584" executionId="ecbb1e86-3c37-40d2-b918-78e30f5ff176" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae780021-7678-b319-14f0-acb88805a459" executionId="98341b43-ec98-4134-ad28-a7798cd44fe5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bddc6ea0-a097-4e85-b5c2-7380547046be" executionId="35d8f910-c662-4c68-a16e-fba7f8aa1037" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb218683-84fa-84f8-36c5-b189f9b8cd96" executionId="bd463d34-669a-4bea-a303-e56b90156429" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0731f931-8ad7-373e-5bdf-742442555b3b" executionId="bd9e422e-a1ad-4447-9b16-750fb0de9984" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd0950fa-4ab7-98d0-c249-b6cb8c0b8517" executionId="aae35cfc-4e8f-4f8f-89bb-45b1a8ff7582" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67c7784d-5169-644d-8592-d1f2dd2cee63" executionId="9d7f1b63-36a3-49b1-a9a3-e1a556cc0cdf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3239baa6-e267-dbe2-0c1f-cf40886141e5" executionId="d679c570-d72b-4d0b-9e78-acd0ed5b6c3e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50ddcb2f-913a-d660-942e-a66dd9e79dc8" executionId="0baf9514-295b-41ae-bc8c-2fdee12c104c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7873f42-93b9-3e2c-3380-efc4bf3f8250" executionId="4ec929ba-8f63-4254-8a79-e97aec7b663c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7a0c95b-54bf-d542-28e0-dfc7363ae16d" executionId="f863e82f-d521-4d9b-a8b0-386875a23976" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b5bbc78-c55e-abcd-76c4-de671ffb596a" executionId="938de7f1-1315-48fa-863c-e177c8d30236" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87bbc937-ec1d-6f92-9f66-de5f666eadb5" executionId="66d402d3-6a4c-4664-aa29-5d3a811a6adb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e446c4c6-a872-1b19-3a95-a77520104b91" executionId="9959a76c-dbc2-400c-a6d2-3f76638f973a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="12da865b-7ff7-e1b4-5ace-3bf0d494e7ec" executionId="ee10b6e1-b6fe-4a9d-aa91-884dceb91112" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d374f746-3f17-ee0d-7224-30b5c7012ea5" executionId="5c2b9d6e-d14e-44a0-b5b5-dfaebb332e46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="385f39cf-6b75-5eb5-ccee-2b5104df2a07" executionId="71cfd5fd-a743-427b-9bf6-180982ff4b19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b8eef15-b53f-3a32-b6b0-2ab15c6af564" executionId="4d740c28-9b7e-4127-a2ee-8cb9615ad1cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="95eaec89-c84d-a811-39af-b3e0502c4c79" executionId="240243d0-facc-4cae-8025-c482ccfa8ec4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="492ab3e7-a934-32e3-c9e8-215d9345387f" executionId="31f35473-ce57-4cf9-b4e8-ada9d2c82707" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b25a9a3b-513b-733e-d129-c498ec726eb5" executionId="7194d54f-c42f-4827-a973-ee915e47c65b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e8c9731-737a-e237-dfe5-8e05e515fb0d" executionId="2e35b6b9-4ce7-4cb0-aa0e-e08f7d7e7c2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="144b311e-9fd4-86d9-8480-fe2713e17baa" executionId="96093f4b-e9bb-4b66-9754-6e1d4171641e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5045f4d4-7073-9e6d-bc5e-26a9d527242a" executionId="59337dea-d535-4935-8a4f-4b97e220fdfe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01c43de7-2ee6-3dfe-a4da-740c997ffb6e" executionId="3f3fa754-1578-446b-8728-870104cc4749" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3715b5d5-0839-4e57-9666-04e304517ed7" executionId="00325ee9-0689-4219-b132-5d67e83a45fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5417918f-f136-1971-817d-b9a0ce01ca07" executionId="b7dc7138-534b-4126-8512-5400ec167b49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2225e452-b7e5-4c55-c00d-4b6a9043e20b" executionId="1f14efb4-2101-4830-be6a-4e60aa7380ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c13b311-2f3e-ca8b-32fa-3915ed957ae4" executionId="0c7b4de3-d8f2-4b01-bc0e-967d2cce119d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37cbb153-75d3-2605-5c75-cc9b39e7afba" executionId="a19b7806-e242-43b4-ac6c-726923a50648" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd02a14c-ffbd-de4f-d618-0b7a01870273" executionId="ce5a0273-bb44-4518-a6a7-3f925ccdc631" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8fd5dfd-38e1-80a0-9c7e-8b93183aa940" executionId="c9ef8a30-dfbc-41c0-ac7a-8b9b7b738551" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a3ff86a-3739-1b12-beaf-ff4b1fc946f4" executionId="0c5f07ab-3371-40ba-ac2a-f135b414af5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0571478f-a537-74a2-bd2d-b7358040f25e" executionId="a2d88459-a46b-463d-8947-018488e1dd08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ff99611-0353-5a01-8b98-38f88cbd50e3" executionId="4510bdfd-75b7-4daf-9c53-df690ef4824f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="caacbb24-c998-5982-b46d-618556934016" executionId="b8f8f5f2-0acf-41e0-af1f-846ab28dbc0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d22c708b-3e50-d5af-f235-078e4b2b7a1b" executionId="94de627e-110d-4bf9-b9ea-d41ea26ca6f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c078c04-55e4-a191-6aff-9b3e70c076e6" executionId="455a4760-89cb-4ae6-98b2-60b32462d5ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6916d7ec-6d38-30dd-6143-5bae873536d7" executionId="c427fb8f-f3c0-4f6e-bb21-2bfbc90d8876" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b9b361d-76e2-a372-51f9-8376bcb933f6" executionId="d39fa4f9-6d8a-42fc-b101-314eb530ce30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dea5209-632c-ac1b-2ef8-e02792992681" executionId="dcc910ff-1624-4b26-9f76-c37a530f3c6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c211c607-5343-f2de-34f3-bbe67d91c19b" executionId="150ebbc9-e26b-4d21-83b4-aa4a805b0c22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee15c058-888c-e704-0270-7a291244fdee" executionId="c56da7cf-cd90-44c9-82f7-760a5e7dacdc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c96992e4-ca6c-115e-f054-0bd8e3255da1" executionId="7df88e48-2ed5-4090-963e-2403b41cb73b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8688c188-61ce-2426-a2f9-1579fb2997bd" executionId="497b25bf-8ed0-4dee-8912-df7c98ca3710" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="217b8b61-8316-0232-a090-7e3b4bf18884" executionId="c7f87ab2-2f3c-41b6-955b-a43776132175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03add391-fd70-d731-6b05-7eea271f1ff3" executionId="27edb798-683f-4164-872b-8fb671f6dd20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf648ebf-2fa2-42af-4ae0-976a1c2e654f" executionId="6c0477a4-1eb5-4fea-aca0-1951e4153308" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c236f33-6233-832a-f108-d4e750bdad0d" executionId="1c335394-a50c-4422-8202-bfbf021a1785" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="171f6e95-7ed9-0e3c-3d72-638ccd34b1a9" executionId="a1188f1c-db6e-45c9-aa35-1be5aa9c1fd4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7677b83-db3b-e51d-0c20-a252267b6102" executionId="0415ceae-d159-4990-88e2-a4c39c99e55c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4144a4b-3866-4b81-64d2-857c6a9f450a" executionId="a219256c-f189-47b4-ac6f-4e2fb7b0b98f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08b1e2c9-887b-6fe8-d17a-d6c3be09e65e" executionId="6f12dc81-bd7e-4ce5-aed6-30fb506e03ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cefad50-1051-db8f-b38a-cb9304e8df01" executionId="a01052c8-b9d6-46c6-ba51-3f8ee59f7860" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="809a06a8-67ad-14ed-a615-fabb2a11e91b" executionId="7ac1447b-d3ce-4cc5-a01e-220dd08e346b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ad04a27-a1af-5939-ec05-361baff5f24e" executionId="f75c382a-d7de-4dfb-9aa6-76750839fb86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53c43bc3-9298-d204-5229-257d6bc0798d" executionId="97f4bc0e-8be7-429f-bc75-549c5afb2167" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fcc11dbf-c889-ddbe-0ce9-0be7e966b8b2" executionId="e3496069-ddff-478d-9bdb-dc92b556ddd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0e5bed3-18e7-1d5a-0193-86f5497fc9e1" executionId="d168a0a7-cec4-4ea3-86b3-c7fd8bbcffd3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b0594d4-e75f-f801-a743-e2ef210a388e" executionId="839f856f-1ff9-4072-8207-20b308861b08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0fcba43d-6d85-f463-4e8a-dc2415cf9152" executionId="3535b197-53e0-44bb-9849-2ed94a32b812" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34f40090-226b-f26e-9e08-927ff3a66910" executionId="05a981ce-973a-4dc0-a80c-d938559d08a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2690ede7-8456-c0c1-0ba1-6c20f9b52895" executionId="95def0bc-c819-47e2-8c14-f1caf4e6cd99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="12b40b79-c0f4-6f93-9fb1-20d5a6270ccf" executionId="e34b187e-9547-4a8f-b3e8-d1e99f7b7669" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6181595-2d9b-765e-f7ad-89a36e61082f" executionId="432001e5-d860-476a-89dc-07341d647cb7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3dce1c93-0c0a-d2a7-3ab4-42548ebff9f3" executionId="6071f668-1022-4f08-b077-e7e65cd3bcc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1547bbf-91f5-b718-126d-80f7372a4867" executionId="e250ab3d-be0c-4059-aab1-daef2e03736b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27179903-07e7-a781-c7bf-fe297d4436cc" executionId="b35a1799-90e3-4dde-944e-8e48ceed1af8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aaf14c98-61c7-8de7-3073-d58602844ece" executionId="18095597-3a64-43ad-a1a1-10beef23c2e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef901d08-6a2c-0aa7-d1b8-e0ee187f63c3" executionId="77e38ef7-268d-47f3-a4b4-2b4e01eb3585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2857f229-a141-eadf-e4db-b95cd4eb5d04" executionId="ce834752-2d58-4ab7-96ab-04fa97864486" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0cce541d-e87c-72d2-a6ac-27960277941c" executionId="f09500c6-241e-4d9c-8b59-33165e9e5b23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9d463f6-07ff-cd6b-63ed-eb96a2221272" executionId="44518620-dcc2-4f59-8d88-c3a7cd268b07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="073babc4-9763-cc0c-7466-a5710e36d6db" executionId="98a95a6a-5bcf-4df2-bb0d-99ead4d47d78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a838e27-d7d9-e803-67c6-adf4d20225b8" executionId="d8208770-3027-42a4-bdd5-a16e413ceefc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5514a06f-242e-0af8-9dad-b95bba7e5d0a" executionId="854a92fe-d681-4458-ad87-3d69360595fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f1c12d9-7a29-d288-fd0c-6e3d3a3fa700" executionId="7b09facb-0a77-40fe-b734-70e810598b35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7c31353-afd1-ec7b-cced-9abc15a585db" executionId="73e93b61-d5eb-4db9-8243-4ad43bf7979a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1caaeaf-2b43-9364-f1b5-b5f3f75d7919" executionId="0c271608-f919-4ab1-a58f-fc16b3ba4fc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd2abbba-32f9-ce04-569e-7a401e651b01" executionId="09c5b42b-05a4-4660-b128-809e6c10d4d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3851a04-87fb-3c75-a227-b90a1bfccd0a" executionId="84eedc4e-6bf2-4c22-95ec-125022a50b4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="164dd723-c912-08ca-effb-aa29b50daef1" executionId="55cbd604-6763-4075-adf1-671c14bc845a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09961795-4559-55ab-8bd2-54abbba399ac" executionId="2192f864-2f0e-4a8a-b11a-a66734412831" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c350888-adb4-3dfd-ba53-9499785a8519" executionId="8c81c224-0a17-4cd3-b736-c7ee6fed2191" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f939fc3-323b-d2f1-acf8-d232bd60dbf2" executionId="1361f52a-f762-4957-99a8-8b1ba4638d79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8416299-d53c-c8e9-3380-58cc469d9afe" executionId="d937b4a8-8ebc-4a37-be41-fd064bbaf08d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3e95e52-ba53-f5d4-58d2-b501b761f33b" executionId="92c77724-525e-4a07-a506-12de9c7b6463" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be4d338d-16b2-a32d-798a-61452725088b" executionId="c4600f69-22ae-4b78-b891-d0fc95352258" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbe735d6-fcbd-d59a-5d62-49868141a1d0" executionId="55db7ab8-f322-4bf7-bd72-897abc608957" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80335936-ceb3-2cff-faba-1752411fe5a2" executionId="75832943-79ad-4a79-a4af-388a2bb95b30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15318aa0-67bb-bf62-c310-87f87cfb0039" executionId="fdf09551-5b47-42ce-9b5a-19c69c7143f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="970cd828-1d55-7f07-5605-8f46841926a2" executionId="f7079635-92e7-4270-9752-5ad3c2db1da5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d597a756-60a2-2066-3c2c-55715d9f6e44" executionId="54f2e45f-0964-44ac-8075-e924e6ba1618" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a81c69e-727a-72eb-53bb-371d696f4fa9" executionId="2740ebbd-0e4a-422e-9611-c83666cbbe29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="392728e8-5bbd-416b-cdd0-2a5ebec0dde6" executionId="86b31119-5859-447e-bc4f-35f4d99aab5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f49b75c-26bd-4d6e-c6b9-73b9b81f5b60" executionId="06fbd80e-903d-4efc-a1f9-3f744fba0c12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7dfe2ed-298b-e1f7-baae-883c747b7b4f" executionId="17b1248a-2fa1-41f5-a968-8b7cd937e511" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02c42386-c9df-7fd0-92e9-b023eae4023f" executionId="f9033cfd-393f-4742-960a-addb1bf117d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b30aa6af-5d68-1a89-e989-d5e616935c91" executionId="50c83b99-f836-406d-a74d-5c0e225c8b50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e4ceef4-90d4-d9be-16a7-1baf4fa8f7dd" executionId="4484acfd-1927-4a4c-8a7c-3881eb76e0b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f9a5faf-ab02-437b-94a6-b768d359327f" executionId="7b37e5ff-20d2-4b71-91fd-062068399b7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7285e30b-512c-3fb1-13f0-26b4b100e1bb" executionId="d961d08e-df8b-4e6c-9eaf-ce505ad3f9cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="053cfb21-cca1-ac05-d4fb-4e5435332792" executionId="aa6758fe-1889-4865-9a47-eeb61d247f38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d413269-e355-eb50-397b-daa79985694b" executionId="bb8e9015-fe65-4429-ab17-50591d3fe3f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28d367e1-973f-baa7-5e17-faef9167b176" executionId="66b31adf-0d92-451e-97fa-0a81e33d8685" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e21b315a-b699-650d-1b81-722cee4b0d7c" executionId="6571e822-8445-4729-af17-ab87fa606bb0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0327bd49-4410-a9f2-6e19-ddfa3b7779c4" executionId="eb90c987-543d-48cf-8fde-134e27901ca6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fbca1f90-d3ec-7e81-b220-5d992083df67" executionId="8d1cf0c2-7715-4fc9-ab8f-eba6c0ad8bb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07fdeb2a-f512-5f85-7505-901c93821cbf" executionId="1c34da40-bd28-41c0-b750-55ecb76cd507" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2c5e1dc-a090-8f95-0a7a-60758f8296b5" executionId="df891e0d-aa73-4547-bfcb-04d255bb4710" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="754fbe09-094d-38d9-5abf-92e2d7a8c418" executionId="a8ab4d42-95fd-444c-b044-c5ca1188e02e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3005ec13-dbf5-14e2-e530-058c4bb5f308" executionId="15d93bab-1521-4992-ba44-631cf88eeb00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b67a550b-bb2d-c2ca-834a-5311283fb41a" executionId="2d91f108-e054-4cf1-81f8-b0616c3efaf0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="037c9e3f-2fc8-dac9-3f4c-ca47fc564681" executionId="adfa5ed1-0953-4e93-b4e1-238110e274c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f46b363-ac14-b826-9621-fd802f24ec03" executionId="aa85b023-8236-4b91-a9cb-10e3eb469bd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfdde934-033f-09be-9725-a9c5901283e9" executionId="b6221099-daa8-4bc7-987d-86e3df107200" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0b63aac-d829-5d9e-8fc9-664338d1b279" executionId="6ab697a4-371b-47ea-a8d1-de9c6fa33ddc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01d764fc-9fd6-3840-ec0a-c18d9ff90cfe" executionId="e2c5507d-d5b1-439d-8b57-870bbaea7cb7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c6868e4-20a6-b561-cce9-8c434590924b" executionId="d3000a95-00e6-4d14-b646-e015e0306457" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="695c9ae4-930c-39ac-9284-e52198b5f009" executionId="90ec4a5f-db34-4170-a2fc-59315cd3f250" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cb25b3f-e618-5b6b-5e54-3bb03288b28a" executionId="08af0dd4-b36c-4e2b-bbca-698d88ae2b9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19d98804-c911-4824-6e6e-d8213db96bd2" executionId="3d519113-a8e3-447c-9893-69cb246ffc61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64c5ddce-ae61-4e51-0469-dd186750bc2c" executionId="42c766b3-8849-4985-a44e-8b7b1d66adbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5164a3f1-84d5-a931-d10b-2f77edad0aae" executionId="c4209f25-cf99-43a2-9f14-04e32b0b6be3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8fff263-616a-ed9e-e6f6-c57bf505cb31" executionId="5e6d024a-24bf-4380-90d1-6f87f913491b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fed6fe1f-e52f-cbf7-ebe4-951ff14c63a9" executionId="55aa2e57-f184-4f7b-8787-af769bf7e611" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="681d1fc0-91ed-812c-98d8-18c7305416c1" executionId="dee8ce9b-1347-4d15-857e-3ee76a018646" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="086ddfd9-8954-5689-f5af-bc08ac306e47" executionId="487335e9-070e-40fb-9073-5d92bd582dc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="028d767f-19bc-4b1a-74fb-f7bdde096233" executionId="581eccb4-5f2d-4b4a-ab22-dc38b53dc4fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55734c88-0e7e-b987-d1ef-a5f600957170" executionId="ef2a2c75-3d32-4879-8775-f2f09024ff5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10c047d2-21aa-49d4-3ef1-c73100e8afc5" executionId="a3c3480e-a0da-4741-9a0b-ce5889ea5a67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27893442-69f8-db3b-5381-21e812cdbd8e" executionId="92612fac-07d3-4908-af4c-4b90f56bfef2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3402b273-8416-0af3-3186-1f9fa4823f7d" executionId="676f1eb6-7afb-4d41-aaea-6727f1c5e980" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9dba3a61-fd4a-2065-5987-f970272c7145" executionId="b1ce91f5-63f5-4658-a8f6-beed20b21ab8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6f77f76-07dc-f7d5-0458-ddc947095e88" executionId="8a9fa2e4-afa3-4c09-8708-08aed6e20f66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57e8aee0-ff63-3635-b398-bb18c3b7251e" executionId="e891fd83-f3bb-4e3b-8d67-baa921ae8aff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bae3047-df7b-9c7d-e558-c27a0883e8c8" executionId="01443603-19b7-4d91-b4a9-39d05462a143" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae404166-de87-63fd-a901-a2021c260a88" executionId="0c1447b1-94e9-4ef1-ac0c-2db821517271" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="653c09a7-70be-4c34-7782-419c8b7e51e8" executionId="2a10b27e-41ae-4a34-97af-bcd0f44fee77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90ea04cc-0b21-4e87-f49c-3428cc4e4516" executionId="cdeb4bd6-2e27-4f7d-8832-b968132fd4ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3649a616-d1f0-dc94-834c-e74fd02da661" executionId="9cacde8f-33f8-47cb-a41e-483ad6fd7636" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="097e25a8-7a7b-218e-969e-d9e317bb5de9" executionId="7fd5cff2-9bc9-494c-8f87-341a3d613874" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6ab4938-1062-b240-784f-5c0ff39ec2fe" executionId="4ffc3e5b-b232-487f-8cca-bf058e6c18bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8908d670-0648-87a1-686f-bf0e3444597f" executionId="63131f25-0871-472e-bb9b-924f61ee891e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1818161-b7f3-3085-65f9-97f01f397f0f" executionId="eba7760c-e81e-4fa9-aa0a-864510eb7803" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b91d708e-5ed6-d58d-25c0-77f98067f581" executionId="5b5a18b7-0ab7-415e-b2b3-abc6723c17d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80741bef-cc26-62e1-3193-ed868fd8abd5" executionId="a3792a4e-3609-41db-80b8-f7fb9d63585f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1f2041e-e40d-8cc8-6e07-bf3e0de7eb4b" executionId="661c3ae6-56dd-44de-a296-710afc06da81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48add3e9-5bc6-632d-4c14-6a49aa32c663" executionId="04d52ccf-64ab-42d3-b02c-ce0274c2c891" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4132fb32-1e4e-54d5-65c8-3f10dc41226e" executionId="d21e790f-a0bb-490c-b6a1-c24cd0937f5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b530098-4933-04ea-97b6-97a820cd10bb" executionId="1f5f3e90-6628-4344-a6f7-b1f48e3075d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75c2e1a2-8def-69bd-46cc-9978c5631ae3" executionId="9e27daa0-84dc-474a-a78c-533d103a0497" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9806327e-d986-5657-5ef6-5918aeb29464" executionId="cf4ced01-376e-4aa8-8b5f-b0d8eec631c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de167297-0dbc-b971-26ea-f4e823b9d489" executionId="8f3b330a-f589-44cd-910e-d050463e40b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1aac750b-370b-3d51-d272-28664835bf62" executionId="b9973539-bb00-4ac8-b4d9-843da14ba883" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff2ca775-6d9a-2740-83d2-5e94759910c7" executionId="96f18a2a-7a3f-477e-8186-560801b485b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a14448c4-61f4-e68d-a70d-ec29fe8951ad" executionId="be87c4a1-da60-43c9-a83a-28a2f5a4a2be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54144699-a9d3-b2bf-967b-acebf5d92b05" executionId="d570bc52-576f-4cae-a1f3-a3653e6c9c2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70266596-319b-559c-2957-01ac7d9ec97f" executionId="8d660f87-1fe0-4bfb-9994-59b31d865927" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b60a39ec-5911-415d-75fb-8c08669491b0" executionId="7fa06fa6-8b1f-409d-9b02-d67fe0a19e5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="43dd3148-3dfe-b6bb-784c-7043d9536dea" executionId="e679ff0d-8e4c-48c4-b43d-2f5ea57f771a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9919c738-d4df-0f33-e473-29c8a9de4a9e" executionId="a586743b-78a8-49ec-8880-2b3401e8bed5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9eced631-6690-4f0d-b334-ac2e1ad045e7" executionId="ca41df01-a2af-4a42-83c8-09bf25e6676e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="137836f0-201a-7615-d8af-56cc6df7f3cc" executionId="03a2fdc6-ab6c-4cac-b5f7-f56ab486a759" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7ae3281-a1c9-01b9-5f89-41086b48662c" executionId="e9324c1b-19d7-4b16-95ec-c065283a3d8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5c847e9-374d-342c-6593-0919f640a50c" executionId="5d7946b9-3d86-4b34-8a37-2a00a842ed09" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c24272b-36e1-6eef-4428-7de31da8c6bf" executionId="c855781c-816c-40db-9fa6-b8c58b906a02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1833d4d5-596c-48c3-44a0-608e8b40d511" executionId="c73c76fd-531d-41e2-8510-d1d7ee7a74ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a38aad17-04e4-0fd3-a043-f2cb546da0cb" executionId="6b651c97-dc64-4194-b4c5-7fb589a7c38b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec5f0d4f-387c-0c07-870a-4267daec8c36" executionId="c77d56e5-6ae3-4456-bc32-5eb423cd198a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="553c73cb-20b2-dfd0-e3e6-fdbd2e4b1ee4" executionId="f453963f-aa70-4853-a289-19dd37914b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16a46364-bb02-cfff-a791-1885b1da0e9a" executionId="237b3713-3eee-4e6b-afb9-d8716421dafc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d582a3a4-33ce-d84c-edb4-ab8ea031d52e" executionId="97772db0-f87e-4f0c-920e-620fa521bb81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="721a6d40-2ae3-6612-7f9a-7c8234775d74" executionId="2d6de4af-f21c-43c8-ba28-a5bf549390d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86f416ae-c1b2-8f94-82e0-05fed12a5d8b" executionId="2e8ff00e-0f76-41ac-bf76-c21810b78bb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6451027a-ae47-8334-a04d-000f4719a66b" executionId="3f40a957-a88d-4273-ad90-8b595af20d85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a742b88-870e-529c-4a86-d85ed0d8bc4d" executionId="0f03221c-33bc-4749-bd1c-2a564372abc1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9a4c94d-c360-210d-577e-1b0fc4e0b9b2" executionId="3b081c2d-5472-45e5-a2e3-8772821ca799" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f54c69dc-1abc-c069-cdb5-72354020d797" executionId="242d393a-1938-413c-be50-5f2a4d69e25d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb8372ab-5916-290d-fdbd-c271b4ec8b30" executionId="c3856832-5779-4cef-991c-33033b6e0a1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7aa0b704-640b-7ad3-deb3-a8c1fdc12712" executionId="bc5c3397-05e6-4a6b-9ab1-e807b9a83f32" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1073c8b-dc47-9489-63c6-4d389107b031" executionId="1f2fc169-51c6-4825-bf63-987a68fa94d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6f500d8-0054-aee8-79fe-ff8f7888a3cb" executionId="ee97d302-4c7a-47da-ad45-e8821f166a60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf4c819a-1d7e-1e71-6825-1b9a814173c0" executionId="cb3bfa77-111f-4718-b370-a5297bb5dce3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f6e5188-9a3e-6f67-1995-e35a3a406cc1" executionId="03981b39-ec0f-4e86-af62-6ba58dfbbc55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="324123d0-80eb-16fd-6c27-5f64383ff68f" executionId="ca7b0509-e916-4669-bf3c-7e81cbb76fbd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f7298bf-afb9-288d-0a96-aa7b50f0c89e" executionId="38f67b4b-ab46-428d-befb-692c2bab634d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c47b9cf6-d906-ee0a-e4b3-8b846acfca41" executionId="c7488403-a6e5-4b7c-88d4-e1b27b83fcc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="560e34f5-e6c5-4355-ba03-c627e5e47ec8" executionId="bb6abbfd-e907-43c8-83b9-c2b638388b20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b83da0c-08a2-320a-173d-f7f32c9b7b79" executionId="3ec6926e-3327-4bf2-9799-d83b8740857e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56ff286b-9b2e-7556-3758-557f2b9c545c" executionId="0ad0bdd2-4ae3-4166-9fdc-cbf8c8c87037" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79861e8c-c273-df77-174d-9de88f917c9f" executionId="6c21c92a-50be-42a2-bd7f-1c7d3a3231f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1bd4c0f-03b5-ddab-49de-b18c2c2b1295" executionId="c8958111-a6a2-4821-b2ff-560b24ff407a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0aae28d3-63fd-f6df-f318-07643f3d6735" executionId="958865cb-eff6-42b5-81a8-1382915ea4f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7c5e41c-8df9-ef88-66a3-de999d90a800" executionId="f57d4ef9-ec08-421e-bf46-54e7f1ecd6a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e9d9bc3-cebc-6f42-e7ec-bdf5cebca6f6" executionId="762817cc-2755-4bdc-a1cd-10644ac04f08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a16029e6-c586-7611-d0aa-fcfb876458f7" executionId="e662def6-07c8-402f-8c2d-a6553ebcd5d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf995967-70b1-4b03-85c0-74811809bb0f" executionId="bdc918ec-e850-45f3-9b59-b50dc6615133" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="164210d5-b48c-451a-25cf-7d0a25ecd5d8" executionId="f9e612d5-67f0-4794-a97a-4115741bcd8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b39320d-a709-a77f-5d1c-aaa6a04bd2a3" executionId="09549b6f-631a-4c83-9ef9-3e927da94434" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8fd6afec-26b8-e121-f4e7-998c3ae4ac2e" executionId="c3fbcf5e-507b-4e7a-8382-29d660b8b741" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="014374d6-06ee-002c-a64f-a7392fa5c51b" executionId="20fda31f-104f-4671-8728-311f21abcf85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9a7520c-ba39-a977-e913-8c987f6b83f3" executionId="1c51a504-654f-44bc-bfd6-981aa22efafe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32d4b650-86e1-f288-11b0-0421fb77706f" executionId="20d68182-b150-406d-b092-67c7f4faef3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45b25a6b-9748-424c-d52f-7b90920b7dce" executionId="d7aa045c-7201-4b55-8d72-6f0a82e80fa1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a50002b-5cde-07b6-d5bc-bce669fd4719" executionId="6d790cf4-5ce2-4603-aa02-495fc5291efa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6db4b3b8-cc63-6835-6d3f-2aef31af9244" executionId="4cbcd659-43b6-4a94-8877-2c536d27fd56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7bc644fc-953a-2932-ca0e-a0d38ce73fbd" executionId="dfe573c4-df26-4f26-9f84-dec69bb0ca2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c14af97-e814-cc31-bdfc-a393da2ac7fc" executionId="71eb1fce-a937-43f4-b00b-61a29b633cd1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84e0e3aa-8cc9-b034-452e-e83738fa1f81" executionId="0e18a66d-b081-4df6-b39d-1b34923bb1df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c065c9-7414-a14c-3091-56abfc1b06d5" executionId="786fc0c5-3639-4863-90e4-d68567a78870" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8332b8b1-df98-2526-b6a5-98e512172411" executionId="39aa0a4b-ae66-43e1-bd70-4a6eea22a81a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3bd2e43f-cec8-c83e-607e-373e5e226f0e" executionId="28c75b61-fc92-4bf5-a39e-331d3fbec77c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edb932cc-0c6c-74cb-9364-d520127a95aa" executionId="97a27762-d470-4b5c-a337-13ef7a505bc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a83b94b6-5131-a3b0-fe80-fc79efa0c524" executionId="e3a1e958-791c-47b9-9c7b-aca0a20be9e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15bee5af-28d2-4ab5-4a80-2f35765b2090" executionId="11983811-25ff-4e8d-9efa-8ebe0d99e3d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a74e75cd-fbdb-6153-ecd9-f5ebda83038f" executionId="9729f860-9672-48b4-aafd-0bd134e601fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c7f5925d-bc31-e1b2-cfab-17f249612df4" executionId="651a5dd4-700c-47b9-8ac6-b3e181499a50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ea12431-4c9a-8271-a06b-a5171a90f75c" executionId="5e1c47cd-aa46-4687-9497-917a8e7bf368" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0ad88f5-b91f-d569-ff6f-7bb967a3b637" executionId="25e62e62-af79-45f9-bc92-f7f02d8a79e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50257766-dd18-accc-2632-30e9678c1a5a" executionId="c559ae79-2e26-42ba-8ae3-4156bf44540f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="781ecebd-3a99-e0af-147c-ea295bbd6327" executionId="eea86e20-b9b4-4223-86f7-415ce80dc70d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="242da0a3-54e8-e900-59ae-415aaf36fb2f" executionId="0fd6ea58-68f7-4a17-afc4-36db666eb305" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34caab8b-7e9c-5466-74ac-9fc650104071" executionId="3331b20b-9322-4f33-8aa4-1005de3abf34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb0f2d93-ecb4-aa58-2535-9422b6c9773a" executionId="f9df7285-2658-4e37-abcc-c1398220125d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd7af9b4-33cc-c8fe-08fc-95f189cc6770" executionId="4dbb9af9-4071-485e-af22-44e8a9b48c73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="674f4a36-5948-4240-1bff-e53cf94e4cb8" executionId="8ed9085d-8e04-4b3e-97e7-fa552ce3e966" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07ec07c5-4568-11f5-40bc-3a4d78d85494" executionId="3c3a7e0f-6162-4636-b7c4-1204e4f99f20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5035657f-cf70-94dc-659a-2848181f7c58" executionId="227e6d83-87f5-4e17-b7b9-d62c79857233" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74b5b173-47d8-f463-4855-e3aa9d2dbe67" executionId="4315a4bc-0555-47da-a18d-ec3d9a74df75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="422f7b4c-e75a-cf1d-e538-d8063e850384" executionId="66b0363d-1d2e-4ea7-9915-2453d9b40140" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbb70de1-4508-b3f7-38f0-28da49772502" executionId="5d234424-a35f-4f54-ac03-0a04aca8ad36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a39b7794-7294-948c-2682-5c134715f1a2" executionId="5d6d5758-ef8f-437d-809e-461163f142c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06df0aaf-e5d9-dcc8-d834-c043f9348e4b" executionId="0cca2bba-0b85-4a70-bfe9-5566204b348e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47753b59-02f6-7076-0f6e-0e2badcc3543" executionId="bddad724-6479-4f88-b7f8-a0568b13ae1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c9f5007-e9ce-25f4-7f66-0e6ece299711" executionId="76b34d44-cd91-455f-8a4f-63339548e862" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51894596-042b-a790-ff41-ab3bab3f6832" executionId="649eb419-07f6-4fb4-8e9b-4ba4a69053cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71f4980d-dd93-e45f-48cc-c07d92d6ea7c" executionId="f2c6050c-c508-4c86-951e-23e8ef7f95cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8f33544-6f3c-4c34-2b82-744fa52a61f2" executionId="9e37fad5-a5e4-45fa-b16c-8faab95c33ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="beab640a-a38b-f7da-5b38-55dc2a68bec2" executionId="5e826c01-8768-44a7-bbbd-83e2869ac63c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5fbd0108-a41d-eab4-17f7-0b2c9fdd7db5" executionId="8cad2514-e537-4e5c-aed2-37ca71918df4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21f9b134-7633-cdca-37db-a93e42e8715d" executionId="ade551eb-3c51-450b-b0ef-dca9cd95cbd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4088b7ef-3249-5fbd-68d5-833ea9529ed0" executionId="16fb5f72-c8f4-49a2-bdc0-efaa4da60f9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f72bfd4a-6695-632f-194b-580972c51068" executionId="09e5902d-17af-4b36-aad3-57b0dd83bb64" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d3bf771-1af3-0ea7-c288-cdac10fcbfc1" executionId="9e32a536-e994-4077-ba65-825d2f32d55a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2d7e718-110d-a9a1-021e-56f3e1c6790b" executionId="3706fabc-bf2b-4c87-ae61-19d1c4963794" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8fabafb-049e-bb23-be9b-39457b33e75a" executionId="60c87ba7-688f-41ad-bdc6-3a71498da69e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ba78aa6-4168-1114-e0f7-6fea58a18375" executionId="db6a2dd3-c86b-4c0d-8b11-36e2a9921432" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1982e5ca-0562-e040-c47d-b570831b3ee1" executionId="bf84b4d8-480b-49f5-842a-5af1f1d7c175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f8b95e8-fac5-c72d-8d5c-72c41e1f6e6c" executionId="e7c02ac0-feac-4f0f-ab54-8c2fdfaab136" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8fc5f65-eba1-51a4-ba64-797ccccac2d8" executionId="6e154718-716a-43e7-976b-1280c6ffcc8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="95cc365d-096e-cdac-d837-d13e2f512980" executionId="adf03795-5530-4266-b5d9-13d90f2f72a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4813f5d1-a69c-b28f-ba8a-fd1e28784777" executionId="c1bcfa50-a747-4c16-afa7-57b27d8c0ad0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7dc91527-4294-4b1f-f59d-4978e86bfdc1" executionId="24b142f8-3864-42f0-884f-1b959ee143d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="190e182a-78fc-1e04-eafb-1b28e62ca381" executionId="cc36f266-b91f-4a7f-adfc-82506b26ad33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ab36ac4-3c40-17dc-4e73-ab59eaa12ea4" executionId="18f2f238-51c7-41ea-b9ca-9f62e6819316" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e908658-07df-1df7-5f15-a1c2e2fb5a13" executionId="0bc161cd-7d35-4017-9690-fc4b851a6f72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="249d22c0-6b90-a17b-dca2-88e3585daccc" executionId="96337bba-8187-4610-b5d2-8c64b15c007e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="698ffbf9-73d8-f970-4a05-60a63396beb0" executionId="a01d649c-2def-4ac5-9c34-716643a0f2f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="906c73f0-514f-37ed-ca43-92bde3614284" executionId="40439d4a-32a1-4834-9dd0-ba0db7428d55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2f730cf-dfc8-9b7c-14b9-74530f15c391" executionId="9a68ed8c-db42-42d1-84d7-f93fbd50bd72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8524b3d4-b0f2-8602-c61b-6b328f8cd68d" executionId="b4056566-670c-44ca-8fe3-17f95d9d1b75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eae6a2e2-c1b2-280d-6e66-008f22ccd00b" executionId="40ddaed4-d0da-4dde-9357-edcebf18646d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07d9a77c-a1c2-a693-444e-406cde40d743" executionId="352ea05a-dcc0-43c0-861d-8fe3272647b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c7d292d8-b278-a12a-9b66-e868200d3235" executionId="fb8cc541-3af5-4e13-912f-bb1c0c0205e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66913b9c-15a2-d54c-2f3c-5ef2959fbe1f" executionId="78a74264-faa2-4cc8-bbf0-47c0e96887f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b2ef06a-3f86-4a9a-0980-a987d0fecaee" executionId="f7d4c092-5983-4992-8f35-bb9376cc4792" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35247896-257a-5aa1-165a-d2826627fae2" executionId="eecae5a3-4aa9-427b-8525-e5fbe5da6902" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05280a91-df0a-5dd3-0a5c-5983d68d226d" executionId="cde9bdef-b809-4487-acfb-a6086e98af7d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e22f2687-ac39-d1ec-cf7d-1ff931ebe8d0" executionId="a711e774-33ca-422f-a0f8-d95158ac3493" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9914297b-f7c6-2a38-f4be-be33c86378dc" executionId="28ee2f18-b53e-461b-8507-705f6c90410e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88afcde4-85a2-ef81-4f13-4b549b5ea95b" executionId="9dca7a3c-7b04-45dc-ba49-047ab5fb9877" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76c34614-ce75-6cb1-6fdf-dc56d77111a5" executionId="cec21c54-261d-4e73-ac57-09cbde11e8d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31b64d55-5380-54cb-1e53-67960d6b4a5b" executionId="06c9cfd4-a016-4344-b12d-581ccbf912ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da4574c7-cf1b-954e-6f1a-18a48735cedb" executionId="f11051ad-12f6-4389-bea7-ffae015c9046" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbb8a264-7bb2-9cff-dc36-dc8f8858e8a1" executionId="90123c0d-0373-4f17-8284-abc8a7c5ae76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2bb9e9ec-9413-d98d-692f-cd33d79d78e7" executionId="5099dd36-8332-4be8-a065-8dea66aad0e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea0aba16-17cb-4c4f-57d3-461af2e4fb4f" executionId="564b0a6a-3d56-4f23-ba32-361f07659a25" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ecb69047-ada6-cfd3-a341-40e7b8b49794" executionId="732582e4-c80f-42dc-9391-2db28949fc32" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f119d45-190e-479b-9944-25bc1309b44d" executionId="f2919647-126b-4a6e-afa5-37368a0beeb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09ab0fb1-2079-6e6b-0baa-f926554331bc" executionId="4b89d565-5e62-46ff-8899-8d70f0ee5609" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="550c20af-0497-f645-c85e-64fe0d1f8c0f" executionId="998fbe23-5495-47cc-8d44-5320a01bbdc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0d7ebab8-a8d8-a105-a6a7-767063cb7a1e" executionId="0e1df000-b8b5-487d-8980-64d2e15ec066" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e009e33-af76-ecb1-d796-640b71d73534" executionId="cb20f0a9-e1aa-4036-8e34-7bcc8d1d8137" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4725a845-5387-38e9-3e52-ed675fc78311" executionId="7bca963a-1b14-48fa-b183-456739e4ad0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4bfb4392-bab3-1fd5-de93-02bcc542c62f" executionId="7ffb8b5c-eefa-489b-82a2-e970dd794983" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48ace240-48ff-d82d-4f41-d52a68336ded" executionId="47d70792-f9dc-458d-bf16-5fd0cfe64cdd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee6390a6-7327-bd96-d63b-de81370eef3e" executionId="c365902e-722f-4287-8db4-c3096d14f9bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9c1d719-8623-3c46-8105-d910ffc46172" executionId="f2ae41ea-3d85-49ba-aad0-59310700525c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c5c8c4b-a0ca-2e15-1511-29ad22db0415" executionId="ef5b5fa0-1b89-4264-ad4a-601637e7e2b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d34647df-ac9d-8b4b-dae2-5908931e93ef" executionId="07e62c1f-a00d-49fa-997c-d37e0328c7ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91e578ce-ec88-83fa-787f-009f5f67ce95" executionId="81a8fe11-f31a-41b4-a798-dcdefd871ff7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34bb8306-c29c-4626-c5b0-9b49ed139da4" executionId="a4bc55d5-7e27-46ca-ae7d-876d9dc46565" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fb6cc08-76e7-edae-d8a7-37d44234aa8c" executionId="cb093b9f-551c-4e1a-9a46-8fec900a50a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="59b8fe00-2b0b-cf9b-1ff0-5d36bc21fa5e" executionId="d3c88bce-3bb8-4424-a3ee-11881b874033" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45e2231d-67ee-0a57-fd69-f4c00be4ea81" executionId="2bd63bc0-1a98-4865-bad2-07bf2411c936" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf31d202-853d-290b-b6f3-6da2ca7b4cf6" executionId="c9af15c9-0c09-48c4-bd9d-7e565839c7f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e1d6871-2648-5b47-7735-f156f75721e5" executionId="4da498e2-02b2-4e41-8bc4-d5da255f9daf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8ccfe58-8f41-6406-086e-f09dc7100c5c" executionId="e80fc55d-f840-4711-9404-e0b2351f8f5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15ba331e-9eb4-33e7-0f69-8143990dfd4c" executionId="9b15c8c5-c9f1-465f-8658-9a3e6d9cc044" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27c0f553-3b87-e6a0-82a6-70b41ee00a13" executionId="8e9be030-121a-4182-8042-335abcfa70f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03c0ff53-8796-075d-a339-22ab7ea4afcf" executionId="dae27e9b-18b1-491b-98da-ff4f250c0c86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8447601-5c31-9049-ba3a-63d7873c6f75" executionId="6cf3575b-1c05-4b87-a5b2-05e44e8a4d8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94b77800-6724-78b5-48f4-5b33793d2302" executionId="0066347a-b52f-414b-a922-abdc574c1e76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82901ec3-e988-9aa6-5ce7-cdded3a0760f" executionId="7813d2b6-d68e-40a8-ad65-5a70e8e523e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b052559-4515-de00-a0d4-8e3b7beeb73e" executionId="153d7f2b-c526-4d6b-99c9-ca4b4519884b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53c7ab21-28e1-c3eb-f708-07c3541b8a1a" executionId="5964668a-f2db-4716-9430-a914f147ca01" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54f6ecfb-35f0-c829-3716-2201c6cd8ec6" executionId="3048f590-e073-44b3-99ba-dc5ec3475fc5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="634b7c8f-eff4-d566-bce7-e18cb89281a5" executionId="176af900-3fa0-44cf-995f-b0e335d1ab44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="851f9701-f91d-ed57-c1d1-67f769e36e90" executionId="ac128081-be95-4639-9c7f-e793ebe43bc5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e949c315-53bd-2553-894e-14dbe4dd533a" executionId="b8bde0e7-2f01-4ff6-b9a9-4046e3b876d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e340582-86f3-f229-bad6-4dadcc59a904" executionId="cc909dd0-7351-4477-a06e-f703821cac58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb17f738-f5cb-a2ff-471c-b0356ee464c1" executionId="bdb58664-040b-45f6-9476-3b3c21433b93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b666d56-bf4b-83c8-9a24-e83ce5cb41c4" executionId="0ee71a9c-9deb-466a-9fe3-c12822892e5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce0478ba-7529-c192-3f22-d3c8957f387c" executionId="f6e4627e-5b7b-467d-baa9-c8d3a6c668e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="383c68bc-26f0-7c02-6eb8-ed0c1145f2ca" executionId="dbd603e7-82c3-4776-b2ee-b23837eeb60c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c892f977-3230-15bd-3081-38b8d7f8bb19" executionId="bfe7d173-1ed2-44fb-a9fb-434be167436c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a9c2a03-174b-1a3f-b47b-6bdb91315d9d" executionId="eb15a00e-0938-4c31-899f-12a0e8af45b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3d5f6f8-0015-e7a6-45c3-7fad7932dd19" executionId="2ba11ef9-ce60-4f8c-8681-a5878cbafce7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="307f6ab8-7796-f860-77ed-a9583472c0ec" executionId="9bdce840-7085-4bb9-a5d3-e3bdd903bd5d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21841fcb-51db-8b56-1ec6-330b7a189f16" executionId="c48b08db-126b-4b1b-82f9-ac610c19473c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a61bde7-f5d1-d1b6-9435-cb4502417842" executionId="5c531dae-d2d2-4e0d-8cb9-734b7979244b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7051c9f-ed11-e9bf-d12e-e9248152b817" executionId="9158b8e1-5d8c-49a4-85a9-21b29c2ce332" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3dd66463-fb28-726e-f84f-673b18c29011" executionId="612ad841-f7bc-4dbd-bd9d-f1a68570378d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bf19e57-c470-cca5-3c98-872ba87473a1" executionId="c0518737-6b6e-4575-84a2-7b10643e2a45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0589868c-8c5d-7b03-3914-961a10b359eb" executionId="d151d27c-851c-45f5-aaae-7555eaffab92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0514bb16-2428-f4e3-9eb8-723bd792e3b0" executionId="620708b1-f5b7-4fbe-b671-3765f934f8fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b369127-e8e7-defe-a8af-ee1ba7a6deda" executionId="3c036593-c576-481f-b75e-677469411260" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3c9703c-0325-3982-9a63-348e8d73d303" executionId="a10f1b1d-f86f-47f9-8438-747a896dc390" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccd18b98-1132-1a8a-622a-288abe0aa11a" executionId="aa4dff79-939c-4495-8cee-48f9a5fb3ba3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5f80ae9-6dd1-d0bf-9d0b-0a87c052fa6b" executionId="baced913-f20c-4416-a3ae-15a38f4ed511" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58313bd0-6564-0b1f-dca0-834f976c22e4" executionId="a38cb782-26fd-4da1-be17-477b8b1021fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3cd3d2b8-462f-9901-c3e1-d914cf4f9d34" executionId="227dae97-d10c-42b9-a35a-5043ad82df4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67e46628-8ac4-cab1-090c-f995db06c8f8" executionId="45456933-56e8-4325-aabc-18b05931889a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b875a8eb-5f4c-3bda-7f90-d8381641a09f" executionId="363ee923-297a-4b7c-9590-0f2b23eeb2ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e38815e1-3e25-7003-bcd5-6b4c88f3504d" executionId="37615c98-507f-4ffe-a71c-a940cd28230e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c70338a9-860f-330e-e043-ebac8eb09ef5" executionId="09fc4bc5-e015-4c8b-a828-4ae34b6a3807" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8973b091-e178-1d65-d56a-e2b11aadd71f" executionId="44bdd01a-b8e7-4d43-b5cd-60717098619d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af24482f-1b81-c7e4-62b1-41827cf2c048" executionId="3deff0ac-6275-4703-8298-09eb1c61729a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b714498c-9c87-0b78-d61e-f290fd7282ab" executionId="a7e731da-2f35-4427-a4c5-4f15566ad5f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c259fffe-ac88-138d-4ae1-4de313cc4cbe" executionId="c22da87f-4e81-4665-9c45-189b69b0acc4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e125658-3cbb-ac01-3f7d-59db2cce5698" executionId="129376d3-4cf5-46f9-b172-5c350cb4f9b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af999560-22a6-bc64-49f2-60fb7c16e83f" executionId="eef2a22a-6e7a-48b6-92f9-7d84f0466094" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89dd3379-cf8c-49e0-6b28-139ddad8f9c2" executionId="610b091b-a917-407d-9a3d-b52ee18b6864" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1992f91f-0861-e6ed-f699-3cfa92591b55" executionId="6096d614-58f1-4566-837d-a3d11f23b8e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="011d5d4d-abe9-a7af-79a9-4cd0fe8f2ce3" executionId="6eb444da-e84e-440a-9b29-3c95039ff11d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9298a711-3f0f-4dc0-97c1-c7901fe03db7" executionId="07d32c96-2655-4797-bb3b-c02e7dc10f79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8d40bdd-3bde-10ab-c638-dbe861456930" executionId="e0c8a392-354a-4463-814d-f0347e52ba79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7820b041-1667-43a9-4746-db4c33f4b2bd" executionId="f5052f20-229d-4d7b-939a-c2be1ac1cda7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3b00382-709e-f72e-b3c0-f108f4668a1f" executionId="09d3f3d7-3f4a-4a73-8410-c5826977d0a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f2870a7-bd9b-bbac-ef3c-75c31774c0b7" executionId="3b985376-21db-45ac-98b8-71b90923c89e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="591cff53-2f79-2466-504d-c072d4fe6665" executionId="fd7ff8f6-36e3-4e6f-9385-83fc87a9c93a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e769f33-ee30-8987-2ce4-817c80559e85" executionId="6e2f0a99-fa31-421a-941c-d704296ce341" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f1251b0-41e3-d504-bb10-f577dc488621" executionId="40b14888-37e5-46c0-8fa1-ae11ee2995bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="119e348c-f0ef-c24f-b76b-a648e38851be" executionId="e504ca15-2d62-45d0-b267-f842af133aa1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b4c3b04-b1a2-2489-b27d-13d85675a4ba" executionId="b5196c64-355a-4981-a32f-88cdcca3cb4a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cef54e27-703b-1d0a-7b0c-bc617485a163" executionId="d0ac8444-325b-4b07-be97-68123f42b293" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="436a71a2-d20f-c36d-e7ce-8030d0d53961" executionId="6bef8e35-3655-48f0-80d6-58555994adff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c75a998-1d5f-b872-5b9e-64c1ceceb9a7" executionId="9ee0461d-3d36-4060-a8e0-056a13038192" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f662891d-f136-4d2b-3cb9-9e73ef5d0ac1" executionId="cd975df0-a846-4b59-b594-7f236f16f9ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8f11d4e-7fe7-d5c6-4619-0d1b21fa7ad4" executionId="422118e5-36e2-4cd5-9215-d9024b75e5fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3dc97217-af6c-f540-7ac0-358aeea3880a" executionId="af5738c1-472a-40c7-b360-4d83fbf64db0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37146f9c-50e5-df81-f85b-a080b111c5bc" executionId="6c67152c-cf7c-4f17-ab71-3f60a2fd19c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0f8b329-5796-ea53-a626-ae1acecaa874" executionId="4f41ff5b-f4c8-4964-ba89-8fe27dece696" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bab4e241-5249-6635-d11d-1fc7374b9527" executionId="a4b95ed2-9fdc-43f8-89a1-0d5d6055b8b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="879aa5e0-076f-bdb3-fae0-42d115f3abf2" executionId="86d73d0d-15f8-4260-9b53-f692d97fbb44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="62211e29-e33c-ac81-ea4a-1f2d2364bda6" executionId="4a4960ab-0b55-453c-bd83-8abd89674042" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c4ac217-0910-4c31-a3f4-3101105f0d91" executionId="4d65c1c1-3b3e-4cb3-8578-0f09a6ae3054" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fcff4d0d-d081-2cbe-671a-bf5965e4775a" executionId="17187ddb-69b1-4304-b435-8f2e9acdf4a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="068a10f6-68eb-5c13-fc33-ae4622bdd23f" executionId="52a95755-228c-47ad-91c9-d4779fe8a50d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae443448-ec19-1d1e-fc1f-8824a6207db7" executionId="50c77140-57a6-444d-8aac-9233e325739a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3361b9af-c9be-eed8-5242-2bf37365f061" executionId="51d96fa8-8c15-4914-88f7-d9113f318986" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16a5f0c5-0903-615c-9dfe-609d3cf842c0" executionId="0f49c796-70d2-43ae-a44e-6af68b794c39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0c12fd7-65ca-dee6-f976-91ee3feef222" executionId="6ab45b0f-80e7-4a4b-a70b-5741607e7224" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e0a9498-7f25-51c6-b87d-0cf3094798f5" executionId="abd7616e-121b-44e3-bdc0-f1ff47dbc506" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63b1ddbb-c2b4-8aec-b5a2-5094832b3850" executionId="68b2450a-3600-43c5-b38b-29fbc02b2f8f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86b6fec7-d8f1-e243-d86f-a32c4401d439" executionId="0a2c921e-b757-40bb-bdb7-9a8f0234b1b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db141841-9d70-4914-320a-a2787dcc9e72" executionId="4d112282-ac64-4cdb-aa26-f269077157fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4129ab77-f880-3bfb-0cfe-f6525360faae" executionId="1c0a00f6-cb81-4820-95b3-f4e2a05f035c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca1e8384-2c1a-2e61-30c6-769a171f781d" executionId="76611b22-cdaf-4fb3-99a8-c4fd4ab8bf87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80bc1e0e-3f35-015e-4382-15460e4a9226" executionId="3c6c9b88-1e5d-42e8-a910-faee99d744d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6300d988-30e0-379e-9b4a-e67ba56ff3d2" executionId="68a30c6c-8a15-465c-ae85-5cb41ba40139" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="589350d6-7e10-43bb-83dd-a978f8b1ddda" executionId="8ac6bab5-370b-4217-99ae-053b57d01dcd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5168e817-aa8b-3209-e13a-7dfdc424e751" executionId="f5d28e94-070c-46fb-9b64-f50dec71fe07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f56ac008-0206-6f51-ef42-047186e37b79" executionId="8c541b95-9215-44a0-acb1-f76f657b743a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f97975f6-bbf7-8489-dc5b-cb61f5052b56" executionId="7801e53b-4b8b-4dd3-a209-72f57ee3620f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36d08b1c-bb0a-1be2-2941-c1ebfcd1a026" executionId="53fbf22b-1353-4cf5-93c8-b7e8de35d433" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be7f7c13-7613-4c7c-d86d-f4a504acd7e1" executionId="f12f4255-0a50-4cbf-9937-3e6246f21cda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="952abe4a-6dce-9577-00cc-181d036e1c37" executionId="2cf8595c-078b-4c49-acf7-e71ae88f6802" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68f3c0ff-ba9d-d2e0-522c-097a5855fdb4" executionId="4f0b909a-ca53-4beb-a39a-565ffa0eb849" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90747cfe-56f7-9d8b-de50-2002695c643b" executionId="9fe9552a-f0b7-4785-8c31-318ec803ed43" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ca6dfcd-3a24-2580-23ed-e72fdffdbaac" executionId="2d989dce-9192-449c-b500-5bd9e622e1ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19a56280-872e-49ca-3cef-54276e1e5d2b" executionId="e8ea6ede-3d97-4696-8bc7-2b6ecf406a54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5aa10959-ca84-d909-9d02-dfcbec734b72" executionId="218c6727-0d5a-457c-9d74-fff5b3a76992" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47580bb7-0de7-7d32-6dac-1c3e3659cd63" executionId="e173e770-a8b5-48bb-b202-3fcf4a459754" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41e0f93c-3fba-83a7-76da-699d5d68434c" executionId="ddb7f0a1-d2cf-4001-9662-7ea445ed7bf5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54799e39-be94-2e32-f4c9-a4b72c43e732" executionId="9834fc98-e5f1-4163-a91a-b85be6cbd361" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="546dbf2f-4c34-e290-f3e8-0d13bb1c1203" executionId="6c7cbd48-e57b-4d3c-8aaf-c9bb515fe53e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1640f8c7-4a85-854d-2b2a-2cd750a6a971" executionId="9a401d9e-41ee-4a27-9b45-f596adfd5cf5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ecf0f39-dddc-ed06-5456-7bf9ede3157e" executionId="5b31baa3-d645-4299-a6b1-79b46b4a3ab4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f42837ac-fbc2-3e95-cac3-9dc972fd1d52" executionId="2640b0cc-8eae-4c33-9efc-08b49094a7f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55e73abb-0ab4-736a-c45b-d442b1c22907" executionId="96326201-b83f-4b05-afac-ca2995b546c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1606ac60-72cc-d7fd-2b2d-003c6be36b18" executionId="5bd8f275-ea63-40e8-8c84-4ccfeb2ee1f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="791f42ac-ceb4-d480-c447-7f5de1b50d24" executionId="563ff01f-4446-4b7f-8d0f-c823dab4b5f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d2c133e-ded4-e6f5-9fd3-b6af6fa39538" executionId="afcb84ed-dbff-4ccf-8874-8ec9486e76c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0efb421c-910e-3b0c-6b6f-08ad405ddc0d" executionId="44f33bee-3fa4-4b29-aac9-1d9fd7c04c4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dba91c09-1b37-1c4f-1003-70017fed4b91" executionId="8bf65fac-b83b-4462-ab5e-bb4dacd6d98b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1500a01-baea-8cb1-0fe7-9d30bf6bebf5" executionId="d68753c0-2cfe-44fa-9918-8bfb5f1422f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2963f91e-1890-45f5-2c07-007bc45b6f2a" executionId="73f6eaf9-df74-41a6-9136-586fe5e636ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1264ee1a-eea4-c783-0018-e3b5dbac7f6c" executionId="0e03c42a-e614-48ea-92c2-2e708bfa7c0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="815588a3-1276-cd58-3f2f-b608f1b78a2a" executionId="7b7da761-1ee6-4bdd-b6ed-4a352e769bba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7562ff2-954a-169c-10ed-f6ed01beee7c" executionId="2e1601f8-cfc8-4a1b-97ab-9797873d75b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3bfa1e0a-4a5e-96b6-a578-12e82ee3bd10" executionId="1203bd4e-fcf7-40d6-ba67-7f2aeab0ad7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f24b1771-7f6f-238d-4fea-5d9126d6db5f" executionId="1e054eb3-d019-4760-a5ef-74e6e36a5a4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8229abf-b486-4d78-bc37-754dd160b273" executionId="e2d15a0b-7fa4-4436-98f8-f2be60a937df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1e4fd54-91e8-ed10-c3ad-6591151f0365" executionId="26143974-3fd3-4633-81a1-56eee55bd3d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac0c5913-01f7-6553-acee-775e9bcf62be" executionId="e1dbf28c-5607-4224-bf19-ce6b8954b6ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99748bbf-6911-218d-7780-778804d80917" executionId="dddaead8-6179-4955-b8ea-1c27d0929d86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63bf1a3f-fc2c-3250-bd2a-1d4ffa56bc3b" executionId="cf5add39-664f-4b5b-b1d2-cd5b3af34774" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a754e99-d0f5-e6a8-b1b5-63e33f0e3b57" executionId="bf7f2fb5-7a69-4bc4-976c-fda450fa83c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aba73b2f-c55f-e1d4-7d28-f695b51fe172" executionId="d478765c-29ab-49f6-9ddb-ee302b3bd6a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87dabd65-7cdc-8a7f-2bce-66cb02085a5b" executionId="653e51f2-98ca-4589-a18b-3ecfe2f497a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14a0db9d-8e98-e05c-3063-7e4e2fed6c5b" executionId="58a359cf-d3a2-4e80-a2d9-b34d55ec901b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="775686ae-fab2-8cb1-98d3-874bd9eef7b5" executionId="1af274bd-a87c-4020-88ee-c7c8ea9b8f3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e26280af-38cc-36d8-d339-9ee0df7f0cd2" executionId="d16d9ab0-b6bf-4adb-9f41-f6f281fdab22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f17390ee-c248-4f10-8f08-1516c130a9a3" executionId="d49c0f92-8193-4cb5-90e7-ef4983121bbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cc4fedb-f54e-4317-85b8-9bffdce157f0" executionId="523bbe24-1fb7-4b74-b89a-780eafa2933d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d522191-ab7a-bb2d-7a3f-2fe13f45b1e0" executionId="af5d6300-d566-404f-974c-2e4a380f320e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7574193-0919-4ce1-962c-5132655dc275" executionId="9ed6c00f-c1e9-4e35-9a31-339f215c2b54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66ced87a-2120-00c6-032f-8f5ca9a61935" executionId="11d763f3-cd9e-4b8e-8441-9b1311a1194a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2aa49c2-5936-a474-4665-dca01f5cfd05" executionId="584081bb-20b6-49d2-8174-b4cc3ca172b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2790fa0d-dbe0-04b7-6591-285f180a87ad" executionId="36d990e6-122b-4ab7-a28a-2ec8c2f403a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9393af05-7595-1c9a-8549-0294d3109c38" executionId="2e6da362-fd47-481b-a82f-e7bb849675e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="720ff017-13fa-11bf-dd2d-1eaf98b060f8" executionId="119ca13a-cac0-4451-872b-75f03a785076" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f2c7bbb-7367-cbf3-abb7-bf71e63a8dce" executionId="c082a77a-0a7c-4ddc-b3e5-f063ca688b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="797e11c6-f1a2-a527-55e5-7c6c8c654291" executionId="386c6780-1891-4980-9b9d-ddf5f170b2fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3aed3f76-a72d-fb68-f0fc-5a61b85a11ff" executionId="5f038cf1-6b2f-4cc7-846c-5d49ca4bcd4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25c86072-8c08-290d-06a0-37377681c084" executionId="b0c1e667-f916-4c02-b1c4-9a1dcb7544d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff6c67ff-3b84-4e83-91e8-ebf3594e190d" executionId="a6b2077f-8375-4720-af0b-f5eb173a371a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4cff9d4-ce90-962e-f388-057396bb65b0" executionId="a7b14dfb-d1df-4af5-9de1-722562e4822f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58c92ea8-c868-e8f8-b831-647186eb97f5" executionId="df51ac4d-0684-4176-a72e-dd483dbe6d30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fb864a4-5321-7af1-1669-0b0d5af576da" executionId="2db9f6de-e032-407c-aab5-db585b7875a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c666040d-3c70-ae9a-231f-38f8ad37406e" executionId="ce257f4a-8cbc-4fac-a90b-585ab5b5ad5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f855d325-dbc1-cd31-965b-d0930491e263" executionId="e36a4925-a45b-49f0-a6f0-1824f80ea1d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fac57a1e-33b7-4a11-e8c3-b8d2559a1988" executionId="79b68ecb-239b-4c5d-a4f2-9482030e8461" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35a49b1c-3f79-0752-4188-b1f1fb479193" executionId="438adb58-ff68-40ac-bb87-c08a8dc63235" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce28c4ac-90ca-fd17-d63a-a7dd7bf1405e" executionId="10ef1ed1-36e5-485e-b989-6e2dc0d3de46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea07934d-794c-76b5-246c-9164b30beba1" executionId="89055f09-60a5-4e5a-8282-ed42f1211036" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4314f11-abf7-1ebe-026d-b131143fb8cf" executionId="b9d78785-b681-4d98-b12b-449d2c0110b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09d55e5b-7f43-161b-9ba7-43ccc2bd98cf" executionId="0efc2f4e-1ecf-4919-acf7-4e42b29d7c07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b77690e6-fe3e-b99c-d733-66f3a0b85d85" executionId="150146ce-943c-4351-96c8-c138af6f968b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7337caf-7a27-2772-3805-d7038e85f2c6" executionId="9b26f9e6-1d35-4c2e-a09e-c17efe16147a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c8e3bad-b9e6-1cde-728d-2550dd3acc80" executionId="10ca9766-8844-4e35-8a41-68b94cf6cd0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67b30642-f8bb-5884-c374-3ffd61558c59" executionId="5ccea8eb-0227-442d-91c3-74ac6df4f2f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="615b055e-5c37-4150-dbd3-4520d8053197" executionId="28d5a561-9f9d-4c57-ab5a-7eee0aff6253" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bcc3baba-fbaa-4efb-c57c-592a57cc1b9b" executionId="5f2bf45d-4040-4899-832b-117b13f6a3ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="527ae4fc-b32b-e169-880d-5e7ca94e3a7b" executionId="4e5d50aa-95a4-439b-922d-6acfe31c0d67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ebd882c-a2b7-96e0-6cb0-fa894f919aad" executionId="7dfd6d37-577f-459f-a1d1-69ed66a1c73a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2d8c5f9-3644-b75c-f06d-cf01a2ef674a" executionId="8902fcf0-2235-492c-b7d0-d4016f65020c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a70b3424-56cf-202c-2096-92abb5bfd76c" executionId="314020ca-930e-4d20-bd19-7c64687b9801" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8963b6bd-8fe4-f455-701e-d5989d2cf8bd" executionId="42f0854b-9082-437c-b45e-12754d0d2fd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01586e9c-790c-6a7e-d1b1-f81bffdd5510" executionId="14486e80-c251-4a08-937f-8643e5801025" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7e84321-08a7-a19e-e64c-72ea635d7950" executionId="8fa1048d-60a7-455a-a985-9bf99a04bfed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cac49b5-cc17-2ffc-c05b-4bcee9fc03d9" executionId="7e026bc9-96b7-4776-8122-94d043c87696" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50900259-7031-f383-6697-f81ab6ebc077" executionId="91884a5c-bf69-4581-8419-a8d6c5a66bd1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22bbc83f-d21e-1f73-594e-3b59d27ec7a3" executionId="7d240080-d34e-48ab-b4ff-e5c77a09ea74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8798851a-fc16-bf8b-14b4-6aae81f50222" executionId="80d16ffc-51c4-420a-a14b-34d6feb21393" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58b21109-3f37-b86d-cfab-fa4ed648fffc" executionId="19e41737-175b-401f-8912-1992dc478482" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b29fad7-5e5d-57b7-18c1-103e2dba36b2" executionId="22671523-b317-4655-9025-3dd2147fb149" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2c4eea7-4ab3-232c-9c7b-3c688d4216df" executionId="20da907c-9a25-4dc2-83a7-23e9ad77c890" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed962006-ff3d-3c85-3d3c-689173bbda9a" executionId="c6526c73-a8be-4145-a80e-5b2d5ecd0e79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f0301ff-f0aa-4137-9672-217201ee2140" executionId="df596a15-a072-43ec-a538-3aa362624680" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7a8328a-4187-37b3-b8e0-a1d7cf90c7fb" executionId="603f6788-5d90-4262-b8a2-c538e8b0997e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b5117f5-cb6f-fcfa-6a9f-ac621a1b49f4" executionId="3564e4d6-4b56-4845-b0e1-25ec41784aa6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1cfe891-e995-ef96-7df1-195cf19b88c8" executionId="01f91100-4108-4c95-a721-49afd918ed9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9041a8ef-47b3-3922-ea9a-ee8b21be9e93" executionId="ada05501-a563-4176-b8af-0156139ff178" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="576bc1fd-8ac5-2f75-2f02-7ae58b0a71f3" executionId="51177352-e63e-48e4-92ac-121f998d99f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="284d5173-f3a6-7e92-e7db-585a93a8fc95" executionId="793c01a3-2873-4188-bf2f-ea2f9cea605a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="43bb04f0-57ad-d421-11ca-dab72d694243" executionId="6b586731-8472-44a0-97de-1cff8095766c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="530abb26-baa4-6389-838f-ffc4bd44f207" executionId="5378f99a-edcc-4d69-9815-83f81b4c5a4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9464a9dd-8a6f-e31a-9933-d439f6aa4e52" executionId="59b37d1c-951a-415d-b691-8c066191edcb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a17427d-9a51-29fd-701d-30bdfba7f030" executionId="1c62c116-c7ed-4daf-8c5d-a53430a48f15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11488508-1f52-87b8-74e0-61a908c07fca" executionId="9c58530d-f65c-4beb-830c-21b49a6ead60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cc69a96-7dbd-689d-8201-919022b4aba1" executionId="35ac925f-57f8-4b65-821c-438d3ebd2396" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e476daa-9dba-97c8-29fd-5beadc78b489" executionId="b5094e1b-6aec-46af-9f2c-bf930277a819" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e734908-cc69-897a-6187-6cd749f259ae" executionId="d04b93b0-168d-4bc3-8f13-05cafd13ec79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bf90a50-0849-ccf3-46b4-2b469bd7a246" executionId="8b24333d-0ceb-456a-ac73-d0b40670571f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ce5c576-0118-6755-3cef-101645e2bcef" executionId="1ebbabd4-31d2-4f20-af15-350e7c322e48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b6d6cfa-cc38-2361-795b-ba120dd6cc73" executionId="0ba69ae6-317f-4682-b06a-8b3500bd16c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27dc3c2c-a8c7-7bd4-391f-ec452455f93a" executionId="53e69d53-8561-47e4-b79c-88a86a18f84d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fee15622-a411-246f-0c81-a60d1eaaa5f6" executionId="47148c38-eba0-49a8-a694-164c70eee642" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2772dddc-181f-e9a7-24fe-1b061f9ee0f6" executionId="19beabb5-5fcb-43ef-8e6c-7c2788bd2e47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d48139d-2efe-d8d4-b1ca-179d24d41fe4" executionId="d874ab3f-7cec-4022-95dd-70a17f4332ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="218808bb-3dfa-02ca-30bb-89c860576546" executionId="32b806a6-84c4-42ba-80fd-8df467984d38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53df6eb0-1c19-8ac4-03b4-2e6bf4081b40" executionId="78076b68-e921-4c49-b520-f5b259fcb150" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1aa2f39-b82d-5636-857f-39038a354264" executionId="6adbfd4b-01bf-44e0-8640-db0c1eb3b28e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b87667b-8c5f-026e-b74b-6bf3ca35c414" executionId="eb7e44a7-9cb1-4225-b604-a6cfb8f7a14c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99d600d6-24e5-6106-5ef7-c8dc03294f82" executionId="3b33db7c-6225-4e7c-b3e0-c8c8613e263f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18c94b8d-9747-9775-b91e-7891fdacf594" executionId="ed830c29-6c67-4b16-9082-3f829416b6ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd853531-f6ac-1005-7638-fbd4ee5ec046" executionId="bc8a2efb-e7b7-4857-884d-786c34efd7a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="611e7fad-047e-c8c3-d507-5acb671efeab" executionId="f122646f-d022-464f-8445-f1b235edfcbf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c5f9831-e9e4-2657-ff43-677ba035e254" executionId="3df7508c-0cb2-4cd9-9765-f4aa3a7f2005" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="48fb1e4b-ad2d-02cd-95ba-266b1f4c1404" executionId="d063b104-b72c-4fc8-9da4-16b24aa21525" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9937e1e-695a-bc97-6b5e-324cb9404919" executionId="d52595ca-bbc8-4e07-b301-772370e73936" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ecf2ff4-801d-b818-d5dd-25a109711ece" executionId="ff34386f-f58a-4784-aa45-5550f41ef186" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4a3633f-999f-667c-424f-36b2672c8bac" executionId="df3b1123-4453-433a-8b4c-64cb6886867e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="95080d7e-1009-58aa-e521-57a8a5f8cfbe" executionId="61a2aba0-c672-4292-abb3-09862bf3e906" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab7f3817-3047-4817-973f-500cf80cb369" executionId="5b019316-bff1-4727-8ae0-24b92589722d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e25591e7-af62-8c32-706d-2883a0efb30e" executionId="6a5d3a11-d41e-4e03-a356-dc7da5132e6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f68d6c05-f9e5-c914-3a77-c9bec7671b47" executionId="04f47714-f420-464c-94bf-cece39564bba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c54bfdac-6801-acfc-cdca-5abf388ae3ed" executionId="7bc99164-5244-4393-a77c-de48409f4a86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07418d7e-91d3-dbff-d2dc-9c4545a34911" executionId="2516fd21-9f74-45fc-a680-df492716a224" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0c3d988-77a3-bf7e-e830-ee58de1ce132" executionId="0d369602-ae58-4e98-81ad-da6f38ac5886" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c19465b8-e88d-a62f-cbc4-45c0609111a3" executionId="c6e19380-6be0-4a7f-9f6c-58233d385ef2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5378f77-e924-b851-abd7-ab0158fe4d49" executionId="bad26625-86c5-4f5b-84ad-ab1e98db1d1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1567d10-e963-2ceb-4f22-9d2373bc7599" executionId="ce576137-6310-4265-9bf2-96a04aadde95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f63738f4-a69e-536e-e5fe-dffe29e8bae5" executionId="97310311-4ffd-43ad-83a4-eeb7fdef3940" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6eee8cd5-4736-9a77-82cb-935761a7f0b4" executionId="92d17155-5fb3-4daf-addf-d130231303d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8422d324-07c2-3f1a-4a28-6c8ab5ce4ca3" executionId="0579c373-d44b-4a61-a554-11bc5a0f7704" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="735448ca-47a1-4468-c70a-daa48ab13cfa" executionId="2c0ed2a9-ee22-4abf-907f-f1a207763fca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b009ec2e-05ea-4420-8f89-1ba8dd8ad4ca" executionId="14d17cb3-1753-4634-be80-960299cdfd0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a137678b-3ccd-02ac-03ea-39b886c0d291" executionId="b09d5bcb-998d-49a7-951a-9873c72972c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd12dbbd-a97e-52ad-cf1d-cf02da770442" executionId="1da97740-d0b4-4f66-a954-9793f5ccc62f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdcfbe97-df7e-bb35-4151-7108627cf446" executionId="2cda6e1e-88da-4fca-ac03-8d74307b206a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="578ee0a5-be03-ca09-3f70-c5737802e85b" executionId="c967f045-6fb8-4f75-89ee-018c4495df8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="210f6e22-ba1c-e98e-5dd6-be3648d84165" executionId="56c6121b-3976-492e-bd16-19174fbdb36b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b4c9925-032d-6377-7b2c-c642ae9c4f80" executionId="56ff88c2-8589-407d-a076-fe22a7565e41" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0b0a1e9-da05-1823-3adf-18acfe1ea997" executionId="c86946ef-5100-402c-9d57-867c10bd700d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ff53185-a489-c2c7-2a49-5350f1f99fd6" executionId="87364003-5d8e-409b-9056-60ab9e0bf7b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ea3438f-056a-3872-16f6-e23ae4279cce" executionId="f356bddd-697e-4409-a1d8-1c8c7ec25a22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ea1ae3d-0a97-dbcd-06f5-80272c5f5f80" executionId="826516cb-6f29-4251-8693-40e5990bbd1c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10c5cbdd-ac7b-03dc-7ea3-9b9f703e7948" executionId="dc056a46-3a1f-47df-b91b-adbbe1e0d610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0efbc1e-13e1-e677-e6fe-e66f2490824c" executionId="df27ec9b-afd4-4c5b-bd80-1fd2230e2df7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b63c67b-1f6e-8e27-86f9-861cb2cd75d1" executionId="50804691-5b81-4e19-be2c-78ba67f872b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11ae4c3c-a8db-d2a7-8fd1-218a71aff984" executionId="c811ba9e-b9c0-4c3d-acb6-78ebcc2b4610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aaadbd51-b37e-23fe-dfb6-67360ea79bd1" executionId="c0fb468e-69ec-49b4-9c5f-c1d01bca9f7f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b4dc3b9-8bcb-83d6-862b-e97db610cee2" executionId="17b2d97c-dd36-488c-a889-9afeb3ba780f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65375472-8cac-6004-4685-18d23af2b064" executionId="65296678-3675-4239-9d20-7b1000f1f415" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc188d95-c2ae-ec37-3455-8da90edbbeee" executionId="6e4f3d96-7ce2-4737-8552-f183b170c8ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ac9584d-4afd-14a6-d7bd-d80a13d8d18d" executionId="76b7481e-9d33-4bd9-93b8-fc3bac43e000" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24d1f141-7886-cdf2-2ec4-62cf846b5a92" executionId="205ecacb-f070-4334-95bf-82b488b03fe4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec23b259-a8f2-7566-6776-62f62d740583" executionId="ae7caeca-b74b-4acf-a7a5-003d27145cbd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d94c3083-d197-e212-7b31-59740717e656" executionId="c99e9345-53f2-43f6-abb8-b96c5b1aa358" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef3c64cc-812f-5128-6cd4-964f948a2537" executionId="58dd0afd-3908-4b11-aa54-cde4e39130eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0403e92-9117-6d84-f46a-addc9ea43ccf" executionId="957f00ec-8a33-464c-8b93-8948d2a60faa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb59336f-121b-0882-b66d-7eefeb3a7517" executionId="b906e7ed-1ca2-467b-b6ce-99e91f0ab56a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f7a4a9f-115d-596f-d650-eea1a84e0fa9" executionId="479f188f-bc14-4dc7-b316-7b12f53e23bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02f1db6b-a503-ecec-bd38-204c63d5c68f" executionId="e365cffd-5970-49bb-93d6-2f4cb46d778b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ce8d2e9-88c9-3c5d-5f64-0ee4a7cb9f6b" executionId="d45f0ad6-c661-485c-8d35-e8fa04ba3f44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="877933a1-7973-5c53-3310-8c1c443b4830" executionId="ea83d867-7f21-491e-9a95-009dd22c5ecf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18effbe6-662d-7a50-8c7a-2b49148e34bb" executionId="c0f7f1c8-d30b-4378-bc46-6b02aa8b49a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf05d999-7dfe-c027-bd92-5bc4ffe1a55e" executionId="cf13d0c6-27a9-4cd6-8d83-4876c265e109" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f3ea1a5-bed4-1b21-f15d-9dc837ac21b4" executionId="80e97190-8ae5-411b-9a12-a8e5afe343b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68888a81-ca11-a349-b000-6bfcb2f09535" executionId="81511fe2-35d9-4371-9203-ee0582903f36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b36ad573-889f-11da-5d89-084e8740cc3b" executionId="51c154b9-1294-4ca7-ac9b-d549b86b8fc3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1630493f-2047-380f-4f32-ec9c56ec784d" executionId="d07fd49e-1dab-4b75-badf-d4ad8bc3325a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a286f8ea-8a03-982f-b207-05580a9ef8e2" executionId="4b73c14f-8dc0-48ab-ab13-3cb576afb8dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4eb5bdaf-4e2b-55dc-3592-444673729556" executionId="7da12e06-57c2-4f40-9c5d-0a881929c767" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f90de586-f0f7-7bb7-7e7d-66ebc740e111" executionId="d62f4e48-ead8-4391-b7f1-0291872cc9fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0bffbf7c-ca22-bc86-0525-e7b110bfe015" executionId="8592f4fd-8a79-42b5-8ed2-e93885a1da6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49ca3500-bd8a-a55f-81c7-7a5dc1b06c17" executionId="a1ab29ae-31f8-4645-b265-92d6ee0a4685" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2652e89-08ec-3257-411c-b9e708e89df2" executionId="3971fcd0-dd26-4c41-b594-7a10769e3eeb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1c516af-1cc3-4b7c-b57c-30ff65703d39" executionId="3e51e158-d7d3-43ce-a480-eb7e137e20d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e636c7a-6e90-954d-02f9-a4c845d8b00a" executionId="df5b8c62-33b1-4180-bcb7-86d29c765479" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36cf3a62-40f9-21b7-1392-1e358cd01b86" executionId="c6b80f7b-01c0-4cc8-82a2-d49ea392ee2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88d7f173-b5c5-e236-ab09-126d31465b9d" executionId="3bca7cde-45c4-41ff-8961-9f357d0626a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab07f154-65a2-fdbc-3f53-a6b82956dbb8" executionId="409ad1b3-472c-4f39-b801-ef8ce7741991" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8951f6a1-cf92-62a9-dda8-25a185bbf2b9" executionId="c580124d-4c54-4915-b65c-d4e1c7ec181b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f84c92a-3a02-4087-04fe-44c5e6c6920a" executionId="e6bd3368-62ba-4dd9-82a6-187b70b39771" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1272676c-ac90-6e3c-6f29-c30dd512a079" executionId="23b67532-58ce-4d70-8c84-da5c845b1a2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41e9b880-0ee8-154e-677e-70d9328b8ed8" executionId="216b83e2-f611-48e1-83c1-e2b139dd8003" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2420bfa-f8fc-7e3c-e2f6-b97691f3164e" executionId="7b9d2744-0919-44fb-8988-3c6e4c866106" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e2f50f5-727f-42ae-2274-7a9a8d3b4a4e" executionId="ca43961b-b0b3-4917-9f5f-2290db68f89b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c40e43c-ac10-9251-ad7b-d9eb2079a1c9" executionId="68029a39-becb-4062-97f3-4b876c068901" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56b6c9a8-497e-3e29-1361-66f6fe2d0bc4" executionId="e58c3da2-33ae-4cc3-b6d8-94d220ca7563" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="905374de-5ee6-b8e8-cf19-58986d68be62" executionId="e22cc8fc-3a48-418f-b2ab-8deec7032457" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4cf1fee-5d4b-bb41-588d-21705185f386" executionId="bc0e6b3f-c8af-45c6-95df-4a21b8b5fe8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49e3a4fe-2f55-6551-73a5-a3f0b39efed2" executionId="14f10ea2-36c6-455f-af77-f8e562b34844" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42a81f3e-4855-438f-c2a2-7cd2b0b28ce2" executionId="c45a4996-1021-476b-b755-6c5d8259b514" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bcb015bd-910f-52aa-cad3-2aaddbf3c52b" executionId="c948974e-e615-44eb-aadb-aacfb423bbb7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f21a086-0895-dfc2-3c39-f277da674f43" executionId="9a3c1a8b-9393-40f3-86d1-2be69e8d6563" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bec4dbef-ebc0-96bc-14d4-d6fdb26c8215" executionId="d561316a-e4e5-4a88-9128-280e9be51f86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7dea1c08-3c63-245b-1697-1d815dd60b2f" executionId="37939312-8708-4362-9e96-bc20467a05d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a15fdb8a-8b2e-0a07-8ba6-dea6dcbdcda2" executionId="640916b3-1d6d-4ff4-9074-a16ccc481cf8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b90d30b-53aa-f75d-5055-caac21b4504f" executionId="1d326e3b-fa19-4fa5-a575-88a913241905" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="691d4d8b-d940-61dd-e201-77202433c358" executionId="3e8be15d-3b5f-4033-9dff-71dd9c6ead9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="706aff9c-dd8e-5ce4-bf5b-204fc2a78489" executionId="7e902b24-6e4d-4fa7-b9e8-c3f2fbc081e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ae6e9dd-07b7-0461-c652-c50b2736e042" executionId="0df75240-b4bb-4146-b196-dbe656a9ba2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5aa26f02-d133-6cc7-7683-f824f0e3c12f" executionId="861fdda3-2a11-4e80-bf92-e33f85e014d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5f8ff45-b6a6-7ca9-7fd9-76cc552fa241" executionId="67da3369-e7df-4ee2-90a9-f20810654753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d88accf-5b21-1ee2-54bc-0357b8edfec2" executionId="d8437816-b881-4fd2-9812-4a2456879ff4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ecd774ab-3b6b-feed-3f03-8ef88e0dffff" executionId="20bd5317-61f7-4151-a7b0-ffe7583a00e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1cce6a0-ef57-222e-45f0-bf21b6b67406" executionId="a9ee90f3-03ef-4918-aa7e-a577fceb2714" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="687b3502-9e6a-9efc-154f-922d2cca5791" executionId="1f02a3d6-e0c4-4a42-bfb2-a6185ad4b667" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b086221-8744-e546-760f-a12769cc2c94" executionId="d8898022-43d3-4227-9a57-42440294ede9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b48c1cde-ff79-b262-d23b-2c472fb4d5ab" executionId="6ae21cb9-5140-4bd0-8c52-705a6a36a914" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9efbc034-7bcc-33b7-502b-48e6be953a44" executionId="ddc8a37a-229a-4af4-bd87-713acfdba812" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae59a19e-b7e5-1e1c-787d-3002506b4ef2" executionId="e8b18cd4-bb04-4624-beba-8eb6fa11d1a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0a8736b-c661-2693-d4b3-56a6c89fc54e" executionId="cd07e86f-b7e9-4a2f-adc5-c057c34d8a8c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4516515e-40ff-e57e-862d-83f2d090dcb4" executionId="8073358b-f5a8-48f3-a6bd-22b7ebfa5dd5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f265c629-f9a5-10ee-ad96-8ff2d7867fe4" executionId="2121bbfe-f8af-472d-bf42-976bd49ae7b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae3f38ec-f30b-0cdd-db91-d7e3eec08d99" executionId="0edd9e55-2246-4497-b95b-a57f9d982b36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c74e4f3c-9610-9063-7a98-f2ad25290514" executionId="4c420e96-a241-4f4d-a6ca-f51d819e36e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="904ebdc9-31be-da35-c276-af88d4ffa9b7" executionId="80dd93ea-0e7b-4566-a5c8-2e5f9b2200f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="770858a8-6709-fa27-4697-79147472553c" executionId="9b70e01d-73ac-4434-98f0-fe9a5971c92e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13d6dbb4-682c-c3f2-16b0-9ac3f68f6b72" executionId="9c678eb5-48e5-443d-85b1-3fde11d440a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f63f1e41-ddc5-68ea-d736-804cccaca408" executionId="dc4f359e-8fb3-4ac5-9223-2a415c4e1813" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d3d078a-26f1-1ddf-7275-db04985dc1b6" executionId="ff21f1a5-aab0-415d-a6bd-878535cd6f52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a5519ec-b4e2-1641-103d-15ff0f509796" executionId="940d544f-68c0-44d9-a85a-768275f81d71" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bafa9832-90fe-b182-50a0-2ab78b37fa84" executionId="e0a6ddda-5f57-449d-8b4a-95a67dcbd8ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="43eee416-1b88-5755-39d0-98fc78c8cab5" executionId="62196d3c-e4b7-48f0-a956-30101155892e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16281464-b63d-9914-3c06-7d706ef6a663" executionId="ff398219-cd15-40ee-b0f9-d91c26b6e5d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b8ead2b-ccb7-78d2-1144-7d9cce24d811" executionId="1332fe97-7cf0-410c-9248-5cb8f9aeaaff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2609c142-3c09-0ed1-04d3-54ca1cf691a6" executionId="f90e51fe-5e38-49d1-bcba-d69605447e12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7a81934-a7af-8729-ecff-9f33d6871585" executionId="8dbb06de-b299-48d1-a9bc-2be6583883b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b53a09d-fb08-ae82-694c-fbd906816c3c" executionId="8e5b9039-5240-4c36-bc5e-cf4a9256a842" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64e38fa6-35a4-7a09-2052-19582fb62dc3" executionId="91910a54-a0a2-4254-9e6f-47f96f787158" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d6979c9-ed2c-f714-d69b-f4c82451b0cf" executionId="b34f2daa-8748-4b79-bd3e-39e1b83b2f5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ba61a29-dccc-ccbb-fc56-8a209e264e47" executionId="3f766ada-5e60-4edf-91b0-41e39abb9b64" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="894daa6d-01a3-a92f-b322-55f97ead792c" executionId="f8d4935c-4333-4546-97d7-69b42af97a54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc464d11-fc3d-4dcb-937d-b5b4d2a83796" executionId="b7fd1e68-703f-4656-9d70-6cfde0a92f03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aff91cf5-eef9-b75d-d2a9-0b5e9f477751" executionId="c5888bfe-5a77-4cbd-a856-7afb6608d722" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3cfc05a-c6b4-326a-3412-2a8d498f10e3" executionId="2e40afbc-5dbc-4903-a52b-215ec855f659" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27c2506d-be45-145e-ed2e-c72034354d60" executionId="065a43cc-1113-4dab-adbc-c0a1108d9a70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9422caf1-3c6b-6cd9-f625-3e3d62c2b8d7" executionId="ddb21f05-2dbf-4672-8c8f-b431512938f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="feeb523e-1f32-a999-0336-669496f711b2" executionId="33a6fb5e-e40b-4a64-8e06-63af24e86f21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68f3f73f-ba62-2e93-9404-9c89b6d5f158" executionId="0bf2ba0d-9d18-4421-a517-08bf490219a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f80f63a6-d063-251c-198e-446f5c41e548" executionId="d7e317a3-9830-48b1-86c6-b177124d8441" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f957c3b-70b9-f6ab-5a34-4a26e6bed843" executionId="9481a424-0b45-495b-8be1-d5a1831960d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b3c013f-4c34-2209-e77f-fcc0d9a6dce9" executionId="9dce60c6-82cd-4f83-ad71-c3b08c1f53f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71c55f5d-8d39-8f4d-abc2-00f023384534" executionId="80303504-f169-4df6-b3fd-0f0016fef5a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d298a0ed-05b9-cdd5-4f28-0e49abb5a26a" executionId="1e7493cd-908c-43a8-9c0d-5884a3cbc3cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1b867b5-a241-9635-0a36-b068e811f85f" executionId="d61b1f66-17d9-40ff-8e0e-e02ff516cea7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="394272e4-c6e4-7e1e-f042-b063b0e59c79" executionId="2ace5243-e3cd-4ef9-8c8b-7301d0f11317" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b52d0822-04af-b0f7-d030-908b71193673" executionId="0a4e482d-061b-49aa-a1d8-c35873d51fea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92b61aaf-2a42-2153-b00b-52cf8fe3231c" executionId="b6351ef8-2edd-422a-86d6-129ae3b24a63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="279e95ed-62ce-3800-7a7a-79939f0ed206" executionId="ef992d30-61e7-452f-8b28-9add70d5ef22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57192594-1201-4522-b027-3056f5db3eb4" executionId="a6b9dade-7033-41c4-bb5e-20e83eafe01d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67afc45b-dc45-13c0-2a62-ab056e044b5e" executionId="88d645cf-a744-4a4b-911a-6f11802dc68b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6d3adff-7c5f-092a-ea10-d9da98451365" executionId="f764ac35-4025-4a32-a3f0-87e88921952a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e0b9c78-f315-8511-650d-85dec97d68fa" executionId="bf6ff315-3802-4032-911f-d7499f99768d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2a8e4a2-4531-86b4-7509-58df83a34981" executionId="0c845a3d-3cb3-4744-b785-87cb0dabd632" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1edcf536-5c18-7c69-57e6-6e6902a99a6d" executionId="c4c01560-c45f-41ee-91d9-abfbea3a360b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f89b294-644a-5682-d7ed-155ee37774d3" executionId="e0b713b8-1f9e-4dfc-9ddc-df70f12d1eed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46d5ab2d-979b-c59d-2023-7b18c34b32fa" executionId="ad6acdaa-edab-4bae-9284-822d483bcc40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6536222-3f82-82aa-13cb-38a401133b80" executionId="f5c2a054-65bc-41b3-87d7-a845957a653e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c26efca5-de6d-0ad3-3751-2bb9c82d1565" executionId="3b5cf074-3cd7-441b-a5a4-4be38a87be89" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a9231b8-c735-6643-d8d8-8b067365fd1e" executionId="58daa03a-ccc9-4425-aabb-140d33ea7cba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ba92cca-fc30-4784-5795-92a63ddb8ace" executionId="b83af85c-2393-4964-a2bd-8b6f468f5bf1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="580a3282-11de-3081-5f9e-91044d62b763" executionId="cb5bc8e9-ab30-442a-a7dc-5aa7991b5949" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edd904b3-adf0-ea6a-4718-4f379db827ab" executionId="81ec572d-10f1-4def-8945-3527a31bc349" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b67cafa9-d5d4-1bba-6213-41fbc8c46d4d" executionId="746630c2-9937-4a61-8c70-b1e60345f82f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f71c1240-14b3-fd17-695b-3bcf88187400" executionId="3e0298e3-731e-4325-89de-d9bec31de8e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a8c2451-1457-6f0e-7492-4dc612c99061" executionId="6c62107b-70cc-4ad4-aa07-6bce40379c90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="1860" executed="1860" passed="1860" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.5+1caef2f33e (64-bit .NET 7.0.5)&#xD;
[xUnit.net 00:00:00.34]   Discovering: Tests&#xD;
[xUnit.net 00:00:00.61]   Discovered:  Tests&#xD;
[xUnit.net 00:00:00.61]   Starting:    Tests&#xD;
[xUnit.net 00:00:00.85]   Finished:    Tests&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>